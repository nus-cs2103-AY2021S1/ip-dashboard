[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "# duke.duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 27,
      "-": 45
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Duke is a desktop-based Graphical User Inface (GUI) application designed at helping you keep track of your day to day tasks. It has a wide variety of features that can help you manage and organize your tasks. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "As Duke is optimized for people who can type at high speeds, it has the potential to be quicker than other traditional applications depending on your typing speed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Download the latest Duke Jar from [here](https://github.com/hoperawr/ip/releases/tag/A-Release).  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "- [Quick start](#quick-start)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [View all commands: `help`](#view-all-commands-help)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Add a todo: `todo`](#add-a-todo-todo)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Add a deadline: `deadline`](#add-a-deadline-deadline)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Add an event: `event`](#add-an-event-event)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [List all tasks: `list`](#list-all-tasks-list)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Mark a task as done: `done`](#mark-a-task-as-done-done)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Delete a task: `delete`](#delete-a-task-delete)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Find a task: `find`](#find-a-task-find)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Reschedule a task: `reschedule`](#reschedule-a-task-reschedule)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Snooze a task: `snooze`](#snooze-a-task-snooze)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    1. [Exit the program: `bye`](#exit-the-program-bye)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "- [Command table](#command-table)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### View all commands `help`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Shows all the commands available."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`help`  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Welcome to duke!`  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`These are the list of commands and [ ] indicates user input while { } indicates variables`  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [todo {name}] to add a new todo`  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [deadline {name} /by {dd/mm/yyyy HHmm}] to add a new deadline`  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [event {name} /at {dd/mm/yyy HHmm-HHmm}] to add a new event`  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [delete {index}] to delete a task at the index specified`  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [delete all] to delete all tasks`  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [done {index}] to mark a task as done`  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [list] to view all tasks in the list`  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [find {word}] to find task that contains a certain word`  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [snooze {index}] to push back a deadline or event by an hour`  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [reschedule {index} {hours}] to push back a deadline or event by a number of hours`  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [help] to print list of commands`  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`- [bye] to exit the application`  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Add a todo: `todo`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Adds a todo to the list of tasks.  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `todo [DESCRIPTION]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`todo laundry` "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`added: [T][✘] laundry`    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Now you have 1 tasks in the list.`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Add a deadline: `deadline`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Adds a deadline to the list of tasks.  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `deadline [NAME] /by [DATE] [TIME]`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`deadline assignment /by 25/12/2020 2359` "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`added this task: [D][✘] assignment (by 25 Dec 2020 23:59)`    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Add an event: `event`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Adds an event to the list of tasks.  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `event [NAME] /at [DATE] [TIME]-[TIME]`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`event tutorial /at 18/09/2020 1100-1200` "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`added this task: [E][✘] tutorial (at 18 Sep 2020 11:00-12:00)`    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Now you have 3 tasks in the list.`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### List all tasks: `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Shows all tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`1. [T][✘] laundry`  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`2. [D][✘] assignment (by 25 Dec 2020 23:59)`  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`3. [E][✘] tutorial (at 18 Sep 2020 11:00-12:00)`  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Mark a task as done: `done`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Marks a task as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `done [INDEX]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`done 1` "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Nice! I\u0027ve marked this task as done:`  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`[T][✓] laundry`  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Now you have 3 tasks in the list.`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Delete a task: `delete`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Delete a task or all tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `delete [INDEX]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `delete all`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`delete 2` "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Noted. I\u0027ve removed this task:`  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`[D][✘] assignment (by 25 Dec 2020 23:59)`  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Find a task: `find`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Finds all the task that has a certain word."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `find [WORD]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`find tutorial` "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Here are the matching tasks in your list:`  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`2. [E][✘] tutorial (at 18 Sep 2020 11:00-12:00)`  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Reschedule a task: `reschedule`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Reschedule deadlines and events."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `reschedule [INDEX] [DATE] [TIME]`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `reschedule [INDEX] [DATE] [TIME]-[TIME]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`reschedule 2 21/9/2020 1200-1300` "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`The following task has been rescheduled to:`  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`[E][✘] tutorial (at 21 Sep 2020 12:00-13:00)`  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Snooze a task: `snooze`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Push a deadline or event back by a certain number of hours."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `snooze [INDEX] [HOURS]`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`snooze 2 1` "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`The following task has been rescheduled to:`  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`[E][✘] tutorial (at 21 Sep 2020 13:00-14:00)`  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "### Exit the program: `bye`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Closes the application"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`bye` "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "`Bye. Hope to see you again soon!`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "## Command Table"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003cth\u003eCommand\u003c/th\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003cth\u003eFormat\u003c/th\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003cth\u003eExample\u003c/th\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003etodo\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003etodo [NAME]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003etodo read book\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edeadline\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edeadline [NAME] /at [DATE] [TIME]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edeadline study /by 9/9/2020 2359\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003eevent\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003eevent [NAME] /at [DATE] [TIME]-[TIME]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003eevent meeting /at 9/10/2020 2:00 PM, 10 Oct 2020 1530\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edone\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edone [INDEX]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edone 2\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edelete [INDEX]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edelete 1\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edelete all\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003edelete all\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003efind\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003efind [WORD]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003efind read\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ereschedule\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ereschedule [INDEX] [DATE] [TIME]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ereschedule 3 21/9/2020 1300\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ereschedule\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ereschedule [INDEX] [DATE] [TIME]-[TIME]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ereschedule 2 21/9/2020 1200-1300\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003esnooze\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003esnooze [INDEX] [HOURS]\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003esnooze 2 1\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ebye\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ebye\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003ctd\u003e\u003ccode\u003ebye\u003c/code\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/table\u003e"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 223,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Deadline class to store deadline information"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Deadline constructor to initialize a deadline object with the name and time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param dateTime date and time of deadline in the form of a string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Deadlines(String name, String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name, dateTime, \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * toString method which converts the object to a String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.getDone()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[D]\" + \"[\\u2714] \" + super.getName() + \" (by \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[D]\" + \"[\\u2718] \" + super.getName() + \" (by \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 33
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 60
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Duke program can record down todos, deadlines and events and save it on your computer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Duke constructor to initialize a Duke object, initializes a Ui, Storage and TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @exception DukeException On input error and file path error."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Duke() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * getResponse method to parse a user input and return a response"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String response \u003d parseUserInput(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseUserInput method which handles the inputs and responds to the user while calling the appropriate classes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @exception DukeException On input error and file path error."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String parseUserInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // splits the input into the different words in order to understand what the user wants"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] inputArray \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String userCommand \u003d inputArray[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        switch (userCommand) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Avoid starting commands with blank spaces!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d ui.bye();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Main.closeDuke();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d ui.printList(taskList.getTasks());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (inputArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.doneTask(taskList.done(inputArray[1]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getTasks());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please specify the index of the task to set as done!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (inputArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.addTask(taskList.addTodo(inputArray[1]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getTasks());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please key in the name of the todo!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.addTask(taskList.addDeadline(inputArray[1]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getTasks());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please key in more information about the deadline!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.addTask(taskList.addEvent(inputArray[1]));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getTasks());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please key in more information about the event!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.deleteTask(taskList.delete(inputArray[1]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getTasks());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please specify the index of the task to delete!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.foundWord(taskList.findWord(inputArray[1]));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please specify the word you want to search for!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"reschedule\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String[] specificationsArray \u003d inputArray[1].split(\" \", 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.rescheduledTask(taskList.rescheduleTask(specificationsArray[0], specificationsArray[1]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getTasks());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please specify the index and a new date and time!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d ui.rescheduledTask(taskList.snoozeTask(inputArray[1]));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getTasks());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please specify the index of task and number of hours to snooze!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d ui.helpString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Sorry I don\u0027t know what you mean. \\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    + \"Type help to see the list of commands available!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 135
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The DukeException class which handles all the exceptions in the Duke program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 14
    }
  },
  {
    "path": "src/main/java/duke/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The event class to store event information"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Event constructor to initialize a event object with the name and time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Events(String name, String startDateTime, String endDateTime) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * toString method which converts the object to a String"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.getDone()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[E]\" + \"[\\u2714] \" + super.getName() + \" (at \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[E]\" + \"[\\u2718] \" + super.getName() + \" (at \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 34
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The main class to bypass JavaFX runtime components are missing error"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   8/9/2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Image icon \u003d new Image(this.getClass().getResourceAsStream(\"/images/icon.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * start method which sets up the stage and all its children"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param stage stage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            stage.getIcons().add(icon);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * closeDuke method which closes duke on a seperate thread after 2 seconds"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static void closeDuke() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Thread.sleep(2000);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                e.getStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 60
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userImage.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeImage.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * initialize method to create a welcome message when the user opens Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                DialogBox.getDukeDialog(\"Welcome to duke!\", dukeImage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 57
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Storage class to save the data on the computer"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    // file path to direct the program where to save the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Storage constructor to initialize a storage object which directs the path and creates a file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * if no file exists"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when the program is unable to create a new file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Storage() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String fp \u003d \"/save.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        path \u003d Paths.get(home, fp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (Files.notExists(path)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            File newDir \u003d new File(path.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                newDir.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Failed to create new file\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * saveFile method which saves the list of tasks as a file on the computer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param tasks takes in the list of tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when the file path cannot be found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void saveFile(List\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(path));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String contents \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            for (Task x : tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (x.getClass().getSimpleName().equals(\"ToDo\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String temp \u003d \"ToDo\\n\" + x.getDone() + \"\\n\" + x.getName() + \"\\n\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    contents +\u003d temp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else if (x.getClass().getSimpleName().equals(\"Deadlines\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String temp \u003d \"Deadlines\\n\" + x.getDone() + \"\\n\" + x.getName() + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                            + x.getStartDateTime() + \"\\n\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    contents +\u003d temp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String temp \u003d \"Events\\n\" + x.getDone() + \"\\n\" + x.getName() + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                            + x.getStartDateTime() + \"\\n\" + x.getEndDateTime() + \"\\n\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    contents +\u003d temp;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fw.write(contents);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"File cannot be located or opened\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * loadFile method which retrieves the file from the path and returns the data"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the list of tasks retrieved from the file on the computer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when it is unable to load file from file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e loadFile() throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            sc \u003d new Scanner(path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"File cannot be located or opened\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String type \u003d sc.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String done \u003d sc.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String name \u003d sc.nextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            assert !type.isBlank() \u0026\u0026 !done.isBlank();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (type.equals(\"ToDo\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d new ToDo(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    temp.completeTask();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                tasks.add(temp);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (type.equals(\"Deadlines\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String startDateTime \u003d sc.nextLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d new Deadlines(name, startDateTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    temp.completeTask();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                tasks.add(temp);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String startDateTime \u003d sc.nextLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String endDateTime \u003d sc.nextLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d new Events(name, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    temp.completeTask();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                tasks.add(temp);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            sc.nextLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 121
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Task class to store task information"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Task constructor to initialize a task object with the name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.startDateTime \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.endDateTime \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Task constructor to initialize a task object with the name and time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Task(String name, String startDateTime, String endDateTime) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] startArray \u003d startDateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] endArray \u003d endDateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (endDateTime !\u003d \"\") {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (startArray.length \u003d\u003d 2 || endArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                this.startDateTime \u003d LocalDateTime.of(parseDate(startArray[0]), parseTime(startArray[1]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                this.endDateTime \u003d LocalDateTime.of(parseDate(endArray[0]), parseTime(endArray[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please key in a valid date and time\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (startArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                this.startDateTime \u003d LocalDateTime.of(parseDate(startArray[0]), parseTime(startArray[1]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                this.endDateTime \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please key in a valid date and time\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * completedTask method which marks the task as completed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return the completed task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when task is already completed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task completeTask() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Task is already completed!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseDate method which takes in a date in string form and converts it to a LocalDate object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param dateString date in string format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalDate"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when input cannot be processed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalDate parseDate(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dateString \u003d dateString.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] dateArray \u003d dateString.split(\"[/]|[.]|[-]\", 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (dateArray.length !\u003d 3) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in a valid date!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int day \u003d Integer.parseInt(dateArray[0]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int month \u003d Integer.parseInt(dateArray[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int year \u003d Integer.parseInt(dateArray[2]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (year \u003c 100) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in a valid 4 digit year!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in a valid date!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseTime method which takes in a time in string form and converts it to a LocalTime object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param timeString time in string format"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalTime"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when input cannot be processed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalTime parseTime (String timeString) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (timeString.contains(\"PM\") || timeString.contains(\"pm\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return parsePm(timeString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (timeString.contains(\"AM\") || timeString.contains(\"am\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return parseAm(timeString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            timeString \u003d timeString.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int hour \u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int minute \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] timeArray \u003d timeString.split(\"[:]|[.]|[-]\", 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (timeArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d Integer.parseInt(timeString.substring(0, 2));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                minute \u003d Integer.parseInt(timeString.substring(2));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d Integer.parseInt(timeArray[0]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                minute \u003d Integer.parseInt(timeArray[1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (hour \u003d\u003d 24) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d 12;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (DateTimeException | NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in a valid time!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseAm, method which takes in a time in AM string form and converts it to a LocalTime object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param timeString time in AM string format"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalTime"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when input cannot be processed"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalTime parseAm (String timeString) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int hour \u003d 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int minute \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            timeString \u003d timeString.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            timeString \u003d timeString.substring(0, timeString.length() - 2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] timeArray \u003d timeString.split(\"[:]|[.]|[-]\", 2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (timeArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d Integer.parseInt(timeArray[0]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                minute \u003d Integer.parseInt(timeArray[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d Integer.parseInt(timeArray[0]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (hour \u003d\u003d 24) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d 12;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (DateTimeException | NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in a valid time!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parsePm method which takes in a time in PM string form and converts it to a LocalTime object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param timeString time in PM string format"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalTime"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when input cannot be processed"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalTime parsePm (String timeString) throws DukeException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int hour \u003d 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int minute \u003d 0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            timeString \u003d timeString.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            timeString \u003d timeString.substring(0, timeString.length() - 2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] timeArray \u003d timeString.split(\"[:]|[.]|[-]\", 2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (timeArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d Integer.parseInt(timeArray[0]) + 12;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                minute \u003d Integer.parseInt(timeArray[1]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d Integer.parseInt(timeArray[0]) + 12;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (hour \u003d\u003d 24) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                hour \u003d 12;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (DateTimeException | NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in a valid time!\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * printDateTime method which takes in the date and time and converts it to String"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns String of date and time"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String printDateTime() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDateTime \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDate \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return formatDateTime.format(startDateTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (startDateTime.toLocalDate().isEqual(endDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return formatDate.format(startDateTime) + \" \" + startDateTime.toLocalTime() + \"-\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        + endDateTime.toLocalTime();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return formatDateTime.format(startDateTime) + \" to \" + formatDateTime.format(endDateTime);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String getStartDateTime() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDateTime \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return formatDateTime.format(startDateTime);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDateTime \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return formatDateTime.format(endDateTime);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * snoozeTask method which takes a number of hours and returns a new task that\u0027s snoozed by that number of hours"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return Task with new time"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when user tries to snooze a todo"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task snoozeTask(int num) throws DukeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Todo does not have any date time information!\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            startDateTime \u003d startDateTime.plusHours(num);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            startDateTime \u003d startDateTime.plusHours(num);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            endDateTime \u003d endDateTime.plusHours(num);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * rescheduleTask method which takes a new Date and Time"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return Task with new date and time"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when user tries to reschedule a todo or when input is incorrect"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task rescheduleTask(String newDateTime) throws DukeException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String name \u003d this.name;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Todo does not have any date time information!\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return new Deadlines(name, newDateTime);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] dateTimeArray \u003d newDateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (dateTimeArray.length \u003c 2) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please specify a date and time range! \\nEg. 25/12/2020 10pm - 11pm\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] timeArray \u003d dateTimeArray[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (timeArray.length \u003c 2) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please use - to specify the time range! \\nEg. 10pm - 11pm\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String date \u003d dateTimeArray[0];"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String startTime \u003d timeArray[0];"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String endTime \u003d timeArray[1];"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String startDateTime \u003d date + \" \" + startTime;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String endDateTime \u003d date + \" \" + endTime;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (dateTimeArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"You need to specify a time!\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return new Events(name, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 274
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The TaskList class to handle task list functions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * TaskList constructor to initialize a TaskList object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param tasks list of tasks from the load file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * addTodo method which takes in the user input and adds a ToDo to the list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param specifications user specifications of what he wants to add"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when there is an error with the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task addTodo(String specifications) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Task newTask \u003d new ToDo(specifications);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * addDeadline method which takes in the user input and adds a Deadlines to the list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param specifications user specifications of what he wants to add"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when there is an error with the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task addDeadline(String specifications) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] specificationsArray \u003d specifications.split(\"/by \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (specificationsArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"You need to specify a date and time!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Task newTask \u003d new Deadlines(specificationsArray[0], specificationsArray[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * addEvent method which takes in the user input and adds a Events to the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param specifications user specifications of what he wants to add"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when there is an error with the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task addEvent(String specifications) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (!specifications.contains(\"/at\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Please use /at to specify a date and time!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] specificationsArray \u003d specifications.split(\"/at \", 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] dateTimeArray \u003d specificationsArray[1].split(\" \", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] timeArray \u003d dateTimeArray[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String date \u003d dateTimeArray[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String startTime \u003d timeArray[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String endTime \u003d timeArray[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String startDateTime \u003d date + \" \" + startTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String endDateTime \u003d date + \" \" + endTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task newTask \u003d new Events(specificationsArray[0], startDateTime, endDateTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please specify a date and time range! \\nEg. /at 18/10/2020 10pm - 11pm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * delete method which takes in the user input and deletes the appropriate task from the list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param num user input where the user specifies what he wants to delete"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the task deleted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when there is an error with the user input"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task delete(String num) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (num.equals(\"all\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                deleteAll();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                int intNum \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d tasks.get(intNum - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                tasks.remove(intNum - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return temp;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in an index!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IndexOutOfBoundsException r) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"The task does not exist\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * done method which sets a task as done"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param numString the integer of the task which the user wants to set as done"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the completed task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when input is incorrect"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task done(String numString) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int num \u003d Integer.parseInt(numString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return tasks.set(num - 1, tasks.get(num - 1).completeTask());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"The task does not exist!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in an index!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * getList method which returns the list of tasks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the list of tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * countList method which returns the number of tasks in the list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the number of tasks in the list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public int countList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteAll method which deletes all tasks in the list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * findWord method that goes through all the tasks in the list and returns a new list of tasks that contain the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * word specified by the user"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param word word user wants to find"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns a new list of tasks that contain specifed word"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when input is no tasks are found"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e findWord(String word) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assert !word.isBlank();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        List\u003cTask\u003e findArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        outer:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        for (Task x: tasks) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] nameArray \u003d x.getName().split(\" \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            inner:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            for (String y: nameArray) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (word.equals(y)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    findArray.add(x);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    continue outer;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            findArray.add(null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Sorry I can\u0027t find any tasks containing that word!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return findArray;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * snoozeTask method which takes a String containing an index and a number of hours"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return Task with new time"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when user input is unable to be processed"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task snoozeTask(String specifications) throws DukeException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] indexAndHour \u003d specifications.split(\" \", 2);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (indexAndHour.length \u003c 2) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please specify the index of task and number of hours to snooze!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int intNum \u003d Integer.parseInt(indexAndHour[0]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int intHours \u003d Integer.parseInt(indexAndHour[1]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task temp \u003d tasks.get(intNum - 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            temp.snoozeTask(intHours);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            tasks.set(intNum - 1, temp);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please specify the index of task and number of hours to snooze!\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Task does not exist!\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * rescheduleTask method which takes a String containing an index and a date and time"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return Task with new date and time"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when user input is unable to be processed"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task rescheduleTask(String index, String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int intNum \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task temp \u003d tasks.get(intNum - 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            temp \u003d temp.rescheduleTask(dateTime);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            tasks.set(intNum - 1, temp);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please specify the index of task and number of hours to snooze!\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Task does not exist!\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 214
    }
  },
  {
    "path": "src/main/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddToDo() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addTodo(\"eat\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddDeadline() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addDeadline(\"assignment /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddEvent() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addEvent(\"sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void delete() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addEvent(\"sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addDeadline(\"assignment /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.delete(\"delete 1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll() throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addEvent(\"sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addDeadline(\"assignment /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.addTodo(\"eat\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.delete(\"delete all\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 58
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The todo class to store todo information"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * ToDo constructor to initialize a ToDo object with the name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of ToDo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    ToDo(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * toString method which converts the object to a String"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.getDone()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[T]\" + \"[\\u2714] \" + super.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[T]\" + \"[\\u2718] \" + super.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 32
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The JavafxUi class to handle user interface methods for the javajx interface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Ui constructor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * addTask method which returns the task information"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String helpString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String help \u003d \"Welcome to duke!\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"These are the list of commands and [ ] indicates user input while { } indicates variables\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [todo {name}] to add a new todo\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [deadline {name} /by {dd/mm/yyyy HHmm}] to add a new deadline\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [event {name} /at {dd/mm/yyy HHmm-HHmm}] to add a new event\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [delete {index}] to delete a task at the index specified\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [delete all] to delete all tasks\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [done {index}] to mark a task as done\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [list] to view all tasks in the list\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [find {word}] to find task that contains a certain word\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [snooze {index} {hours}] to push back a deadline or event by a number of hours\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [reschedule {index} {time}] to reschedule a deadline\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [reschedule {index} {time}-{time}] to reschedule a event\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [help] to print list of commands\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + \"- [bye] to exit the application\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return help;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * addTask method which returns the task information"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"added: \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteTask method which returns the task information"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String deleteTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return deleteAll();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"Noted. I\u0027ve removed this task: \" + \"\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * doneTask method which returns the task information"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String doneTask(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * listCount method which returns the number of tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String listCount(int count) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Now you have \" + count + \" tasks in the list. \\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * bye method which returns a message when the user exits"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Bye. Hope to see you again soon! \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteAll method which returns a message when the user deletes all tasks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String deleteAll() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"All tasks have been deleted!\" + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * printList method which returns all the tasks in the list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String printList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        for (Task x: tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (x !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                output +\u003d index + \". \" + x.toString() + \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * foundWord method which returns all the tasks in the list that contain the word"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param tasks list of tasks in the list that contain the word"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String foundWord(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            + printList(tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * rescheduledTask method which returns string when a task time has been changed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String rescheduledTask(Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"The following task has been rescheduled to:\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + task.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 123
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"380.0\" spacing\u003d\"5.0\" style\u003d\"-fx-background-color: FFE2FE; -fx-border-color: #000000; -fx-border-width: 2;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"5.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            \u003cFont name\u003d\"Helvetica-Light\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"558.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: FFC7FD;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"556.0\" prefWidth\u003d\"388.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: FFC7FD;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "todo CS2103"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "deadline ip /by 27/08/2020 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "event tutorial /at 28/08/2020 1600-1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "delete all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 4,
      "-": 19
    }
  }
]
