[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "T,0,stuff"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Main class for the Duke programme.."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final DukeList taskList \u003d new DukeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputStream input stream to read user inputs from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Duke(InputStream inputStream) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.ui \u003d new Ui(inputStream);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Determine if programme should quit given the input message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param msgInput Message input from user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return if programme should quit."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static Boolean shouldQuit(String msgInput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final String QUIT_STRING \u003d \"bye\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return msgInput.equals(QUIT_STRING);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Marks an item as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputTextArr String array of the input text, split by \" \"."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return statusMSg to be printed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IndexOutOfBoundsException Invalid index given or input text array is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private String markAsDone(String[] inputTextArr) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            int index \u003d Integer.parseInt(inputTextArr[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String statusMsg \u003d this.taskList.markAsDone(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return statusMsg;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // forwards ArrayIndexOutOfBoundsException from Integer.parseInt()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // inputTextArr is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Invalid inputTextArr.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // exception thrown from DukeList.markAsDone()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // index given in input text is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Invalid index given.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Deletes an item from the taskList."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputTextArr String array of the input text, split by \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return statusMsg to be printed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IndexOutOfBoundsException Invalid index given or input text array is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private String delete(String[] inputTextArr) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            int index \u003d Integer.parseInt(inputTextArr[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String statusMsg \u003d this.taskList.delete(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return statusMsg;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // forwards ArrayIndexOutOfBoundsException from Integer.parseInt()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // inputTextArr is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Invalid inputTextArr.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // exception thrown from DukeList.delete()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // index given in input text is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Invalid index given.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Logic framework of Duke."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private void dukeLogic() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        boolean shouldQuit \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String msgInput;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] msgArr;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Command keyword;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        while (!shouldQuit \u0026\u0026 this.ui.hasNextLine()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            msgInput \u003d this.ui.nextLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            msgArr \u003d Parser.parseLineToArray(msgInput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            keyword \u003d Parser.getCommand(msgInput);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            switch (keyword) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case TERMINATE:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                shouldQuit \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case INVALID:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                this.ui.printErrorMessage(String.format(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what `%s` means :-(\", msgArr[0]));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String taskListString \u003d this.taskList.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                this.ui.printMessage(taskListString);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    String statusMsg \u003d this.markAsDone(msgArr);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printMessage(statusMsg);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printEmptyIndexErrorMsg(keyword.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printInvalidIndexErrorMsg();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    String statusMsg \u003d this.delete(msgArr);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printMessage(statusMsg);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printEmptyIndexErrorMsg(keyword.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printInvalidIndexErrorMsg();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case TASK:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    String statusString \u003d this.taskList.add(msgInput);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printMessage(statusString);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    this.ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Starts the Duke programme logic."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Ui.printStartMessage();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.taskList.loadFromFile();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dukeLogic();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.ui.printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.taskList.writeToFile();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Programme entry point."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param args default argument array."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        new Duke().start();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 189,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeInvalidDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeNoDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeNoDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * DukeList class for Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Stores tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final int CAPACITY \u003d 100;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final Storage store \u003d new Storage(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(CAPACITY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Overrides default capacity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param capacity list capacity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeList(int capacity) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(capacity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Helper function for adding item."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param descriptionString String to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Task added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DukeInvalidDescriptionException invalid description."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DukeInvalidCommandException     invalid command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private Task addHelper(String descriptionString) throws DukeInvalidDescriptionException, DukeInvalidCommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] strArr \u003d Parser.parseLineToArray(descriptionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        TaskType taskType \u003d Parser.getTaskKeyword(descriptionString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String formattedDescriptionString;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                formattedDescriptionString \u003d Parser.getItemSubstring(strArr);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                newTask \u003d new Todo(formattedDescriptionString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (DukeNoDescriptionException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of a `%s` cannot be empty.\", taskType));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                formattedDescriptionString \u003d Parser.getItemSubstring(strArr);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                newTask \u003d new Deadline(formattedDescriptionString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (DukeNoDescriptionException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of a `%s` cannot be empty.\", taskType));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (DukeNoDateException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of `%s` is invalid.\", taskType));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                formattedDescriptionString \u003d Parser.getItemSubstring(strArr);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                newTask \u003d new Event(formattedDescriptionString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (DukeNoDescriptionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of a `%s` cannot be empty.\", taskType));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            } catch (DukeNoDateException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of `%s` is invalid.\", taskType));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String invalidCommand \u003d strArr[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DukeInvalidCommandException(String.format(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what `%s` means :-(\", invalidCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Adds a new item to the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param descriptionString String to be added."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Status string to be printed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DukeException Duke exception."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String add(String descriptionString) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task newTask \u003d addHelper(descriptionString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"\\t%s\\n\", newTask.toString()) +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"%s\", this.getListStats());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Adds a new item to the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * This method is only accessed privately."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param descriptionString Description string of task to be added."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param isDone            If task is done already."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DukeInvalidDescriptionException invalid description text."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DukeInvalidCommandException     invalid command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private void add(String descriptionString, boolean isDone) throws DukeInvalidDescriptionException, DukeInvalidCommandException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task newTask \u003d addHelper(descriptionString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            newTask.markAsDone();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Marks an item as done."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param index Index of item to be marked as done."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *              !This index is the printed index, not the actual index in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Status string to be printed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws NullPointerException invalid index."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String markAsDone(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task targetTask \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        targetTask.markAsDone();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n\\t%s\", targetTask.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Deletes an item from the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param index Index of ite to be deleted."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *              ! This index is the printed index, not the actual index in the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Status string to be printed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IndexOutOfBoundsException invalid index."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task removedTask \u003d this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"\\t%s\\n\", removedTask.toString())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                + String.format(\"%s\", this.getListStats());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Writes tasks to file."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void writeToFile() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        for (Task t : this.taskList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            this.store.addToFileBuffer(t);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.store.writeToFile();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Adds items that are read from file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void loadFromFile() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[][] parsedLines \u003d this.store.readFromFile();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        for (String[] parsedLine : parsedLines) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String descriptionString \u003d parsedLine[0];"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String isDoneString \u003d parsedLine[1];"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            this.add(descriptionString, isDoneString.equals(\"1\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets the string to display the stats of the list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return stats string."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private String getListStats() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"Now you have %d tasks in the list.\", this.taskList.size());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return \"List is currently empty!\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            StringBuilder outputString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            outputString.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String currTaskStr \u003d String.format(\"%d: %s\", i + 1, this.taskList.get(i).toString());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                outputString.append(currTaskStr);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                // add new line and tab only if not at the end of the list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                if (i \u003c taskList.size() - 1) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    outputString.append(\"\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return outputString.toString();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 230
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeInvalidDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeNoDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Parser for Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Parses user inputStrings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Parse inputString to array by delimiter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputString inputString line."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return parsed string array."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static String[] parseLineToArray(String inputString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return inputString.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Parses line and gets command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputString input line."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static Command getCommand(String inputString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String keyword \u003d parseLineToArray(inputString)[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"list\"):"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Command.LIST;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"delete\"):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Command.DELETE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"done\"):"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Command.DONE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"bye\"):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Command.TERMINATE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"todo\"):"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"event\"):"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"deadline\"):"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Command.TASK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return Command.INVALID;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Parses line and gets task type."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputString input line."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return task type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static TaskType getTaskKeyword(String inputString) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String keyword \u003d parseLineToArray(inputString)[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"todo\"):"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return TaskType.TODO;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"event\"):"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return TaskType.EVENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"deadline\"):"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return TaskType.DEADLINE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return TaskType.INVALID;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Removes the keyword at the start of the string array."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param strArr Array of strings (originally split by spaces)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Substring with the keyword removed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws DukeInvalidDescriptionException invalid description text."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static String getItemSubstring(String[] strArr) throws DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (strArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // string array is of invalid length"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DukeNoDescriptionException(\"String array of unexpected length: expected length \u003e 1\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return String.join(\" \", Arrays.copyOfRange(strArr, 1, strArr.length));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 96
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Storage for Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Reads and stores list in a database file (.txt)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final String DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final static String projectRoot \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final File storageFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private boolean pathExists;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final ArrayList\u003cString\u003e fileBuffer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for Parser."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param pathStrArr path to storage file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Storage(String... pathStrArr) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.path \u003d Paths.get(projectRoot, pathStrArr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.storageFile \u003d new File(this.path.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.pathExists \u003d Files.exists(this.path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.fileBuffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(\"File exists?\" + this.getFileStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets file status string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return file status string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String getFileStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return this.pathExists ? \"exists\" : \"not found\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Checks if file exists."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return if file exists."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public boolean fileExists() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return Files.exists(this.path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Creates file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return is file created successfully."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IOException IOException."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public boolean createFile() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        File storageFile \u003d new File(path.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        boolean isFileCreated \u003d storageFile.createNewFile();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.pathExists \u003d isFileCreated;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return isFileCreated;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Adds task to file buffer."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param task task to be added to file buffer."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void addToFileBuffer(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] storageStrArr \u003d task.toStorageStringArr();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String joinedStorageStr \u003d String.join(DELIMITER, storageStrArr);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.fileBuffer.add(joinedStorageStr);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Writes file buffer to file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void writeToFile() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            if (fileBuffer.size() \u003e 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                if (!fileExists()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    // creates the file if not found"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    boolean isFileCreated \u003d this.createFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                FileWriter fWriter \u003d new FileWriter(storageFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                BufferedWriter writer \u003d new BufferedWriter(fWriter);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                for (String bufferedLine : this.fileBuffer) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    writer.append(bufferedLine).append(\"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // else don\u0027t need to write"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            System.out.println(\"Error writing to file!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Parses line input to an array."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputString input string."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return parsed array, Array[0] \u003d\u003e itemString, Array[1] \u003d\u003e isDone."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static String[] parseLine(String inputString) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] splitStr \u003d inputString.split(DELIMITER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String taskType \u003d splitStr[0];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String status \u003d splitStr[1];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String taskStr \u003d splitStr[2];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        StringBuilder parsedStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"T\"):"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            parsedStringBuilder.append(\"todo \").append(taskStr);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"E\"):"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            parsedStringBuilder.append(\"event \").append(taskStr).append(\" /at \").append(splitStr[3]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        case (\"D\"):"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            parsedStringBuilder.append(\"deadline \").append(taskStr).append(\" /by \").append(splitStr[3]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new String[]{parsedStringBuilder.toString(), status};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Reads file for saved tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return 2D array of saved tasks. Each task is given in an array of size 2."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String[][] readFromFile() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            ArrayList\u003cString[]\u003e parsedLines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(this.storageFile));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String currLine \u003d reader.readLine();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            while (currLine !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                parsedLines.add(parseLine(currLine));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                currLine \u003d reader.readLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return parsedLines.toArray(new String[0][0]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return new String[0][0];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            System.out.println(\"Error reading file!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return new String[0][0];"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 183
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Ui for Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Reads user inputs and prints messages."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for Ui."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Default to System.in as input stream."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for Ui."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param sys input stream."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Ui(InputStream sys) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.sc \u003d new Scanner(sys);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Prints start message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static void printStartMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // System.out.println(Ui.LOGO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Prints separator."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static void printSeparator() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Checks if scanner has next line."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return if scanner has next line."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return sc.hasNextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets next line of text."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return next line of text."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Prints given message string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param msg message to be printed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void printEmptyIndexErrorMsg(String commandStr) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.printErrorMessage(String.format(\"OOPS!!! The index of `%s` cannot be empty.\", commandStr));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void printInvalidIndexErrorMsg() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.printErrorMessage(\"OOPS!!! The index given is invalid.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void printErrorMessage(String errMsg) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.printMessage(errMsg);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 109
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Command enum."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    TERMINATE(\"terminate\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    TASK(\"task\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    INVALID(\"invalid\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final String str;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    Command(String str) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.str \u003d str;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 21
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Duke Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeException."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param errMsg error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeException(String errMsg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Duke Invalid Command Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeInvalidCommandException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidCommandException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeInvalidCommandException."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param errMsg error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidCommandException(String errMsg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Duke Invalid Description Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Thrown when description given is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeInvalidDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeInvalidDescriptionException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidDescriptionException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeInvalidDescriptionException."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param errMsg error message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidDescriptionException(String errMsg) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 27
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Duke No Date Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Thrown when description is missing a date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeNoDateException extends DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeNoDateException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDateException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeNoDateException."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param errMsg error message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDateException(String errMsg) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 27
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Duke No Description Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Thrown when no description is given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeNoDescriptionException extends DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeNoDescriptionException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDescriptionException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for DukeNoDescriptionException."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param errMsg error message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDescriptionException(String errMsg) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 27
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Deadline class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final String DELIMITER \u003d \" /by \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Deadline(String itemString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(Task.getTaskString(itemString, Deadline.DELIMITER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateString \u003d Task.getDateString(itemString, Deadline.DELIMITER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.date \u003d LocalDate.parse(this.dateString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param isDone     whether this task is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Deadline(String itemString, boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(Task.getTaskString(itemString, Deadline.DELIMITER), isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateString \u003d Task.getDateString(itemString, Deadline.DELIMITER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.date \u003d LocalDate.parse(this.dateString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets string array for storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return string array for storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String[] toStorageStringArr() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new String[]{\"D\", this.isDone ? \"1\" : \"0\", this.itemString, this.dateString};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String dateString \u003d Task.formatDateString(this.date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", stateSymbol, this.itemString, dateString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 60
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Event class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final String DELIMITER \u003d \" /at \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Event(String itemString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(Task.getTaskString(itemString, Event.DELIMITER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateString \u003d Task.getDateString(itemString, Event.DELIMITER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.date \u003d LocalDate.parse(this.dateString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param isDone     whether this task is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Event(String itemString, boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(Task.getTaskString(itemString, Event.DELIMITER), isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dateString \u003d Task.getDateString(itemString, Event.DELIMITER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.date \u003d LocalDate.parse(this.dateString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets string array for storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return string array for storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String[] toStorageStringArr() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new String[]{\"E\", this.isDone ? \"1\" : \"0\", this.itemString, this.dateString};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String dateString \u003d Task.formatDateString(this.date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", stateSymbol, this.itemString, dateString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 60
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeInvalidDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeNoDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeNoDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Abstract Task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Child classes: Deadline, Event, Todo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final char DONE \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static final char NOT_DONE \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public final String itemString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String dateString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Task(String itemString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.itemString \u003d itemString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param isDone     whether this task is done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Task(String itemString, boolean isDone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.itemString \u003d itemString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Splits the itemString by the delimiter and returns the task portion."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param taskString Item String."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param delimiter  Delimiter used."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Task portion of the string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static String getTaskString(String taskString, String delimiter) throws DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return taskString.split(delimiter)[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DukeNoDescriptionException(\"Description text not given.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Splits the taskString by the delimiter and returns the Date portion."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param taskString Item String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param delimiter  Delimiter used."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Date portion of the string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static String getDateString(String taskString, String delimiter) throws DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return taskString.split(delimiter)[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DukeNoDateException(\"Date not given in description text.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Formats date string."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param date date object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return formatted date string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public static String formatDateString(LocalDate date) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Marks this item as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets string array for storage."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return string array for storage."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String[] toStorageStringArr() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new String[]{\"Task\", this.isDone ? \"1\" : \"0\", this.itemString};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[%s] %s\", stateSymbol, this.itemString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 116
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * TaskType enum."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    INVALID(\"invalid\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final String taskKeywordStr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    TaskType(String taskKeywordStr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.taskKeywordStr \u003d taskKeywordStr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return this.taskKeywordStr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 25
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " * Todo class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for todo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Todo(String itemString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(itemString);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Constructor for todo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString description string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param isDone     whether this task is done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Todo(String itemString, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(itemString, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets string array for storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return string array for storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String[] toStorageStringArr() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return new String[]{\"T\", this.isDone ? \"1\" : \"0\", this.itemString};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[T][%s] %s\", stateSymbol, this.itemString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 47
    }
  },
  {
    "path": "src/test/java/duke/test/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char DONE \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char NOT_DONE \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     assertEquals(2, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void Deadline_NotDone_toString_printedCorrectly() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"stuff /by 2020-01-01\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d String.format(\"[D][%c] %s (by: %s)\", NOT_DONE, \"stuff\", \"01 Jan 2020\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, testDeadline.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void Deadline_Done_toString_printedCorrectly() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"stuff /by 2020-01-01\", true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d String.format(\"[D][%c] %s (by: %s)\", DONE, \"stuff\", \"01 Jan 2020\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, testDeadline.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 36
    }
  },
  {
    "path": "src/test/java/duke/test/DukeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.exceptions.DukeInvalidDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char DONE \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char NOT_DONE \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void add_correctInput_addedCorrectly() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String actual \u003d testList.add(\"todo stuff\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"\\t[T][%c] %s\\n\", NOT_DONE, \"stuff\") +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"%s\", \"Now you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void add_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DukeInvalidDescriptionException.class, () -\u003e testList.add(\"todo\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void add_emptyDate_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DukeInvalidDescriptionException.class, () -\u003e testList.add(\"deadline stuff\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void add_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e testList.add(\"XXX\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void markAsDone_validIndex_correctlyDeleted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"todo stuff\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"deadline test /by 2020-01-01\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"event another test /at 2020-02-02\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String actual \u003d testList.markAsDone(2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n\\t[D][%c] test (by: 01 Jan 2020)\", DONE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void markAsDone_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"todo stuff\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"deadline test /by 2020-01-01\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"event another test /at 2020-02-02\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testList.markAsDone(4));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void delete_validIndex_correctlyDeleted() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"todo stuff\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"deadline test /by 2020-01-01\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"event another test /at 2020-02-02\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String actual \u003d testList.delete(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d \"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"\\t[T][%c] %s\\n\", NOT_DONE, \"stuff\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                + String.format(\"%s\", \"Now you have 2 tasks in the list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void delete_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        DukeList testList \u003d new DukeList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"todo stuff\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"deadline test /by 2020-01-01\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        testList.add(\"event another test /at 2020-02-02\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e testList.delete(4));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 107
    }
  },
  {
    "path": "src/test/java/duke/test/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char DONE \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char NOT_DONE \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     assertEquals(2, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void Event_NotDone_toString_printedCorrectly() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Event testEvent \u003d new Event(\"stuff /at 2020-01-01\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d String.format(\"[E][%c] %s (at: %s)\", NOT_DONE, \"stuff\", \"01 Jan 2020\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, testEvent.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void Event_Done_toString_printedCorrectly() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Event testEvent \u003d new Event(\"stuff /at 2020-01-01\", true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d String.format(\"[E][%c] %s (at: %s)\", DONE, \"stuff\", \"01 Jan 2020\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, testEvent.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 36
    }
  },
  {
    "path": "src/test/java/duke/test/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void parseLineToArray_validText_correctArray() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String text \u003d \"hello my name is duke\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] actual \u003d Parser.parseLineToArray(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] expected \u003d {\"hello\", \"my\", \"name\", \"is\", \"duke\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertArrayEquals(expected, actual);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void parseLineToArray_emptyText_correctArray() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] actual \u003d Parser.parseLineToArray(text);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] expected \u003d {\"\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertArrayEquals(expected, actual);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void getCommand_validCommand_correctCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String text \u003d \"done 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Command actual \u003d Parser.getCommand(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Command expected \u003d Command.DONE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void getCommand_validTask_correctCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String text \u003d \"todo stuff abc\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Command actual \u003d Parser.getCommand(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Command expected \u003d Command.TASK;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void getCommand_invalidCommand_correctCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String text \u003d \"XXX\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Command actual \u003d Parser.getCommand(text);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Command expected \u003d Command.INVALID;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void getTask_validTask_correctCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String text \u003d \"todo stuff abc\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        TaskType actual \u003d Parser.getTaskKeyword(text);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        TaskType expected \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void getTask_invalidCommand_correctCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String text \u003d \"XXX\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        TaskType actual \u003d Parser.getTaskKeyword(text);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        TaskType expected \u003d TaskType.INVALID;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 77
    }
  },
  {
    "path": "src/test/java/duke/test/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char DONE \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final char NOT_DONE \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    //     assertEquals(2, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void constructor_NotDone_toString_printedCorrectly() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Todo testTodo \u003d new Todo(\"stuff\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d String.format(\"[T][%c] %s\", NOT_DONE, \"stuff\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, testTodo.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void constructor_Done_toString_printedCorrectly() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Todo testTodo \u003d new Todo(\"stuff\", true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String expected \u003d String.format(\"[T][%c] %s\", DONE, \"stuff\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        assertEquals(expected, testTodo.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 36
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "REM !THIS FILE IS IGNORED AS IM USING MACOS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 2,
      "-": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#!/usr/bin/env zsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "# force shell to use UTF-8 format for output"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "export LC_ALL\u003den_US.UTF-8"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 5,
      "-": 36
    }
  }
]
