[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The Duke object initializes the core classes: Ui, Storage, Parser and TaskList, and contains the main logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * that integrates them together to run the Duke application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Duke object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param filePath the filePath where the storage will load from and save data to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList tmpTaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tmpTaskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ui.printWithWrapper(new ArrayList\u003c\u003e(List.of(\"Duke has loaded from a previously saved file!\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tmpTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ui.printWithWrapper(new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    e.getPrettyErrorMsg(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    \"Duke will start from a clean taskList!\")), false, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskList \u003d tmpTaskList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * The main processing method of Duke. It waits for user input, parses, then executes the desired"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                Command cmd \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                cmd.execute(ui, storage, taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                isExit \u003d cmd.isExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                ui.printWithWrapper(new ArrayList\u003c\u003e(List.of(e.getPrettyErrorMsg())), false, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 64,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.SaveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Class that is responsible for parsing raw inputs and translating them to the correct Command or Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Command subclass that correctly represents the user intent."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If input is unexpected or exceptional."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Command parseInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        validateNotEmpty(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] segments \u003d input.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String cmd \u003d segments[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // CHECK FOR NON-TASKS-RELATED COMMANDS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            switch (cmd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"save\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new SaveCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new DoneCommand(Integer.parseInt(segments[1].trim()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(segments[1].trim()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new FindCommand(segments[1].trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                throw new DukeException(\"Aww! The first word of your input is wrong!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Please check your inputs again, ensure words are spaced and numbers\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    + \"(if any) are correct.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] parsedSegments \u003d parseSegments(input, cmd, getTaskBreakPt(cmd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // CHECK FOR TASKS-RELATED COMMANDS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new TodoCommand(parsedSegments[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new DeadlineCommand(parsedSegments[0], parsedSegments[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new EventCommand(parsedSegments[0], parsedSegments[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Aww! The first word of your input is wrong!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses raw data that is loaded from save file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param data The raw data."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The correct Task that corresponds to what the raw data represents."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If data is unexpected or exceptional."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Task parseTaskData(String data) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] segments \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        boolean isDone \u003d segments[1].equals(\"1\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            switch (segments[0]) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d new TodoTask(segments[2], isDone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d new DeadlineTask(segments[2], isDone, LocalDate.parse(segments[3]));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d new EventTask(segments[2], isDone, LocalDate.parse(segments[3]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"supplied data: \" + segments[3] + \" does not conform to yyyy-mm-dd\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static String[] parseSegments(String input, String cmd, String breakPt) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        checkIllegalChar(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int size \u003d 2;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (breakPt.equals(\"\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            size \u003d 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] res \u003d new String[size];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] splitByBP1 \u003d input.split(cmd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (splitByBP1.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(cmd + \" description cannot be empty!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String description \u003d splitByBP1[1].trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(cmd + \" description cannot be empty!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            res[0] \u003d description;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return res;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] splitByBP2 \u003d description.split(breakPt);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!description.contains(breakPt)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(breakPt + \" keyword must be in input for all \" + cmd + \" commands!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (splitByBP2.length \u003c\u003d 1 || splitByBP2[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Content after \" + breakPt + \" should not be empty!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        res[0] \u003d splitByBP2[0].trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        res[1] \u003d splitByBP2[1].trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static void checkIllegalChar(String input) throws DukeException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        char[] illegalChar \u003d {\u0027|\u0027};"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (char c : illegalChar) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (input.indexOf(c) !\u003d -1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                throw new DukeException(\"Illegal Character: \" + c);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static void validateNotEmpty(String input) throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Input cannot be empty!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static String getTaskBreakPt(String taskName) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (taskName) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return \"/by\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return \"/at\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 180
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The class that is responsible for reading and writing raw taskList data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final File f;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Storage object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param filePath The path of the data file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.f \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Retrives The raw data from the data file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of each line of raw data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeIOException If file was not found at the filePath."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e load() throws DukeIOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                res.add(s);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return res;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeIOException(\"PROJ_ROOT/\" + f.getPath() + \" not found!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Writes the raw data into the data file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param data The raw data to be written."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeIOException For exceptional cases where the program is unable to write to the data file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void save(ArrayList\u003cString\u003e data) throws DukeIOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c data.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            sb.append(data.get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (i !\u003d data.size() - 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (f.getParent() !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String parentDir \u003d f.getParent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File dataDir \u003d new File(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                dataDir.mkdir(); // if intellij is slow in displaying data dir, right click -\u003e reload from disk"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String textToPrint \u003d sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            FileWriter fw \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.write(textToPrint);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeIOException(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 82
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The class that is responsible for storing the current state of the list of tasks while Duke is still"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * running."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private ArrayList\u003cTask\u003e taskStore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the TaskList with an empty list when there is no saved data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskStore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the TaskList with the existing data that was loaded from the data file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param data The ArrayList of each line of raw data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If there was a parsing error. This means that the saved data is corrupted in some"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *                       way."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e data) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskStore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String s : data) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(s);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskStore.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new Task to the taskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param newTask The task to be added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskStore.add(newTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Marks an existing task as done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task to be marked as done in the taskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The task that was marked as done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Task markTaskAsDone(int taskNum) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task doneTask \u003d taskStore.get(taskNum - 1).markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskStore.set(taskNum - 1, doneTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes an existing task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task to be deleted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The task that was deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Task delete(int taskNum) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return taskStore.remove(taskNum - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Finds tasks that matches the search keyword."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param keyword The search keyword."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of string representations of tasks that match the keyword."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e find(String keyword) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return mapToRepr(filterTasks(taskStore, task -\u003e task.contains(keyword)), Task::toString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the string representation of each task in the taskList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of string representation of each task in the taskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e getListRepr() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return mapToRepr(taskStore, Task::toString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Translates the taskList to raw data to be stored."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of raw data where each element corresponds to the raw data representation of each"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * task in the taskList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e getData() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return mapToRepr(taskStore, Task::getData);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the number of tasks currently in the taskList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A string that informs the user of the number of tasks currently in the taskList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getListStatus() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int storeSize \u003d taskStore.size();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"There \" + (storeSize \u003e 1 ? \"are \" : \"is \") + \"now \" + storeSize + \" \" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                (storeSize \u003e 1 ? \"tasks \" : \"task \") + \"in your list!\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static ArrayList\u003cString\u003e mapToRepr(ArrayList\u003cTask\u003e taskStore, Function\u003cTask, String\u003e mapper) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return taskStore.stream().map(mapper).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static ArrayList\u003cTask\u003e filterTasks(ArrayList\u003cTask\u003e taskStore, Predicate\u003cTask\u003e pred) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return taskStore.stream().filter(pred).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 119
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The class responsible for the look and feel of the console messages."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final static String ERRORBORDER \u003d \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final static String BORDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final static String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the Ui object with a Scanner object that scans from System.in."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Prints the greeting message when Duke is first launched."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e welcomeTextBlock \u003d new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"Hello, my name is \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \" ____        _        \","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"|  _ \\\\ _   _| | _____ \","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"| | | | | | | |/ / _ \\\\\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"| |_| | |_| |   \u003c  __/\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"|____/ \\\\__,_|_|\\\\_\\\\___|\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"How may I help you?\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        printWithWrapper(welcomeTextBlock, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Prints the exit message when the user exits Duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void printExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        printWithWrapper(new ArrayList\u003c\u003e(List.of(\"Bye bye! Hope to see you again soon!\")), false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Wraps the console message with borders and indentation for better UI."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param toPrint       The List of messages to be printed to the console."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param withNumbering Indicates whether the messages should be numbered when printing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isError       Indicates whether the messages are error messages that requires a different UI."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param \u003cT\u003e           The generic type of the messages to be printed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public \u003cT\u003e void printWithWrapper(ArrayList\u003cT\u003e toPrint, boolean withNumbering, boolean isError) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        printBorder(isError);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c toPrint.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (toPrint.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String prepend \u003d INDENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (withNumbering) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                prepend +\u003d (i + 1) + \". \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            System.out.println(prepend + toPrint.get(i).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        printBorder(isError);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private void printBorder(boolean isError) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        System.out.println((isError ? ERRORBORDER : BORDER));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 84
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to exit Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Saves the current taskList into harddisk and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * prints the exit message before exiting Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) throws DukeIOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // COPIED FROM SAVECOMMAND"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d tasks.getData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        storage.save(data);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e(List.of(\"Saved successfully!\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(toPrint, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 39
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * An interface that models a basic Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Contains the logic required to execute the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    void execute(Ui ui, Storage storage, TaskList tasks) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks whether command indicates an intent to exit Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Whether the Command signals an intent to exit Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    default boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the command to add a new DeadlineTask."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a DeadlineCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the DeadlineTask."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param deadline    The deadline of the DeadlineTask."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineCommand(String description, String deadline) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new DeadlineTask to the taskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If deadline format is wrong."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(description, deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tasks.add(deadlineTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"Sure! I have added the following deadline task to your list: \","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                deadlineTask.toString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                tasks.getListStatus())), false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to delete existing Tasks from taskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes DeleteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task in the taskList to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes the task at the specified taskNum in the taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task delTask \u003d tasks.delete(taskNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"OK! I have deleted the following task for your list:\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                delTask.toString(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                tasks.getListStatus())), false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to mark a specific Task as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a DoneCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task in the taskList to be marked as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Marks the Task at the specified taskNum as Done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task doneTask \u003d tasks.markTaskAsDone(taskNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"OK! I have marked the following task as done:\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                doneTask.toString())), false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 41
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to add a new EventTask."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String timePeriod;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the EventCommand that will add a new EventTask."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the EventTask."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param timePeriod  The timePeriod when the EventTask will occur."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventCommand(String description, String timePeriod) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.timePeriod \u003d timePeriod;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new EventTask to the taskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If timePeriod format is wrong."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task eventTask \u003d new EventTask(description, timePeriod);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tasks.add(eventTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"Sure! I have added the following event task to your list: \","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                eventTask.toString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                tasks.getListStatus())), false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to find tasks that matches a provided keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a FindCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param keyword The search keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Finds the list of tasks that matches the keyword, then prints it to the console."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e findTasksRepr \u003d tasks.find(keyword);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(findTasksRepr, true, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to list all tasks in the taskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Prints a representation of the taskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e tasksListRepr \u003d tasks.getListRepr();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(tasksListRepr, true, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 26
    }
  },
  {
    "path": "src/main/java/duke/command/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The Command that saves the current taskList data to the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class SaveCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Saves the file to the data file as specified in the storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeIOException If there was an IOException when saving the data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) throws DukeIOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d tasks.getData();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        storage.save(data);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e(List.of(\"Saved successfully!\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(toPrint, false, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 31
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to add a new TodoTask."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a TodoCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the TodoTask."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new TodoTask."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param ui      The ui of Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task todoTask \u003d new TodoTask(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tasks.add(todoTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ui.printWithWrapper(new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                \"Sure! I have added the following todo task to your list: \","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                todoTask.toString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                tasks.getListStatus())), false, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 44
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents an Exception that occurred while running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes DukeException with an error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param msg The error message describing the error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Formats the error message to be more readable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A readable error string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getPrettyErrorMsg() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[ERROR]: \" + getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents an IOException while running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeIOException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DukeIOException(String msg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getPrettyErrorMsg() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[IO ERROR]: \" + getMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 16
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents a DeadlineTask that has to be done by a certain datetime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final LocalDate deadline; // YYYY-MM-DD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a new DeadlineTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the DeadlineTask."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param deadline    The deadline of the DeadlineTask. It should be in the form YYYY-MM-DD."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If the deadline format is wrong."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineTask(String description, String deadline) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            this.deadline \u003d LocalDate.parse(deadline);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Date format should be YYYY-MM-DD\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Fully initializes a DeadlineTask."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the DeadlineTask."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isDone      Indicates whether the DeadlineTask has been done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param deadline    The deadline in LocalDate format of the DeadlineTask."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineTask(String description, boolean isDone, LocalDate deadline) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineTask markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new DeadlineTask(description, true, deadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"D|\" + super.getData() + \"|\" + deadline.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 59
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents an Event Task at a specific timePeriod."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final LocalDate timePeriod; // YYYY-MM-DD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a new EventTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the EventTask."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param timePeriod  The timePeriod when the Event will occur. It should be in YYYY-MM-DD form."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If the date format in timePeriod is wrong."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventTask(String description, String timePeriod) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            this.timePeriod \u003d LocalDate.parse(timePeriod);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Date format should be YYYY-MM-DD\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Fully initialize an EventTask."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the EventTask."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isDone      Indicates whether the EventTask has been done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param timePeriod  The timePeriod in LocalDate form when the EventTask will occur."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventTask(String description, boolean isDone, LocalDate timePeriod) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.timePeriod \u003d timePeriod;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventTask markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new EventTask(description, true, timePeriod);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"E|\" + super.getData() + \"|\" + timePeriod.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + timePeriod"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * An abstract class that represents a basic Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Task object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the raw data representation of the Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The raw data representation of the Task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \"|\" + description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Mark the Task as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Task after it is marked as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public abstract Task markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks whether task description contains a certain keyword."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param keyword The search keyword."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Boolean value indicating whether task description contains a certain keyword."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return description.contains(keyword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 60
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents a TodoTask that is not constrained by datetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a TodoTask."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the TodoTask."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Fully initialize a TodoTask."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the TodoTask."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isDone      Indicates whether the TodoTask has been done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoTask(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoTask markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new TodoTask(description, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"T|\" + super.getData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 41
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.SaveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_byeInput_correctCmd() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"bye\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_saveInput_correctCmd() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"save\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof SaveCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_listInput_correctCmd() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_doneInputCorrect_correctCmd() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"done 1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_doneInputWrong_throwDukeException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"done abc\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    \"Please check your inputs again, ensure words are spaced and numbers(if any) are correct.\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deleteInputCorrect_correctCmd() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"delete 1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deleteInputWrong_throwDukeException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"delete abc\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    \"Please check your inputs again, ensure words are spaced and numbers(if any) are correct.\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_findInputCorrect_correctCmd() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"find a\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof FindCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_findInputWrong_throwDukeException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"find \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    \"Please check your inputs again, ensure words are spaced and numbers(if any) are correct.\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_todoInput_correctCmd() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"todo test\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof TodoCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deadlineInput_correctCmd() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"deadline test /by 2020-08-22\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_eventInput_correctCmd() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"event test /at 2020-08-22\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof EventCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_emptyInput_throwDukeException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Input cannot be empty!\", e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_taskInputEmptyDescription_throwDukeException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"todo\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"todo description cannot be empty!\", e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deadlineInputNoBreakPt_throwDukeException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"deadline test 2020-08-22\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"/by keyword must be in input for all deadline commands!\", e.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_eventInputNoBreakPt_throwDukeException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"event test 2020-08-22\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"/at keyword must be in input for all event commands!\", e.getMessage());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_inputWithIllegalChar_throwDukeException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"event test| 2020-08-22\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Illegal Character: |\", e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_todoCorrect_correctOutput() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"T|1|test\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[T][\\u2713] test\", t.toString());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_deadlineCorrect_correctOutput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"D|0|test|2020-08-22\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[D][\\u2718] test (by: Aug 22 2020)\", t.toString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_deadlineWrong_throwDukeException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"D|0|test|2020-8-22\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"supplied data: 2020-8-22 does not conform to yyyy-mm-dd\", e.getMessage());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_eventCorrect_correctOutput() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"E|0|test|2020-08-22\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[E][\\u2718] test (at: Aug 22 2020)\", t.toString());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_eventWrong_throwDukeException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"E|0|test|2020-8-22\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"supplied data: 2020-8-22 does not conform to yyyy-mm-dd\", e.getMessage());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 249
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void load_noFile_throwDukeException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Storage storage \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            storage.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"PROJ_ROOT/data/storageTest.txt not found!\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void load_fileExists_correctOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File f \u003d new File(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File parent \u003d new File(f.getParent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            parent.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            FileWriter fw \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.write(\"test\\ntest1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Storage storage \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ArrayList\u003cString\u003e content \u003d storage.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(2, content.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", content.get(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test1\", content.get(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            f.delete();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            parent.delete();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void save_data_wroteDataToFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Storage storage \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ArrayList\u003cString\u003e testList \u003d new ArrayList\u003c\u003e(List.of(\"test\", \"test1\", \"test2\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            storage.save(testList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File f \u003d new File(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                assertEquals(testList.get(i), sc.nextLine());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            f.delete();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            new File(f.getParent()).delete();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 73
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void add_task_correctOutput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", taskList.getListRepr().get(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void markTaskAsDone_taskNum_correctOutput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        t \u003d taskList.markTaskAsDone(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2713] test\", taskList.getListRepr().get(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2713] test\", t.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void delete_taskNum_correctOutput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(1, taskList.getListRepr().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        t \u003d taskList.delete(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(0, taskList.getListRepr().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", t.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void find_existKeyword_correctOutput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t1 \u003d new TodoTask(\"abc\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e res \u003d taskList.find(\"test\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(1, res.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", res.get(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void find_nonExistKeyword_emptyList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t1 \u003d new TodoTask(\"abc\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e res \u003d taskList.find(\"123\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(0, res.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getListRepr_taskList_correctOutput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t1 \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t2 \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t.toString(), taskList.getListRepr().get(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t1.toString(), taskList.getListRepr().get(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t2.toString(), taskList.getListRepr().get(2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getListStatus_taskList_correctOutput() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t1 \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"There is now 1 task in your list!\", taskList.getListStatus());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"There are now 2 tasks in your list!\", taskList.getListStatus());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_taskList_correctOutput() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t1 \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t2 \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t.getData(), taskList.getData().get(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t1.getData(), taskList.getData().get(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t2.getData(), taskList.getData().get(2));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 120
    }
  },
  {
    "path": "src/test/java/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_byeCommand_true() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ByeCommand byeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(byeCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_deadlineCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(deadlineCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_deleteCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(deleteCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_doneCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(doneCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/command/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_eventCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(eventCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_todoCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(findCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_listCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(listCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/command/SaveCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class SaveCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_saveCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        SaveCommand saveCommand \u003d new SaveCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(saveCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 15
    }
  },
  {
    "path": "src/test/java/duke/command/TodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_todoCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoCommand todoCommand \u003d new TodoCommand(\"test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(todoCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/exception/DukeExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getPrettyErrorMsg_dukeException_correctOutput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[ERROR]: test\", e.getPrettyErrorMsg());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 17
    }
  },
  {
    "path": "src/test/java/duke/exception/DukeIOExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeIOExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getPrettyErrorMsg_dukeIOException_correctOutput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeIOException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[IO ERROR]: test\", e.getPrettyErrorMsg());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 17
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void createDeadlineTask_incorrectDateInput_throwDukeException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020/08/22\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Date format should be YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_deadlineTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"D\", str[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"0\", str[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_deadlineTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"D\", str[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"1\", str[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_deadlineTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[D][\\u2718] test (by: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_deadlineTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[D][\\u2713] test (by: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_correctKeyword_true() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(new DeadlineTask(\"test\", \"2020-08-22\").contains(\"test\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_wrongKeyword_false() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(new DeadlineTask(\"test\", \"2020-08-22\").contains(\"wrong\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 91
    }
  },
  {
    "path": "src/test/java/duke/task/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void createEventTask_incorrectDateInput_throwDukeException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020/08/22\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Date format should be YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_eventTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"E\", str[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"0\", str[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_eventTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"E\", str[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"1\", str[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_eventTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[E][\\u2718] test (at: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_eventTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[E][\\u2713] test (at: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_correctKeyword_true() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(new EventTask(\"test\", \"2020-08-22\").contains(\"test\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_wrongKeyword_false() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(new EventTask(\"test\", \"2020-08-22\").contains(\"wrong\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 91
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_todoTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"T\", str[0]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"0\", str[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_todoTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\").markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"T\", str[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"1\", str[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_todoTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String str \u003d task.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_todoTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\").markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String str \u003d task.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2713] test\", str);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_correctKeyword_true() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(new TodoTask(\"test\").contains(\"test\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_wrongKeyword_false() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(new TodoTask(\"test\").contains(\"wrong\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 52
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo     "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo eat strawberry"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo drink something hot"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline feowfke"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline defoekf /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline cs3230 assignment 1 /by this saturday 22 Aug"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline technical interview with ABC /by tuesday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fweofkowekf"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fewf e/at fwofkew"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event john\u0027s birthday /at Friday night"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event school orientation /at 0800 today"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo eat strawberry"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo drink something hot"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline feowfke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline defoekf /by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline cs3230 assignment 1 /by this saturday 22 Aug"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline technical interview with ABC /by tuesday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fweofkowekf"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fewf e/at fwofkew"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event john\u0027s birthday /at Friday night"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event school orientation /at 0800 today"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "-": 36
    }
  }
]
