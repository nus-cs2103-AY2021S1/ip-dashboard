[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"# duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"# Dukenizer Individual Project"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"Dukenizer is a desktop app for managing your tasks and taking notes on a Graphical User Interface (GUI). If you can type fast, Dukenizer can neatly organize your tasks and notes faster than traditional GUI apps."},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"For the detailed documentation of this project, see the [Dukenizer Product Website](https://codychew.github.io/ip/)."},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"## Quick start "},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"1. Ensure that you have Java 11 installed on your computer"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"2. Download the latest `duke.jar` from [here](https://github.com/CodyChew/ip/releases/download/A-Release/duke.jar)."},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your Dukenizer."},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"4. Double-click the file to start the app, or run `java -jar \u003cfolder path\u003e\\duke.jar` in your terminal."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _                    "},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"   |  _ \\ _   _| | _____  ______ ______ ______  ___  _____"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"   | | | | | | | |/ / _ \\|  __  |__  __|___   |/ _ \\|  _  \\"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"   | |_| | |_| |   \u003c  __/| |  | |__||__ /   /_\u003c  __/|     /"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"   |____/ \\__,_|_|\\_\\___|| |  | |______|______|\\___||_|\\__\\ "},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"CodyChew":19,"-":7}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":21,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"# Dukenizer User Guide"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":"   ```"},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"    ____        _                    "},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"   |  _ \\ _   _| | _____  ______ ______ ______  ___  _____"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"   | | | | | | | |/ / _ \\|  __  |__  __|___   |/ _ \\|  _  \\"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"   | |_| | |_| |   \u003c  __/| |  | |__||__ /   /_\u003c  __/|     /"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"   |____/ \\__,_|_|\\_\\___|| |  | |______|______|\\___||_|\\__\\ "},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"   ```"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"Dukenizer is a desktop app for __managing your tasks__ and **taking notes** on a Graphical User Interface (GUI). If you "},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"can type fast, Dukenizer can neatly organize your tasks and notes faster than traditional GUI apps."},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"* [Quick start](#quick-start)"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"* [Features](#features)"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"    * [Command help: `help`](#command-help-help)"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    * [Adding a todo: `todo`](#adding-a-todo-todo)"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    * [Adding a deadline: `deadline`](#adding-a-deadline-deadline)"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    * [Adding an event: `event`](#adding-an-event-event)"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    * [Listing all tasks: `list`](#listing-all-tasks-list)"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    * [Marking a task as done: `done`](#marking-a-task-as-done-done)"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    * [Deleting a task: `delete`](#deleting-a-task-delete)"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    * [Find tasks by description: `find`](#find-tasks-by-description-find)"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    * [Adding a note: `note`](#adding-a-note-note)"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    * [Listing all notes: `notes`](#listing-all-notes-notes)"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    * [Removing a note: `RemoveNote`](#removing-a-note-removenote)"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    * [Exiting the program: `bye`](#exiting-the-program-bye)"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"* [Command summary](#command-summary)"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"## Quick start "},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"1. Ensure that you have Java 11 installed on your computer"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"2. Download the latest `duke.jar` from [here](https://github.com/CodyChew/ip/releases/download/A-Release/duke.jar)."},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your Dukenizer."},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"4. Double-click the file to start the app, or run `java -jar \u003cfolder path\u003e\\duke.jar` in your terminal."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"The GUI similar to the below should appear in a few seconds."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"\u003cbr\u003e![Dukenizer start page](start_page.PNG)"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"5. Type the command in the command box and press Enter to execute it. "},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"e.g. typing `help` and pressing enter will show you all the available commands"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"in Dukenizer."},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"6. Refer to the [Features](#features) below for details of each command."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"\u003e **Notes about the command format:**"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"\u003e - Words in `\u003cArrow brackets\u003e` are the parameters to be supplied by the user."},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"\u003e e.g. in `todo \u003cdescription\u003e`, `\u003cdescription\u003e` is a parameter which can be used as `todo Dukenizer README`."},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"\u003e - Command is case sensitive."},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"\u003e - Date and time must be valid and the format must be followed."},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"### Command help: `help` "},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"Shows the full list of commands in Dukenizer."},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"Format: `help`"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"### Adding a todo: `todo`"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"Adds a To-do task with the given description to Dukenizer."},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"Format: `todo \u003cdescription\u003e`"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"Examples:"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"- `todo math assignment`"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"- `todo buy groceries`"},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"### Adding a deadline: `deadline`"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"Adds a deadline task with the given description and speciied deadline to Dukenizer."},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"Format: `deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd HH:mm\u003e`"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"Examples:"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"- `deadline homework /by 2019-12-01 00:11`"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"\u003cbr\u003e![add_deadline](add_deadline.PNG)"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"### Adding an event: `event`"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"Adds an event with the given description and a specified time to Dukenizer."},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"Format: `event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e`"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"Examples:"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":"- `event birthday party /at 2020-08-22 23:32`"},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":"\u003cbr\u003e![add_event](add_event.PNG)"},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"### Listing all tasks: `list`"},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":"Lists the items in your task list."},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":"Format: `list`"},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"### Marking a task as done: `done`"},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":"Marks the specified task in your task list as done."},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":"Format: `done \u003citem number\u003e`"},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":"- The item number refers to the number shown in the task list."},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":"- The item number is a __positive integer__ starting from 1."},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":"Examples: "},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":"- `list` followed by `done 1` marks the 1st task as done."},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":" "},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":"### Deleting a task: `delete`"},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":"Deletes the specified task from your task list."},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":"Format: `delete \u003citem number\u003e`"},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":"- The item number refers to the number shown in the task list."},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":"- The item number is a __positive integer__ starting from 1."},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":"Example: `list` followed by `delete 2` deletes the 2nd task "},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"in your task list."},{"lineNumber":117,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":118,"author":{"gitId":"CodyChew"},"content":"### Find tasks by description: `find`"},{"lineNumber":119,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":120,"author":{"gitId":"CodyChew"},"content":"Finds tasks whose description contain the given keyword."},{"lineNumber":121,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":122,"author":{"gitId":"CodyChew"},"content":"Format: `find \u003cdescription\u003e`"},{"lineNumber":123,"author":{"gitId":"CodyChew"},"content":"- The search is case-sensitive. e.g. `hi` will not match `Hi`"},{"lineNumber":124,"author":{"gitId":"CodyChew"},"content":"- Only the description is searched."},{"lineNumber":125,"author":{"gitId":"CodyChew"},"content":"- Search term need not be in full words. e.g. `he` will match `hello`"},{"lineNumber":126,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":127,"author":{"gitId":"CodyChew"},"content":"Examples:"},{"lineNumber":128,"author":{"gitId":"CodyChew"},"content":"- find `party` returns `birthday party`"},{"lineNumber":129,"author":{"gitId":"CodyChew"},"content":"\u003cbr\u003e![find](find.PNG)"},{"lineNumber":130,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":131,"author":{"gitId":"CodyChew"},"content":"### Adding a note: `note`"},{"lineNumber":132,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":133,"author":{"gitId":"CodyChew"},"content":"Adds a note with a given description to Dukenizer."},{"lineNumber":134,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":135,"author":{"gitId":"CodyChew"},"content":"Format: `note \u003cdescription\u003e`"},{"lineNumber":136,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":137,"author":{"gitId":"CodyChew"},"content":"Examples:"},{"lineNumber":138,"author":{"gitId":"CodyChew"},"content":"- `note iron man 2 is nice`"},{"lineNumber":139,"author":{"gitId":"CodyChew"},"content":"- `note Bob is 5cm taller than me`"},{"lineNumber":140,"author":{"gitId":"CodyChew"},"content":"\u003cbr\u003e![note](note.PNG)"},{"lineNumber":141,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":142,"author":{"gitId":"CodyChew"},"content":"### Listing all notes: `notes`"},{"lineNumber":143,"author":{"gitId":"CodyChew"},"content":"Lists all the notes in Dukenizer."},{"lineNumber":144,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":145,"author":{"gitId":"CodyChew"},"content":"Format: `notes`"},{"lineNumber":146,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":147,"author":{"gitId":"CodyChew"},"content":"Examples:"},{"lineNumber":148,"author":{"gitId":"CodyChew"},"content":"- `note Bob is 5cm taller` followed by `notes` lists the"},{"lineNumber":149,"author":{"gitId":"CodyChew"},"content":"notes in your note list."},{"lineNumber":150,"author":{"gitId":"CodyChew"},"content":"\u003cbr\u003e![notes](notes.PNG)"},{"lineNumber":151,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":152,"author":{"gitId":"CodyChew"},"content":"### Removing a note: `RemoveNote`"},{"lineNumber":153,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":154,"author":{"gitId":"CodyChew"},"content":"Removes a note at the specified index."},{"lineNumber":155,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":156,"author":{"gitId":"CodyChew"},"content":"Format: `RemoveNote \u003cnote index\u003e`"},{"lineNumber":157,"author":{"gitId":"CodyChew"},"content":"- The note index refers to the number shown in the note list."},{"lineNumber":158,"author":{"gitId":"CodyChew"},"content":"- The note index is a __positive integer__ starting from 1."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"CodyChew"},"content":"Examples:"},{"lineNumber":161,"author":{"gitId":"CodyChew"},"content":"- `notes` followed by `RemoveNote 1` removes the first note in the"},{"lineNumber":162,"author":{"gitId":"CodyChew"},"content":"note list."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"CodyChew"},"content":"### Exiting the program: `bye`"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"CodyChew"},"content":"Exits the Program."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"CodyChew"},"content":"Format: `bye`"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"CodyChew"},"content":"## Command Summary"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"CodyChew"},"content":"Action|Format, Examples"},{"lineNumber":173,"author":{"gitId":"CodyChew"},"content":"---------------------|----------------------------"},{"lineNumber":174,"author":{"gitId":"CodyChew"},"content":"Command Help|`help`"},{"lineNumber":175,"author":{"gitId":"CodyChew"},"content":"Adding a todo| `todo \u003cdescription\u003e` \u003cbr\u003e e.g.,`todo buy groceries`"},{"lineNumber":176,"author":{"gitId":"CodyChew"},"content":"Adding a deadline|`deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd HH:mm\u003e` \u003cbr\u003e e.g.,`deadline homework /by 2019-12-01 00:11`"},{"lineNumber":177,"author":{"gitId":"CodyChew"},"content":"Adding an event| `event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e` \u003cbr\u003e e.g.,`event birthday party /at 2020-08-22 23:32`"},{"lineNumber":178,"author":{"gitId":"CodyChew"},"content":"Listing all tasks|`list`"},{"lineNumber":179,"author":{"gitId":"CodyChew"},"content":"Marking a task as done|`done \u003citem number\u003e`\u003cbr\u003e e.g., `done 1`"},{"lineNumber":180,"author":{"gitId":"CodyChew"},"content":"Deleting a task|`delete \u003citem number\u003e`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":181,"author":{"gitId":"CodyChew"},"content":"Find tasks by description|`find \u003cdescription\u003e`\u003cbr\u003e e.g., `find assignment`"},{"lineNumber":182,"author":{"gitId":"CodyChew"},"content":"Adding a note|`note \u003cdescription\u003e` \u003cbr\u003e e.g.,`note i am taller than Bob`"},{"lineNumber":183,"author":{"gitId":"CodyChew"},"content":"Listing all notes|`notes`"},{"lineNumber":184,"author":{"gitId":"CodyChew"},"content":"Removing a note|`RemoveNote \u003cnote index\u003e`\u003cbr\u003e e.g., `RemoveNote 1`"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"CodyChew":176,"-":10}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" * The Dukenizer program implements a Task Manager application. It performs task manipulations"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":" * based on user commands. It consists of a TaskList object to store your tasks, a Ui object"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":" * to handle user interactions and a Storage object to save and retrieve tasks in a list."},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    private Storage noteStorage;"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    private NoteList notes;"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    private TaskList tasks;"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    private Ui ui;"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    private boolean isExit;"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     * Constructs a Duke object from a specified filePath. If a valid .txt file containing"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"     * a TaskList is found, it will be loaded. Otherwise, a new TaskList object is created"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"     * to store the tasks."},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * @param taskStoragePath Relative filepath for storing task list from project source."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"    public Duke(String taskStoragePath, String noteStoragePath) {"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"        isExit \u003d false;"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"        //initialize User interface"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"        ui \u003d new Ui();"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        //Initialize Storage location"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"        storage \u003d new Storage(taskStoragePath);"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        noteStorage \u003d new Storage(noteStoragePath);"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        //Initialize TaskList"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"            storage.writeToFile(storage.getPath().toString(), \"\");"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"        //Initialize notes"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"            notes \u003d new NoteList(noteStorage.load());"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"        } catch (DukeException e) {"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"            notes \u003d new NoteList();"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"            noteStorage.writeToFile(noteStorage.getPath().toString(), \"\");"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"     * Returns Greeting message to user."},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"     * @return Greeting message."},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"    public String getGreeting() {"},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"        return ui.printGreeting();"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"     * Returns a String response to the user\u0027s input."},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"     * @param input User input."},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"     * @return String response from program."},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"    public String getResponse(String input) {"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"        String output \u003d \"\";"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"        //execute correct command"},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":"            this.isExit \u003d c.isExit();"},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"            output +\u003d c.execute(tasks, notes, ui, storage, noteStorage);"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":"        } catch (DukeException e) {"},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":"            output +\u003d ui.showError(e.getMessage());"},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":"     * Returns the exit status of Dukenizer."},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"     * @return Exit status."},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":"    public boolean getExitStatus() {"},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":"        return this.isExit;"},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"CodyChew":97,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.ui.MainWindow;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    private Duke duke \u003d new Duke(\"DukenizerTaskList.txt\", \"Notes.txt\");"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"}"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":""}],"authorContributionMap":{"CodyChew":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":" * Represents a user command. Consists of an execute method where the command manipulates"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" * the TaskList object, Ui object and Storage object to achieve the desired outcome. Each"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" * Command will extend from this abstract class and have their own execute and isExit method."},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * Returns a String representation of the response to that command."},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * @param tasks TaskList object containing the list of tasks."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     * @param notes NoteList object containing the list of notes."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @param ui Ui object to output messages to the user."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"     * @throws DukeException When user request is invalid for that command."},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    public abstract String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage)"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"            throws DukeException;"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * Returns a boolean indicator for the Command to exit the program."},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     * @return Boolean indicator."},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"    public abstract boolean isExit();"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":36}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to add a new Deadline object to the TaskList"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    private String description;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    private String by;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * Constructs a command to add a deadline task with a String description and a String time."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @param description String description of the Deadline Task Object."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     * @param by          String due time of the Deadline Task Object."},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    public DeadlineCommand(String description, String by) {"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        this.by \u003d by;"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Deadline Task and adds it into the TaskList. The Storage"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * is updated with the latest Task and a relevant String message to notify"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * the user on this addition will be returned."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param tasks   TaskList object containing the list of tasks."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        Task deadline \u003d new Deadline(this.description, this.by);"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        tasks.add(deadline);"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        //print output"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"        String response \u003d ui.printTaskAdded(tasks, deadline);"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        //update storage"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"        taskStorage.saveListToHardDisk(tasks);"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"        return response;"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":65}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to delete an existing object in the TaskList"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    private final String markItem;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * Constructs a command with a String value of the instruction to be further processed."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @param secondArg String argument to specify the Task to delete."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    public DeleteCommand(String secondArg) {"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"        markItem \u003d secondArg;"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"     * Processes the String attribute markItem to make sure that a valid Task number"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     * is given. The Task will be deleted from the TaskList if it is valid. Otherwise a"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * DukeException will be thrown. The Storage is updated with this deletion and a relevant"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * String message to notify the user on this deletion or exception will be returned."},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     * @param tasks   TaskList object containing the list of tasks."},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"     * @throws DukeException If number is not a valid item number in the task list."},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage)"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"            throws DukeException {"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        //checks if second argument of instruction is valid"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"            boolean isAboveZero \u003d (Integer.parseInt(this.markItem) \u003c 1);"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"            boolean isBelowListSize \u003d (Integer.parseInt(this.markItem) \u003e tasks.getSize());"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"            if (isAboveZero || isBelowListSize) {"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(\"Please enter a valid item number from the list! Type \u0027list\u0027 to check\""},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"                        + \" your task list.\");"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"        } catch (NumberFormatException e) { //second argument wrong format"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"            throw new DukeException(\"Please only input \u0027delete \u003citem number\u003e\u0027 with no other inputs!\");"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"        int deleteIndex \u003d Integer.parseInt(this.markItem);"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"        //delete task"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"        Task deletedItem \u003d tasks.delete(deleteIndex);"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"        //print output"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printTaskDeleted(tasks, deletedItem);"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        //update storage"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        taskStorage.saveListToHardDisk(tasks);"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator."},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"}"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":""}],"authorContributionMap":{"CodyChew":81}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to mark an existing object in the TaskList as done"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"    private final String markItem;"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * Constructs a command to mark an object as done."},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * @param secondArg String argument to specify the Task to delete."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    public DoneCommand(String secondArg) {"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"        markItem \u003d secondArg;"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     * Processes the String attribute markItem to make sure that a valid Task number"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"     * is given. The Task will be marked as done from the TaskList if it is valid."},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"     * Otherwise a DukeException will be thrown. The Storage is updated with this deletion"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     * and a relevant String message to notify the user on this deletion or exception will be returned."},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * @param tasks   TaskList object containing the list of tasks."},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     * @throws DukeException If number is not a valid item number in the task list."},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage)"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"            throws DukeException {"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        //check if second argument of instruction is valid"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"            boolean isAboveZero \u003d (Integer.parseInt(this.markItem) \u003c 1);"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"            boolean isBelowListSize \u003d (Integer.parseInt(this.markItem) \u003e tasks.getSize());"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"            if (isAboveZero || isBelowListSize) {"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(\"Please enter a valid item number from the list! Type \u0027list\u0027 to check\""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"                        + \" your task list.\");"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"        } catch (NumberFormatException e) { //second argument wrong format"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"            throw new DukeException(\"Please only input \u0027done \u003citem number\u003e\u0027 with no other inputs!\");"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"        int doneIndex \u003d Integer.parseInt(this.markItem);"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"        tasks.markDone(doneIndex);"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printTaskDone(tasks.getList().get(doneIndex - 1));"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"        //update storage"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        taskStorage.saveListToHardDisk(tasks);"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":76}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to add a new Event object to the TaskList"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"public class EventCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    private String description;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    private String at;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * Constructs a command with a String description and a String time."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @param description String description of the Event Task Object."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     * @param at          String time of the Event Task Object."},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    public EventCommand(String description, String at) {"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        this.at \u003d at;"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Event Task and adds it into the TaskList. The Storage"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * is updated with the latest Task and a relevant String message to notify"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * the user on this addition will be returned."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param tasks   TaskList object containing the list of tasks."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        Task event \u003d new Event(this.description, this.at);"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        tasks.add(event);"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        //print output"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printTaskAdded(tasks, event);"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        //update storage"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"        taskStorage.saveListToHardDisk(tasks);"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":64}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to exit the program."},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"     * Exits the program for the user. Returns a String response."},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"     *  @param tasks   TaskList object containing the list of tasks."},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printExit();"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * Returns true to indicate that the Command exits the program."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"        return true;"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":38}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":" * Represents a command to find items in the task list."},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    private String searchTerm;"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"     * Constructs a command with search term to be used for filtering out matching"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * task descriptions in a specified TaskList."},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * @param searchTerm Search description for tasks."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    public FindCommand(String searchTerm) {"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"        this.searchTerm \u003d searchTerm;"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     * Uses the searchTerm attribute to filter out tasks with descriptions containing the searchTerm. The tasks"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"     * are added into a new TaskList and a string response will be returned."},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     * @param tasks   TaskList object containing the list of tasks."},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        //Initialize new TaskList for matching tasks"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"        TaskList searchTasks \u003d new TaskList();"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"        //loop through to find matching tasks to add to new TaskList"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        tasks.getList().stream()"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"                .filter(task -\u003e task.getDescription().contains(this.searchTerm))"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"                .forEach(searchTasks::add);"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"        //print TaskList of matching tasks"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printMatchingTasks();"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        output +\u003d \"\\n\";"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"        output +\u003d ui.printList(searchTasks);"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"     * @return false indicator"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":64}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to list the tasks in the TaskList."},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"public class HelpCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"        return ui.printHelp();"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":21}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to list the tasks in the TaskList."},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"     * Lists the tasks in the TaskList object."},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"     * @param tasks   TaskList object containing the list of tasks."},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        return ui.printList(tasks);"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":37}},{"path":"src/main/java/duke/command/NoteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.Note;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":" * Represents a command to add a note in the program."},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"public class NoteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"    private String description;"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * Creates a command to add a Note object with a String description."},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     * @param description String description of the Note object."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    public NoteCommand(String description) {"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Note object and adds it into the NoteList. The note storage"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"     * is updated with the latest note and the Ui Object will return a"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"     * relevant string message to notify the user on this addition."},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     * @param tasks TaskList object containing the list of tasks."},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * @param notes NoteList object containing the list of notes."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * @param ui Ui object to output messages to the user."},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"        Note newNote \u003d new Note(this.description);"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        notes.add(newNote);"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        //print output"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printNoteAdded(newNote);"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        //update storage"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        noteStorage.saveNotesToHardDisk(notes);"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":55}},{"path":"src/main/java/duke/command/NotesCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"public class NotesCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"        return ui.printNotes(notes);"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":18}},{"path":"src/main/java/duke/command/RemoveNoteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.note.Note;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"public class RemoveNoteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"    private final String markNote;"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"     * Constructs a command to delete a potential note in the note list."},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * @param secondArg String argument to specify the note to delete."},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    public RemoveNoteCommand(String secondArg) {"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"        markNote \u003d secondArg;"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage)"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"            throws DukeException {"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"        //checks if second argument of instruction is valid"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"            boolean isAboveZero \u003d (Integer.parseInt(this.markNote) \u003c 1);"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"            boolean isBelowListSize \u003d (Integer.parseInt(this.markNote) \u003e notes.getSize());"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"            if (isAboveZero || isBelowListSize) {"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(\"Please enter a valid item number from the note list! Type \u0027notes\u0027 to \""},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"                        + \"see your note list.\");"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"        } catch (NumberFormatException e) { //second argument wrong format"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"            throw new DukeException(\"Please only input \u0027RemoveNote \u003citem number\u003e\u0027 with no other inputs!\");"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        int deleteIndex \u003d Integer.parseInt(this.markNote);"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        //delete task"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"        Note deletedNote \u003d notes.delete(deleteIndex);"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        //print output"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printNoteDeleted(notes, deletedNote);"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"        //update storage"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"        noteStorage.saveNotesToHardDisk(notes);"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator."},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":62}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" * Represents a Command to add a new Todo object to the TaskList"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"public class TodoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    private String description;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     * Creates a command with in a String description to add a Todo task."},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     * @param tsk String description of the Todo Task object."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    public TodoCommand(String tsk) {"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"        this.description \u003d tsk;"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Todo Task and adds it into the TaskList. The Storage"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"     * is updated with the latest Task and the Ui Object will return a"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     * relevant string message to notify the user on this addition."},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * @param tasks   TaskList object containing the list of tasks."},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * @param notes   NoteList object containing the list of notes."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     * @param ui      Ui object to output messages to the user."},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param taskStorage Storage object for storing tasks."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @param noteStorage Storage object for storing notes."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     * @return String response to user."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"    public String execute(TaskList tasks, NoteList notes, Ui ui, Storage taskStorage, Storage noteStorage) {"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"        Task todo \u003d new Todo(this.description);"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        tasks.add(todo);"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        //print output"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        String output \u003d ui.printTaskAdded(tasks, todo);"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        //update storage"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"        taskStorage.saveListToHardDisk(tasks);"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        return output;"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"     * Returns false to indicate that the Command does not exit the program."},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"     * @return Exit program indicator"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"    public boolean isExit() {"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"        return false;"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":61}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":" * Represents all the exceptions that arise from using the Dukenizer task manager."},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"    public DukeException(String s) {"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"        super(s);"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":12}},{"path":"src/main/java/duke/note/Note.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.note;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":" * Represents a Note object where it stores a String description."},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"public class Note {"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"    private String description;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"     * Constructs a note with the given description."},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"     * @param description The description of the note."},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    public Note(String description) {"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    public void overwrite(String description) {"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"     * Returns the String representation of a note."},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     * @return Description of the note."},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"        return this.description;"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":34}},{"path":"src/main/java/duke/note/NoteList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.note;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"public class NoteList {"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"    private static final String ERROR_MESSAGE \u003d \"error loading from file\";"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"    private List\u003cNote\u003e noteList;"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"     * Creates a new TaskList Object."},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    public NoteList() {"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"        noteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * Creates a new TaskList Object from a String source. If the String is valid, a new"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     * TaskList with pre-existing tasks would be constructed. Otherwise, a DukeException will be thrown."},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"     * @param load String to be parsed and converted to list of tasks(TaskList)."},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"     * @throws DukeException when String cannot be successfully parsed."},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    public NoteList(String load) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"        //initialize  list of tasks"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"        noteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"        //nothing to load from storage"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"        if (load.equals(\"\")) {"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"            return;"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"            //loop through load to form task list"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"            String[] notes \u003d load.split(\"\\\\|\");"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"            for (String note : notes) {"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"                Note newNote \u003d new Note(note);"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"                noteList.add(newNote);"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"     * Adds a Note into the NoteList Object."},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"     * @param note Note to be added."},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    public void add(Note note) {"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"        assert note !\u003d null : \"note should be valid\";"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"        this.noteList.add(note);"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"     * Returns size of the note list."},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"     * @return number of notes."},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"    public int getSize() {"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        return this.noteList.size();"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"     * Returns the note at a specified index of the note list."},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"     * @param index index of note."},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"     * @return Note object at index."},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"    public Note get(int index) {"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"        return this.noteList.get(index);"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"     * Returns the string representation of the TaskList."},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"     * @return String representation of the TaskList."},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":"        //initialize String"},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"        String noteList \u003d \"\";"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":"        //get list to loop through tasks"},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":"        List\u003cNote\u003e notes \u003d this.noteList;"},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"        for (int i \u003d 0; i \u003c notes.size(); i++) {"},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":"            Note currentNote \u003d notes.get(i);"},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":"            //append item index"},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":"            noteList +\u003d addIndex(i + 1);"},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":"            //append item"},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":"            noteList +\u003d currentNote.toString();"},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":"            boolean isNotLastNote \u003d i \u003c notes.size() - 1;"},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":"            //append newLine after each task except for last task"},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":"            if (isNotLastNote) {"},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":"                noteList +\u003d \"\\n\";"},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":"        return noteList;"},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":"    private String addIndex(int i) {"},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":"        return String.valueOf(i) + \".\";"},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"CodyChew"},"content":"     * Deletes a Note in the note list at the specified task number."},{"lineNumber":118,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"CodyChew"},"content":"     * @param itemNumber task number in the note list(not index number)"},{"lineNumber":120,"author":{"gitId":"CodyChew"},"content":"     * @return Note that was deleted from the note list."},{"lineNumber":121,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"CodyChew"},"content":"    public Note delete(int itemNumber) {"},{"lineNumber":123,"author":{"gitId":"CodyChew"},"content":"        assert itemNumber \u003e 0 : \"note number should be a valid item number in the note list\";"},{"lineNumber":124,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":125,"author":{"gitId":"CodyChew"},"content":"        Note item \u003d get(itemNumber - 1);"},{"lineNumber":126,"author":{"gitId":"CodyChew"},"content":"        this.noteList.remove(item);"},{"lineNumber":127,"author":{"gitId":"CodyChew"},"content":"        return item;"},{"lineNumber":128,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"CodyChew"},"content":"}"},{"lineNumber":130,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":131,"author":{"gitId":"CodyChew"},"content":""}],"authorContributionMap":{"CodyChew":131}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.command.EventCommand;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.command.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import duke.command.FindCommand;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"import duke.command.HelpCommand;"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"import duke.command.NoteCommand;"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"import duke.command.NotesCommand;"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"import duke.command.RemoveNoteCommand;"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"import duke.command.TodoCommand;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":" * Handles user inputs and make sense out of it."},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_LIST_EXTRA_INPUTS \u003d"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"            \"Extra inputs detected! Please only input \u0027list\u0027.\";"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_EMPTY_TODO \u003d"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"            \"OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_EMPTY_DEADLINE \u003d"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"            \"OOPS!!! The description of a deadline cannot be empty.\";"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_EMPTY_EVENT \u003d"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"            \"OOPS!!! The description of a event cannot be empty.\";"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_NO_ITEM_NUMBER \u003d"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"            \"Please specify item number!\";"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_NO_SEARCH_TERM \u003d"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"            \"Please specify a description to search!\";"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_DEADLINE_FORMAT \u003d"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"            \"Please input in the following format \""},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"            + \"\u0027deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd HH:mm\u003e\u0027 with a valid date \u0026 time\";"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_EVENT_FORMAT \u003d"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"            \"Please input in the following format \""},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"            + \"\u0027event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e\u0027 with a valid date \u0026 time\";"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_INVALID_FORMAT \u003d"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"            \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_EMPTY_NOTE \u003d"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"            \"OOPS!!! The description of a note cannot be empty.\";"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_NOTES_EXTRA_INPUTS \u003d"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"            \"Extra inputs detected! Please only input \u0027notes\u0027 to see your notes!\";"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_EMPTY_REMOVE \u003d"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"            \"OOPS!!! The please enter a note number to remove.\";"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"    private static final String EXCEPTION_HELP_EXTRA_INPUTS \u003d"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"            \"Extra inputs detected! Please only input \u0027help\u0027.\";"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"     * Takes in a line of user input as a String and returns a relevant Command. Otherwise,"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"     * throw a DukeException when a command is invalid."},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"     * @param fullCommand user input"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"     * @return Command to be executed"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"     * @throws DukeException when inputs are invalid or incomplete"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    public static Command parse(String fullCommand) throws DukeException {"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        //remove leading and trailing white spaces"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"        String noWhiteSpace \u003d fullCommand.strip();"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        //get first word of command"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"        String[] instruction \u003d noWhiteSpace.split(\" \", 2);"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"        assert (instruction.length \u003d\u003d 1 | instruction.length \u003d\u003d 2)"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"                : \"instruction array should be of length 1 or 2\";"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"        if (instruction[0].equals(\"bye\")) {"},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"            return new ExitCommand();"},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"list\")) {"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length !\u003d 1) {"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_LIST_EXTRA_INPUTS);"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"            return new ListCommand();"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"todo\")) {"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_EMPTY_TODO);"},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"            return new TodoCommand(instruction[1]);"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"deadline\")) {"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_EMPTY_DEADLINE);"},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"            //check deadline format"},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"            boolean correctDeadlineFormat \u003d (instruction[1].contains(\" /by \"))"},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":"                    \u0026\u0026 (instruction[1].split(\" /by \")[1]"},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":"                    .matches(\"^\\\\d{4}-(0[1-9]|1[012])\\\\-(0[1-9]|[12][0-9]|3[01]) \""},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":"                            + \"([01]?[0-9]|2[0-3]):[0-5][0-9]\"));"},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":"            if (!correctDeadlineFormat) {"},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_DEADLINE_FORMAT);"},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":"            String description \u003d instruction[1].split(\" /by \")[0];"},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":"            String deadlineTime \u003d instruction[1].split(\" /by \")[1];"},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":"            return new DeadlineCommand(description, deadlineTime);"},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"event\")) {"},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_EMPTY_EVENT);"},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":"            //check event format"},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":"            boolean correctEventFormat \u003d (instruction[1].contains(\" /at \"))"},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":"                    \u0026\u0026 (instruction[1].split(\" /at \")[1]"},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":"                    .matches(\"^\\\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]) \""},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":"                            + \"([01]?[0-9]|2[0-3]):[0-5][0-9]\"));"},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":"            if (!correctEventFormat) {"},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_EVENT_FORMAT);"},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":"            String description \u003d instruction[1].split(\" /at \")[0];"},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":"            String eventTime \u003d instruction[1].split(\" /at \")[1];"},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"            return new EventCommand(description, eventTime);"},{"lineNumber":117,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"done\")) {"},{"lineNumber":118,"author":{"gitId":"CodyChew"},"content":"            //done with no other arguments"},{"lineNumber":119,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":120,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_NO_ITEM_NUMBER);"},{"lineNumber":121,"author":{"gitId":"CodyChew"},"content":"            } else if (instruction.length \u003d\u003d 2) { //done with exactly 2 inputs"},{"lineNumber":122,"author":{"gitId":"CodyChew"},"content":"                return new DoneCommand(instruction[1]);"},{"lineNumber":123,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"delete\")) {"},{"lineNumber":125,"author":{"gitId":"CodyChew"},"content":"            //check for other arguments"},{"lineNumber":126,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":127,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_NO_ITEM_NUMBER);"},{"lineNumber":128,"author":{"gitId":"CodyChew"},"content":"            } else if (instruction.length \u003d\u003d 2) { //done with exactly 2 inputs"},{"lineNumber":129,"author":{"gitId":"CodyChew"},"content":"                return new DeleteCommand(instruction[1]);"},{"lineNumber":130,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"find\")) {"},{"lineNumber":132,"author":{"gitId":"CodyChew"},"content":"            //find with no other arguments"},{"lineNumber":133,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":134,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_NO_SEARCH_TERM);"},{"lineNumber":135,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"CodyChew"},"content":"            return new FindCommand(instruction[1]);"},{"lineNumber":137,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"note\")) {"},{"lineNumber":138,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":139,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_EMPTY_NOTE);"},{"lineNumber":140,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"CodyChew"},"content":"            return new NoteCommand(instruction[1]);"},{"lineNumber":142,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"notes\")) {"},{"lineNumber":143,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length !\u003d 1) {"},{"lineNumber":144,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_NOTES_EXTRA_INPUTS);"},{"lineNumber":145,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"CodyChew"},"content":"            return new NotesCommand();"},{"lineNumber":147,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"RemoveNote\")) {"},{"lineNumber":148,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length \u003d\u003d 1) {"},{"lineNumber":149,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_EMPTY_REMOVE);"},{"lineNumber":150,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"CodyChew"},"content":"            return new RemoveNoteCommand(instruction[1]);"},{"lineNumber":152,"author":{"gitId":"CodyChew"},"content":"        } else if (instruction[0].equals(\"help\")) {"},{"lineNumber":153,"author":{"gitId":"CodyChew"},"content":"            if (instruction.length !\u003d 1) {"},{"lineNumber":154,"author":{"gitId":"CodyChew"},"content":"                throw new DukeException(EXCEPTION_HELP_EXTRA_INPUTS);"},{"lineNumber":155,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":156,"author":{"gitId":"CodyChew"},"content":"            return new HelpCommand();"},{"lineNumber":157,"author":{"gitId":"CodyChew"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"CodyChew"},"content":"            throw new DukeException(EXCEPTION_INVALID_FORMAT);"},{"lineNumber":159,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":161,"author":{"gitId":"CodyChew"},"content":"        throw new DukeException(EXCEPTION_INVALID_FORMAT);"},{"lineNumber":162,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":164,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":164}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"import java.util.stream.IntStream;"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":" * The Storage class handles all the operations when reading or writing files from the"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":" * hard disk."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    private static final String PIPE_SEPARATOR \u003d \"|\";"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    private final Path path;"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"     * Takes in a given filePath and saves it for reference."},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * @param filePath file path from user input."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"    public Storage(String filePath) {"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"        path \u003d Paths.get(filePath);"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     * Concatenates each line of the specified file if file is valid and returns"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"     * it as a String value. Otherwise, a DukeException will be thrown if there are"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"     * errors loading the file."},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"     * @return String representation of the specified file."},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"     * @throws DukeException when file is not found."},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"    public String load() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        if (Files.exists((path))) {"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"            // create a File for the given file path"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"            File f \u003d new File(String.valueOf(this.path));"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"                Scanner s \u003d new Scanner(f);"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"                StringBuilder list \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"                while (s.hasNext()) {"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"                    list.append(s.nextLine());"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"                    list.append(PIPE_SEPARATOR);"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"                }"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"                return list.toString();"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"            } catch (FileNotFoundException e) {"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"                e.printStackTrace();"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        throw new DukeException(\"File does not exist\");"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"     * Returns the file path of this Storage object when it is created."},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"     * @return Saved file path."},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"    public Path getPath() {"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"        return this.path;"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"     * Overrides a text file at a specified file path relative to the source."},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"     * @param filePath  Specified file path to write to file."},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"     * @param textToAdd String value to write to file."},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":"    public void writeToFile(String filePath, String textToAdd) {"},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":"            fw.write(textToAdd);"},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":"            fw.close();"},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"            e.printStackTrace();"},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":"     * Saves tasks in the TaskList Object into the hard disk so that it can be retrieved again."},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":"     * @param lst TaskList Object."},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":"    public void saveListToHardDisk(TaskList lst) {"},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":"        String list \u003d IntStream.range(0, lst.getSize())"},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":"                .mapToObj(lst::get)"},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":"                .map(targetTask -\u003e targetTask.getStoreAs() + \"\\n\")"},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":"                .collect(Collectors.joining());"},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":"        writeToFile(this.path.toString(), list);"},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":"     * Saves notes in the NoteList Object into the hard disk so that it can be retrieved again."},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":"     * @param noteList NoteList Object."},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":"    public void saveNotesToHardDisk(NoteList noteList) {"},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":"        String list \u003d IntStream.range(0, noteList.getSize())"},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"                .mapToObj(noteList::get)"},{"lineNumber":117,"author":{"gitId":"CodyChew"},"content":"                .map(note -\u003e note.toString() + \"\\n\")"},{"lineNumber":118,"author":{"gitId":"CodyChew"},"content":"                .collect(Collectors.joining());"},{"lineNumber":119,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":120,"author":{"gitId":"CodyChew"},"content":"        writeToFile(this.path.toString(), list);"},{"lineNumber":121,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":122}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":" * Represents a Deadline Task. It has a description and a due timing attribute."},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE \u003d \"D\";"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE_ICON \u003d \"[D]\";"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    protected LocalDateTime by;"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Deadline Task with a specified description and due time. String time"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * Object has to have proper formatting \"yyyy-MM-dd HH:mm\" as it will be parsed"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     * as a LocalDateTime Object."},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     * @param description Describes the Deadline Task."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @param by          The due timing of the Deadline Task."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(DATE_TIME_INPUT_PATTERN));"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        this.storeAs \u003d storeNotDoneDeadline(description, by);"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * Creates a Deadline Task with a specified done indicator, description and due time."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * String time Object has to have proper formatting \"yyyy-MM-dd HH:mm\" as it will be parsed"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * as a LocalDateTime Object."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param done        Indicates whether the task has been done."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @param description Describes the Deadline Task."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     * @param by          The due timing of the Deadline Task."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"    public Deadline(String done, String description, String by) {"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        super(description);"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"        this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(DATE_TIME_INPUT_PATTERN));"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"        if (done.equals(DONE)) {"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"            this.isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"            this.storeAs \u003d storeDoneDeadline(description, by);"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        this.storeAs \u003d storeNotDoneDeadline(description, by);"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"     * Returns a String representation of the Deadline Task."},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"     * @return representation of the Deadline Task."},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"        return TYPE_ICON + super.toString() + showDeadlineTime();"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"    private String storeDoneDeadline(String description, String by) {"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"        return TYPE + SEPARATOR + DONE + SEPARATOR + description + SEPARATOR + by;"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"    private String storeNotDoneDeadline(String description, String by) {"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        return TYPE + SEPARATOR + NOT_DONE + SEPARATOR + description + SEPARATOR + by;"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"    private String showDeadlineTime() {"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"        return \" (by: \" + by.format(DateTimeFormatter.ofPattern(DATE_TIME_OUTPUT_PATTERN)) + \")\";"},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":69}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":" * Represents an Event Task. It has a description and specified timing attribute."},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE \u003d \"E\";"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE_ICON \u003d \"[E]\";"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    protected LocalDateTime at;"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Event Task with a specified description and time attribute. String time"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"     * Object has to have proper formatting \"yyyy-MM-dd HH:mm\" as it will be parsed"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"     * as a LocalDateTime Object."},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     * @param description Describes the Event."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     * @param at          The specified timing of the Event."},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    public Event(String description, String at) {"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        this.at \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(DATE_TIME_INPUT_PATTERN));"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        this.storeAs \u003d storeNotDoneEvent(description, at);"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Event Task with a specified done indicator, description and time"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * attribute. String time Object has to have proper formatting \"yyyy-MM-dd HH:mm\""},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * as it will be parsed as a LocalDateTime Object."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param done        Indicates whether the task has been done."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @param description Describes the Event."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     * @param at          The specified timing of the Event."},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"    public Event(String done, String description, String at) {"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        super(description);"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"        this.at \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(DATE_TIME_INPUT_PATTERN));"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"        if (done.equals(DONE)) {"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"            this.isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"            this.storeAs \u003d storeDoneEvent(description, at);"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        this.storeAs \u003d storeNotDoneEvent(description, at);"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"     * Returns a String representation of the Event Task."},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"     * @return representation of the Event Task."},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"        return TYPE_ICON + super.toString() + showEventTime();"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    private String storeDoneEvent(String description, String at) {"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"        return TYPE + SEPARATOR + DONE + SEPARATOR + description + SEPARATOR + at;"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"    private String storeNotDoneEvent(String description, String at) {"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        return TYPE + SEPARATOR + NOT_DONE + SEPARATOR + description + SEPARATOR + at;"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"    private String showEventTime() {"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"        return \" (at: \" + at.format(DateTimeFormatter.ofPattern(DATE_TIME_OUTPUT_PATTERN)) + \")\";"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":72}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":" * Represents an Task. It has a description, a done indicator and a String representation"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":" * for storing it in the storage."},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"    protected static final String SEPARATOR \u003d \",\";"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"    protected static final String DONE \u003d \"1\";"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"    protected static final String NOT_DONE \u003d \"0\";"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"    protected static final String TICK_SYMBOL \u003d \"\\u2713\";"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"    protected static final String CROSS_SYMBOL \u003d \"\\u2718\";"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    protected static final String DATE_TIME_INPUT_PATTERN \u003d \"yyyy-MM-dd HH:mm\";"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"    protected static final String DATE_TIME_OUTPUT_PATTERN \u003d \"MMM d yyyy HH:mm\";"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    protected String description;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    protected boolean isDone;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    protected String storeAs;"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"     * Creates a new Task Object with a description."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     * @param description Describes the Task Object."},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    public Task(String description) {"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        this.isDone \u003d false;"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * Returns the done status of the Task."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * @return done status."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"        //return tick or X symbols"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"        return (isDone ? TICK_SYMBOL : CROSS_SYMBOL);"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"     * Marks the Task as done."},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"    public void markAsDone() {"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        this.isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        this.updateDoneForStoreAs();"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"    private void updateDoneForStoreAs() {"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"        String taskType \u003d this.storeAs.substring(0, 2);"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        String taskDescription \u003d this.storeAs.substring(3);"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"        this.storeAs \u003d taskType + DONE + taskDescription;"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"     * Returns the String representation of the Task for storage."},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"     * @return String representation of the Task for storage."},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"    public String getStoreAs() {"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"        return this.storeAs;"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"     * Returns the description of the task."},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"     * @return String description of the Task."},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"    public String getDescription() {"},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"        return this.description;"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"     * Returns the String representation of the task."},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"     * @return String representation of the Task."},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":80}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":" * Stores and represents tasks in the application. All the tasks in the program,"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":" * and its states, are stored in this list."},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE_TODO \u003d \"T\";"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE_DEADLINE \u003d \"D\";"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE_EVENT \u003d \"E\";"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    private static final String ERROR_MESSAGE \u003d \"error loading from file\";"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    private List\u003cTask\u003e lst;"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"     * Creates a new TaskList Object."},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"    public TaskList() {"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"        lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     * Creates a new TaskList Object from a String source. If the String is valid, a new"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"     * TaskList with pre-existing tasks would be constructed. Otherwise, a DukeException will be thrown."},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * @param load String to be parsed and converted to list of tasks(TaskList)."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     * @throws DukeException when String cannot be successfully parsed."},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"    public TaskList(String load) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"        //initialize  list of tasks"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"            //loop through load to form task list"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"            String[] tasks \u003d load.split(\"\\\\|\");"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"            for (String task : tasks) {"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"                String[] instruction \u003d task.split(\",\");"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"                String firstLetter \u003d instruction[0];"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"                if (firstLetter.equals(TYPE_TODO)) {"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"                    Task tsk \u003d new Todo(instruction[1], instruction[2]);"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"                    lst.add(tsk);"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"                } else if (firstLetter.equals(TYPE_DEADLINE)) {"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"                    Task tsk \u003d new Deadline(instruction[1], instruction[2], instruction[3]);"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"                    lst.add(tsk);"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"                } else if (firstLetter.equals(TYPE_EVENT)) {"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"                    Task tsk \u003d new Event(instruction[1], instruction[2], instruction[3]);"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"                    lst.add(tsk);"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"                } else {"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"                    throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        } catch (Exception e) {"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"     * Returns the list of tasks in the program."},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"     * @return list of tasks."},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"        assert this.lst !\u003d null : \"list attribute should be initialized\";"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"        return this.lst;"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"     * Returns the task at a specified index of the list."},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"     * @param index index of task."},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"     * @return Task Object from the list."},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"    public Task get(int index) {"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":"        return this.lst.get(index);"},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"     * Adds a Task into the TaskList Object."},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":"     * @param tsk Task to be added."},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":"    public void add(Task tsk) {"},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"        assert tsk !\u003d null : \"task should be valid\";"},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":"        this.lst.add(tsk);"},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":"     * Returns the string representation of the TaskList."},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":"     * @return String representation of the TaskList."},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":"        //initialize String"},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":"        String taskList \u003d \"\";"},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":"        //get list to loop through tasks"},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":"        List\u003cTask\u003e tasks \u003d this.getList();"},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":"            Task targetTask \u003d tasks.get(i);"},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"            //append item index"},{"lineNumber":117,"author":{"gitId":"CodyChew"},"content":"            taskList +\u003d addIndex(i + 1);"},{"lineNumber":118,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":119,"author":{"gitId":"CodyChew"},"content":"            //append item"},{"lineNumber":120,"author":{"gitId":"CodyChew"},"content":"            taskList +\u003d targetTask.toString();"},{"lineNumber":121,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":122,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":123,"author":{"gitId":"CodyChew"},"content":"            boolean isNotLastTask \u003d i \u003c tasks.size() - 1;"},{"lineNumber":124,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":125,"author":{"gitId":"CodyChew"},"content":"            //append newLine after each task except for last task"},{"lineNumber":126,"author":{"gitId":"CodyChew"},"content":"            if (isNotLastTask) {"},{"lineNumber":127,"author":{"gitId":"CodyChew"},"content":"                taskList +\u003d \"\\n\";"},{"lineNumber":128,"author":{"gitId":"CodyChew"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":131,"author":{"gitId":"CodyChew"},"content":"        return taskList;"},{"lineNumber":132,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":134,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"CodyChew"},"content":"     * Returns size of the task list."},{"lineNumber":136,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"CodyChew"},"content":"     * @return number of lists."},{"lineNumber":138,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"CodyChew"},"content":"    public int getSize() {"},{"lineNumber":140,"author":{"gitId":"CodyChew"},"content":"        return this.getList().size();"},{"lineNumber":141,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":143,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"CodyChew"},"content":"     * Marks an item in the task list as done."},{"lineNumber":145,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"CodyChew"},"content":"     * @param itemNumber task number in the list(not index number)."},{"lineNumber":147,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"CodyChew"},"content":"    public void markDone(int itemNumber) {"},{"lineNumber":149,"author":{"gitId":"CodyChew"},"content":"        assert itemNumber \u003e 0 : \"itemNumber should be a valid item number in the list\";"},{"lineNumber":150,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":151,"author":{"gitId":"CodyChew"},"content":"        Task doneItem \u003d get(itemNumber - 1);"},{"lineNumber":152,"author":{"gitId":"CodyChew"},"content":"        doneItem.markAsDone();"},{"lineNumber":153,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":155,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"CodyChew"},"content":"     * Deletes a Task in the list at the specified task number."},{"lineNumber":157,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"CodyChew"},"content":"     * @param itemNumber task number in the list(not index number)"},{"lineNumber":159,"author":{"gitId":"CodyChew"},"content":"     * @return Task that was deleted from the list."},{"lineNumber":160,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"CodyChew"},"content":"    public Task delete(int itemNumber) {"},{"lineNumber":162,"author":{"gitId":"CodyChew"},"content":"        assert itemNumber \u003e 0 : \"itemNumber should be a valid item number in the list\";"},{"lineNumber":163,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":164,"author":{"gitId":"CodyChew"},"content":"        Task item \u003d get(itemNumber - 1);"},{"lineNumber":165,"author":{"gitId":"CodyChew"},"content":"        this.lst.remove(item);"},{"lineNumber":166,"author":{"gitId":"CodyChew"},"content":"        return item;"},{"lineNumber":167,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":169,"author":{"gitId":"CodyChew"},"content":"    private String addIndex(int i) {"},{"lineNumber":170,"author":{"gitId":"CodyChew"},"content":"        return String.valueOf(i) + \".\";"},{"lineNumber":171,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":173,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":173}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":" * Represents an Todo Task. It has a description attribute."},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE \u003d \"T\";"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"    private static final String TYPE_ICON \u003d \"[T]\";"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"     * Creates a Todo task that has a description."},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"     * @param description Describes the task to be done."},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    public Todo(String description) {"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"        this.storeAs \u003d storeNotDoneTodo(description);"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"     * Creates a Todo Task with a done indicator and a description."},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"     * @param done        Indicates whether the task has been done."},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"     * @param description Describes the task."},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"    public Todo(String done, String description) {"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"        super(description);"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"        if (done.equals(DONE)) {"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"            this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"            this.storeAs \u003d storeDoneTodo(description);"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"        this.storeAs \u003d storeNotDoneTodo(description);"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"     * Returns the String representation of the Todo Task."},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"     * @return Representation of the Todo Task."},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        return TYPE_ICON + super.toString();"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"    private String storeDoneTodo(String description) {"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        return TYPE + SEPARATOR + DONE + SEPARATOR + description;"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"    private String storeNotDoneTodo(String description) {"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"        return TYPE + SEPARATOR + NOT_DONE + SEPARATOR + description;"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":56}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"    private DialogBox(String text, Image img, boolean isUser) {"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        if (isUser) {"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"            dialog.setStyle(\"-fx-background-color: #99CCFF; -fx-background-radius: 10;  -fx-padding: 10 10 10 10\");"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"            dialog.setStyle(\"-fx-background-color: #f6db7f; -fx-background-radius: 10;  -fx-padding: 10 10 10 10;\");"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        displayPicture.setImage(img);"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"    private void flip() {"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"        Collections.reverse(tmp);"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"        return new DialogBox(text, img, true);"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"        var db \u003d new DialogBox(text, img, false);"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        db.flip();"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        return db;"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":67}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import static java.lang.Thread.sleep;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/spiderman.png\"));"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/matrix.png\"));"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"     * Initializes main window."},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"    public void initialize() {"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"        dialogContainer.setStyle(\"-fx-background-color: #436060\");"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"        duke \u003d d;"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"                DialogBox.getDukeDialog(d.getGreeting(), dukeImage)"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"    private void handleUserInput() throws InterruptedException {"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"        );"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        userInput.clear();"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"        //check to exit program"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"        if (duke.getExitStatus()) {"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"            Platform.runLater(new Runnable() {"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"                @Override"},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"                public void run() {"},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"                    try {"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"                        sleep(1700);"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"                    } catch (InterruptedException e) {"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"                        Platform.exit();"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"                    }"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":"                    Platform.exit();"},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"            });"},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":83}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import duke.note.Note;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import duke.note.NoteList;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":" * The Ui class handles all the interactions, including input and output, with the user."},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"public class Ui {"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    private Scanner sc;"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    public Ui() {"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation for exiting the program."},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"    public String printExit() {"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Shutting down... Hope to see you again soon!\";"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of a section divider."},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"    public String printDivider() {"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"_______________________________________________________________\";"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of greeting message."},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"    public String printGreeting() {"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Hello! Dukenizer is back!\\nWhat can I do for you?\\n\\n\""},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"                + \"Some things you can do:\\n\""},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"                + \"1) list: see your task list!\\n\""},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"                + \"2) notes: see all your notes!\\n\""},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"                + \"3) todo \u003cdescription\u003e: add a new task!\\n\""},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"                + \"4) note \u003cdescription\u003e: add a new note!\\n\\n\""},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"                + \"Type \u0027help\u0027 to see the full list of commands!\";"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of the task list in the program."},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"    public String printList(TaskList lst) {"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"        assert lst !\u003d null : \"lst should be a valid list\";"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"        String s \u003d lst.toString();"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        if (lst.getSize() \u003d\u003d 0) {"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"            s \u003d \"There are no items found in your task list!\";"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"     * Takes in user input to be processed."},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"     * @return Returns a string representation of the user input."},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"    public String readCommand() {"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"        //Take in Input"},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"        String query \u003d sc.nextLine();"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"        return query;"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of any error messages."},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"     * @param message error message"},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":"    public String showError(String message) {"},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"        return message;"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of task being successfully added."},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":"     * @param lst  TaskList in the program"},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":"     * @param task Task that was added"},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":"    public String printTaskAdded(TaskList lst, Task task) {"},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"        assert task !\u003d null : \"task should be valid\";"},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":"        assert lst !\u003d null : \"lst should be valid\";"},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Got it. I\u0027ve added this task:\\n\" + task.toString()"},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":"                + \"\\nNow you have \" + lst.getSize() + \" tasks in the list.\";"},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of marking Task as done."},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":"     * @param task Task to be marked done."},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":"    public String printTaskDone(Task task) {"},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":"        assert task !\u003d null : \"task should be valid\";"},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString();"},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of Task being successfully deleted."},{"lineNumber":118,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"CodyChew"},"content":"     * @param lst  TaskList in the program"},{"lineNumber":120,"author":{"gitId":"CodyChew"},"content":"     * @param task Task to be deleted"},{"lineNumber":121,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"CodyChew"},"content":"    public String printTaskDeleted(TaskList lst, Task task) {"},{"lineNumber":123,"author":{"gitId":"CodyChew"},"content":"        assert task !\u003d null : \"task should be valid\";"},{"lineNumber":124,"author":{"gitId":"CodyChew"},"content":"        assert lst !\u003d null : \"lst should be valid\";"},{"lineNumber":125,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":126,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Noted. I\u0027ve removed this task:\\n\" + task.toString()"},{"lineNumber":127,"author":{"gitId":"CodyChew"},"content":"                + \"\\nNow you have \" + lst.getSize() + \" tasks in the list.\";"},{"lineNumber":128,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":129,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":131,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of Note being successfully deleted."},{"lineNumber":133,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"CodyChew"},"content":"     * @param lst  NoteList in the program"},{"lineNumber":135,"author":{"gitId":"CodyChew"},"content":"     * @param note Note to be deleted"},{"lineNumber":136,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"CodyChew"},"content":"    public String printNoteDeleted(NoteList lst, Note note) {"},{"lineNumber":138,"author":{"gitId":"CodyChew"},"content":"        assert note !\u003d null : \"task should be valid\";"},{"lineNumber":139,"author":{"gitId":"CodyChew"},"content":"        assert lst !\u003d null : \"lst should be valid\";"},{"lineNumber":140,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":141,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Noted. I\u0027ve removed this note:\\n\" + note.toString()"},{"lineNumber":142,"author":{"gitId":"CodyChew"},"content":"                + \"\\nNow you have \" + lst.getSize() + \" notes in your program.\";"},{"lineNumber":143,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":144,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":146,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"CodyChew"},"content":"     * Returns a matching tasks message."},{"lineNumber":148,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"CodyChew"},"content":"    public String printMatchingTasks() {"},{"lineNumber":150,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":151,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":152,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":153,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":155,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"CodyChew"},"content":"     * Returns a new note added message."},{"lineNumber":157,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"CodyChew"},"content":"     * @param newNote note that was added."},{"lineNumber":159,"author":{"gitId":"CodyChew"},"content":"     * @return String message to notify new note added."},{"lineNumber":160,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"CodyChew"},"content":"    public String printNoteAdded(Note newNote) {"},{"lineNumber":162,"author":{"gitId":"CodyChew"},"content":"        assert newNote !\u003d null : \"note should be valid\";"},{"lineNumber":163,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":164,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"Got it. Your note has been added:\\n\""},{"lineNumber":165,"author":{"gitId":"CodyChew"},"content":"                + newNote.toString();"},{"lineNumber":166,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":167,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":169,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"CodyChew"},"content":"     * Returns a string representation of the note list in the program."},{"lineNumber":171,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":172,"author":{"gitId":"CodyChew"},"content":"     * @param notes List of notes in the program."},{"lineNumber":173,"author":{"gitId":"CodyChew"},"content":"     * @return String representation of the note list."},{"lineNumber":174,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"CodyChew"},"content":"    public String printNotes(NoteList notes) {"},{"lineNumber":176,"author":{"gitId":"CodyChew"},"content":"        assert notes !\u003d null : \"lst should be a valid list\";"},{"lineNumber":177,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":178,"author":{"gitId":"CodyChew"},"content":"        String s \u003d notes.toString();"},{"lineNumber":179,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":180,"author":{"gitId":"CodyChew"},"content":"        if (notes.getSize() \u003d\u003d 0) {"},{"lineNumber":181,"author":{"gitId":"CodyChew"},"content":"            s \u003d \"There are no notes found! Type \u0027note \u003cdescription\u003e\u0027 to save a note!\";"},{"lineNumber":182,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":184,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":186,"author":{"gitId":"CodyChew"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"CodyChew"},"content":"     * Returns a help messsage for the list of commands."},{"lineNumber":188,"author":{"gitId":"CodyChew"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"CodyChew"},"content":"     * @return String representation of help message."},{"lineNumber":190,"author":{"gitId":"CodyChew"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"CodyChew"},"content":"    public String printHelp() {"},{"lineNumber":192,"author":{"gitId":"CodyChew"},"content":"        String s \u003d \"List of commands:\\n\""},{"lineNumber":193,"author":{"gitId":"CodyChew"},"content":"                + \"1) list -Lists the items in your task list.\\n\\n\""},{"lineNumber":194,"author":{"gitId":"CodyChew"},"content":"                + \"2) todo \u003cdescription\u003e\\n-Adds a To-Do task with the description to your task list.\\n\\n\""},{"lineNumber":195,"author":{"gitId":"CodyChew"},"content":"                + \"3) deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd HH:mm\u003e\\n-Adds a task with a description \""},{"lineNumber":196,"author":{"gitId":"CodyChew"},"content":"                + \"and a deadline to your task list. E.g. deadline sample task 1 /by 2020-09-12 23:22\\n\\n\""},{"lineNumber":197,"author":{"gitId":"CodyChew"},"content":"                + \"4) event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e\\n-Adds a task with a description \""},{"lineNumber":198,"author":{"gitId":"CodyChew"},"content":"                + \"at a specified time to your task list. E.g. event sample task 2 /by 2020-09-12 11:22\\n\\n\""},{"lineNumber":199,"author":{"gitId":"CodyChew"},"content":"                + \"5) done \u003citem number\u003e\\n-Marks the task at item number index in your task list as \\\"done\\\"\\n\\n\""},{"lineNumber":200,"author":{"gitId":"CodyChew"},"content":"                + \"6) delete \u003citem number\u003e\\n-Deletes the task at item number index in your task list\\n\\n\""},{"lineNumber":201,"author":{"gitId":"CodyChew"},"content":"                + \"7) find \u003cdescription\u003e\\n-Finds all tasks in your task list with the description search term\\n\\n\""},{"lineNumber":202,"author":{"gitId":"CodyChew"},"content":"                + \"8) note \u003cdescription\u003e -Adds a note with the description in Dukenizer. E.g. note i am 1.8m\\n\\n\""},{"lineNumber":203,"author":{"gitId":"CodyChew"},"content":"                + \"9) notes -Lists all your notes in Dukenizer.\\n\\n\""},{"lineNumber":204,"author":{"gitId":"CodyChew"},"content":"                + \"10) RemoveNote \u003cnote index\u003e\\n-Removes a note at the specified index in your note list\\n\";"},{"lineNumber":205,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":206,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":207,"author":{"gitId":"CodyChew"},"content":"        return s;"},{"lineNumber":208,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":209}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" minWidth\u003d\"350\"/\u003e"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"CodyChew":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"424.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"424.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"488.0\"/\u003e"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"CodyChew":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"public class DukeTest {"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    private static final String TEST_PATH_TASKS \u003d \"DukeTestList.txt\";"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    private static final String TEST_PATH_NOTES \u003d \"NoteTestPath.txt\";"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    private Duke duke;"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    @BeforeEach"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    public void init() {"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"        //initialize file and store default task list"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        duke \u003d new Duke(\"DukeTestList.txt\", \"NoteTestPath.txt\");"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"            FileWriter fw \u003d new FileWriter(TEST_PATH_TASKS);"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":"            fw.write(\"\");"},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":"            fw.close();"},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"            FileWriter fw \u003d new FileWriter(TEST_PATH_NOTES);"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"            fw.write(\"\");"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"            fw.close();"},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":"    @AfterEach"},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"    public void resetFilePath() {"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"            FileWriter fw \u003d new FileWriter(TEST_PATH_TASKS);"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"            fw.write(\"\");"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"            fw.close();"},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"        } catch (IOException e) {"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":"            e.printStackTrace();"},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"            FileWriter fw \u003d new FileWriter(TEST_PATH_NOTES);"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"            fw.write(\"\");"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"            fw.close();"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"        } catch (IOException e) {"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"            e.printStackTrace();"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":"    public void getResponseTest() {"},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Shutting down... Hope to see you again soon!\", duke.getResponse(\"bye\"));"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"                + \"[T][✘] valid todo\\n\""},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"                + \"Now you have 1 tasks in the list.\", duke.getResponse(\"todo valid todo\"));"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"                + \"[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\""},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":"                + \"Now you have 2 tasks in the list.\","},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"                duke.getResponse(\"deadline valid deadline /by 2019-12-01 00:11\"));"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":"                + \"[E][✘] valid event (at: Aug 22 2020 23:32)\\n\""},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"                + \"Now you have 3 tasks in the list.\", duke.getResponse(\"event valid event /at 2020-08-22 23:32\"));"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"1.[T][✘] valid todo\\n\""},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":"                + \"2.[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\""},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"                + \"3.[E][✘] valid event (at: Aug 22 2020 23:32)\", duke.getResponse(\"list\"));"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":"                + \"[E][✓] valid event (at: Aug 22 2020 23:32)\", duke.getResponse(\"done 3\"));"},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"                + \"[E][✓] valid event (at: Aug 22 2020 23:32)\\n\""},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"                + \"Now you have 2 tasks in the list.\", duke.getResponse(\"delete 3\"));"},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Here are the matching tasks in your list:\\n\""},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":"                + \"1.[T][✘] valid todo\", duke.getResponse(\"find todo\"));"},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Got it. Your note has been added:\\n\""},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":"                + \"test1\", duke.getResponse(\"note test1\"));"},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"1.test1\", duke.getResponse(\"notes\"));"},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Noted. I\u0027ve removed this note:\\n\""},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":"                + \"test1\\nNow you have 0 notes in your program.\", duke.getResponse(\"RemoveNote 1\"));"},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":"    public void getGreetingTest() {"},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"Hello! Dukenizer is back!\\nWhat can I do for you?\\n\\n\""},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":"                + \"Some things you can do:\\n\""},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":"                + \"1) list: see your task list!\\n\""},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":"                + \"2) notes: see all your notes!\\n\""},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":"                + \"3) todo \u003cdescription\u003e: add a new task!\\n\""},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":"                + \"4) note \u003cdescription\u003e: add a new note!\\n\\n\""},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":"                + \"Type \u0027help\u0027 to see the full list of commands!\", duke.getGreeting());"},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":116}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"import duke.exception.DukeException;"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"public class TaskListTest {"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"    private TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"    private Todo todoTask \u003d new Todo(\"valid todo\");"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"    private Deadline deadlineTask \u003d new Deadline(\"valid deadline\", \"2019-12-01 00:11\");"},{"lineNumber":19,"author":{"gitId":"CodyChew"},"content":"    private Event eventTask \u003d new Event(\"valid event\", \"2020-08-22 23:32\");"},{"lineNumber":20,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":21,"author":{"gitId":"CodyChew"},"content":"    @BeforeEach"},{"lineNumber":22,"author":{"gitId":"CodyChew"},"content":"    public void init() {"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"CodyChew"},"content":"        tasks.add(todoTask);"},{"lineNumber":25,"author":{"gitId":"CodyChew"},"content":"        tasks.add(deadlineTask);"},{"lineNumber":26,"author":{"gitId":"CodyChew"},"content":"        tasks.add(eventTask);"},{"lineNumber":27,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":29,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":30,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"CodyChew"},"content":"    public void getSizeTest() {"},{"lineNumber":32,"author":{"gitId":"CodyChew"},"content":"        assertEquals(3, tasks.getSize());"},{"lineNumber":33,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":35,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"CodyChew"},"content":"    public void testStringConversion() {"},{"lineNumber":37,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"1.[T][✘] valid todo\\n\""},{"lineNumber":38,"author":{"gitId":"CodyChew"},"content":"                + \"2.[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\""},{"lineNumber":39,"author":{"gitId":"CodyChew"},"content":"                + \"3.[E][✘] valid event (at: Aug 22 2020 23:32)\", tasks.toString());"},{"lineNumber":40,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":41,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"\", new TaskList().toString());"},{"lineNumber":42,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":44,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"CodyChew"},"content":"    public void testConstructor_validString_taskListCreated() throws DukeException {"},{"lineNumber":46,"author":{"gitId":"CodyChew"},"content":"        String validString \u003d \"T,0,valid todo|D,1,valid deadline,2019-12-01 00:11|\";"},{"lineNumber":47,"author":{"gitId":"CodyChew"},"content":"        TaskList tl \u003d new TaskList(validString);"},{"lineNumber":48,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"1.[T][✘] valid todo\\n\""},{"lineNumber":49,"author":{"gitId":"CodyChew"},"content":"                + \"2.[D][✓] valid deadline (by: Dec 1 2019 00:11)\", tl.toString());"},{"lineNumber":50,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":51,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":53,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"CodyChew"},"content":"    public void testConstructor_invalidString_exceptionThrown() throws DukeException {"},{"lineNumber":55,"author":{"gitId":"CodyChew"},"content":"        String invalidString \u003d \"T,0\";"},{"lineNumber":56,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"CodyChew"},"content":"            TaskList tl \u003d new TaskList(invalidString);"},{"lineNumber":58,"author":{"gitId":"CodyChew"},"content":"            assertEquals(\"1.[T][✘] valid todo\", tl.toString());"},{"lineNumber":59,"author":{"gitId":"CodyChew"},"content":"            fail();"},{"lineNumber":60,"author":{"gitId":"CodyChew"},"content":"        } catch (DukeException e) {"},{"lineNumber":61,"author":{"gitId":"CodyChew"},"content":"            assertEquals(\"Index 2 out of bounds for length 2\", e.getMessage());"},{"lineNumber":62,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":64,"author":{"gitId":"CodyChew"},"content":"        String invalidString2 \u003d \"T,0,dsad|D,k,vs,3\";"},{"lineNumber":65,"author":{"gitId":"CodyChew"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"CodyChew"},"content":"            TaskList tl2 \u003d new TaskList(invalidString2);"},{"lineNumber":67,"author":{"gitId":"CodyChew"},"content":"            assertEquals(\"1.[T][✘] valid todo\", tl2.toString());"},{"lineNumber":68,"author":{"gitId":"CodyChew"},"content":"            fail();"},{"lineNumber":69,"author":{"gitId":"CodyChew"},"content":"        } catch (DukeException e) {"},{"lineNumber":70,"author":{"gitId":"CodyChew"},"content":"            assertEquals(\"error loading from file\", e.getMessage());"},{"lineNumber":71,"author":{"gitId":"CodyChew"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":73,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":75,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"CodyChew"},"content":"    public void getTaskTest() {"},{"lineNumber":77,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":78,"author":{"gitId":"CodyChew"},"content":"        assertEquals(todoTask, tasks.get(0));"},{"lineNumber":79,"author":{"gitId":"CodyChew"},"content":"        assertEquals(deadlineTask, tasks.get(1));"},{"lineNumber":80,"author":{"gitId":"CodyChew"},"content":"        assertEquals(eventTask, tasks.get(2));"},{"lineNumber":81,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":83,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"CodyChew"},"content":"    public void addTest() {"},{"lineNumber":85,"author":{"gitId":"CodyChew"},"content":"        tasks.add(todoTask);"},{"lineNumber":86,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":87,"author":{"gitId":"CodyChew"},"content":"        assertEquals(4, tasks.getSize());"},{"lineNumber":88,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"1.[T][✘] valid todo\\n\""},{"lineNumber":89,"author":{"gitId":"CodyChew"},"content":"                + \"2.[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\""},{"lineNumber":90,"author":{"gitId":"CodyChew"},"content":"                + \"3.[E][✘] valid event (at: Aug 22 2020 23:32)\\n\""},{"lineNumber":91,"author":{"gitId":"CodyChew"},"content":"                + \"4.[T][✘] valid todo\", tasks.toString());"},{"lineNumber":92,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":94,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"CodyChew"},"content":"    public void deleteTest() {"},{"lineNumber":96,"author":{"gitId":"CodyChew"},"content":"        assertEquals(3, tasks.getSize());"},{"lineNumber":97,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":98,"author":{"gitId":"CodyChew"},"content":"        //delete last task"},{"lineNumber":99,"author":{"gitId":"CodyChew"},"content":"        assertEquals(eventTask, tasks.delete(3));"},{"lineNumber":100,"author":{"gitId":"CodyChew"},"content":"        assertEquals(2, tasks.getSize());"},{"lineNumber":101,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":102,"author":{"gitId":"CodyChew"},"content":"        //delete first task"},{"lineNumber":103,"author":{"gitId":"CodyChew"},"content":"        tasks.delete(1);"},{"lineNumber":104,"author":{"gitId":"CodyChew"},"content":"        assertEquals(1, tasks.getSize());"},{"lineNumber":105,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":106,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":107,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":109,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"CodyChew"},"content":"    public void markDoneTest() {"},{"lineNumber":111,"author":{"gitId":"CodyChew"},"content":"        tasks.markDone(1);"},{"lineNumber":112,"author":{"gitId":"CodyChew"},"content":"        tasks.markDone(3);"},{"lineNumber":113,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":114,"author":{"gitId":"CodyChew"},"content":"        assertEquals(\"1.[T][✓] valid todo\\n\""},{"lineNumber":115,"author":{"gitId":"CodyChew"},"content":"                + \"2.[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\""},{"lineNumber":116,"author":{"gitId":"CodyChew"},"content":"                + \"3.[E][✓] valid event (at: Aug 22 2020 23:32)\", tasks.toString());"},{"lineNumber":117,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":118,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":120,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":121,"author":{"gitId":"CodyChew"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"CodyChew"},"content":"    public void getListTest() {"},{"lineNumber":123,"author":{"gitId":"CodyChew"},"content":"        //form external list"},{"lineNumber":124,"author":{"gitId":"CodyChew"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":125,"author":{"gitId":"CodyChew"},"content":"        lst.add(todoTask);"},{"lineNumber":126,"author":{"gitId":"CodyChew"},"content":"        lst.add(deadlineTask);"},{"lineNumber":127,"author":{"gitId":"CodyChew"},"content":"        lst.add(eventTask);"},{"lineNumber":128,"author":{"gitId":"CodyChew"},"content":"        assertEquals(lst, tasks.getList());"},{"lineNumber":129,"author":{"gitId":"CodyChew"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":131,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":132,"author":{"gitId":"CodyChew"},"content":"}"}],"authorContributionMap":{"CodyChew":132}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CodyChew"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"CodyChew"},"content":"list"},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":"deadline return book /by 209-12-0"},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":"event project meeting /at 2020-08-52"},{"lineNumber":5,"author":{"gitId":"CodyChew"},"content":"deadline wrong3 /by 2019-12-01 03:1"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"event wrong4 /at 2019-12-01 00:70"},{"lineNumber":7,"author":{"gitId":"CodyChew"},"content":"deadline return book /by 2019-12-01 00:11"},{"lineNumber":8,"author":{"gitId":"CodyChew"},"content":"event project meeting /at 2020-08-22 23:32"},{"lineNumber":9,"author":{"gitId":"CodyChew"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"CodyChew"},"content":"find"},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"find book"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":"find non-existent"},{"lineNumber":13,"author":{"gitId":"CodyChew"},"content":"list"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"delete 4"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"CodyChew"},"content":"delete 2"},{"lineNumber":17,"author":{"gitId":"CodyChew"},"content":"delete 1"},{"lineNumber":18,"author":{"gitId":"CodyChew"},"content":"bye"}],"authorContributionMap":{"CodyChew":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":4,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":6,"author":{"gitId":"CodyChew"},"content":"if not exist C:\\Data\\repos\\CS2103\\bin mkdir C:\\Data\\repos\\CS2103\\bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"CodyChew"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":12,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":14,"author":{"gitId":"CodyChew"},"content":"javac  -cp C:\\Data\\repos\\CS2103\\src\\main\\java\\ -Xlint:none -d C:\\Data\\repos\\CS2103\\bin C:\\Data\\repos\\CS2103\\src\\main\\java\\Duke\\*.java"},{"lineNumber":15,"author":{"gitId":"CodyChew"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":17,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":19,"author":{"gitId":"-"},"content":")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"CodyChew"},"content":"java -classpath C:\\Data\\repos\\CS2103\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":27,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":28,"author":{"gitId":"CodyChew"},"content":""}],"authorContributionMap":{"CodyChew":9,"-":19}}]
