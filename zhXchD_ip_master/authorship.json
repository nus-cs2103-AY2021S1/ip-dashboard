[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "## Features implemented"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "1. Add a task from user input to a list of tasks. Example:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "2. Mark a task in the list as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "3. Add support for tracking three types of tasks:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * **ToDos**: tasks without any date/time attached to it e.g., visit new theme park"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * **Deadlines**: tasks that need to be done before a specific date/time e.g., submit report by 11/10/2019 5pm"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * **Events**: tasks that start at a specific time and ends at a specific time e.g., team project meeting on 2/10/2019 2-4pm"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "4. Add error handling features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * Command that is not `todo`, `deadline`, `event`, `list`, `done` or `bye` cannot be recognised."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * For commands that require a description, such as `todo`, `deadline`, `event`, if the response does not include a description, Duke will not accept."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * For command `done` that takes an argument of particular format (i.e. integer), Duke will not receive illegal arguments."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    * For commands that takes in a time after some trigger words, such as `deadline` and `event`, Duke will not accept responses without a time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "5. Add delete feature:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    1. Duke will recognise command `delete` followed by an applicable integer to delete the corresponding task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    2. For those `delete` commands that Duke does not accept, error handling is also implemented for this."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "6. Save to disk: Duke will keep a copy of the task list in a local file and retrive it every time Duke starts."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "7. Time format support for `deadline` and `event`, if a date input is of the pattern `yyyy-mm-dd`, Duke will understand this"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "and print the format as `MMM dd yyyy`, otherwise, Duke will treat this as a string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "## Automated UI Testing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "1. Assume you are running a *nix operating system, e.g. macOS."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "1. Make sure you have `dos2unix` installed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "1. Direct to directory `text-ui-text`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "1. Run `chmod +x runtest.sh` to make the `.sh` file executable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "1. Run command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    ./runtest.sh"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "1. If the actual output matches the `EXPECTED.TXT`, the test passes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "   If the actual output differs from the `EXPECTED.TXT`, the script will report a failure."
      }
    ],
    "authorContributionMap": {
      "zhXchD": 39,
      "-": 26
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.ChatBot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * The starting point of running Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Use command \u003ccode\u003ejava Duke\u003c/code\u003e to start Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param args argument strings from the input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        // initialise a new chat bot"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ChatBot bot \u003d new ChatBot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        bot.start();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 14,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/ChatBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.NoDataFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The chat bot class to handle the internal logic."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class ChatBot {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Constructor of the chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new chat bot with new UI, and initialised storage handling."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Try to load the previous data file, if failed create a new data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * If Duke cannot create a new one, \u003ccode\u003eIOException\u003c/code\u003e will be caught"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * and prints information for the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public ChatBot() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.showLoading();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            tasks \u003d new TaskList(Storage.readList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            ui.showLoaded(tasks.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } catch (NoDataFileException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            ui.showLoadedNew();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * The entry point to run the chat bot."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                String response \u003d ui.receiveChat();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                ui.printHorizontal();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                Command cmd \u003d parser.parse(response);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                cmd.execute(tasks, ui);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                Storage.save(tasks.getList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                isExit \u003d cmd.isExit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                ui.printLine(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            ui.printHorizontal();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 57
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.IllegalCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.IllegalDeleteArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.IllegalDoneArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.NoTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Class to understand user\u0027s command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The essential functionality of this helper class is to map user command to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * \u003ccode\u003eCommand\u003c/code\u003e objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Map a response string to an executable \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * This methods map a response string to an executable \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * object. When converting, commands that Duke cannot understand will lead"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * to exception throwing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param response one-line input from the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return a \u003ccode\u003eCommand\u003c/code\u003e object that Duke can execute"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws Exception exceptions when Duke cannot understands the command or"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *         when the command does not have the required format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public Command parse(String response) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (response.equals(\"bye\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new CommandBye();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else if (response.equals(\"list\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new CommandList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        String keyWord \u003d response.split(\" \")[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (keyWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (response.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new NoDescriptionException(\"find\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            } else return new CommandFind(response.substring(5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else if (keyWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (response.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new NoDescriptionException(\"done\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (response.split(\" \").length !\u003d 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new IllegalDoneArgument();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (!response.split(\" \")[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new IllegalDoneArgument();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            int index \u003d Integer.parseInt(response.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new CommandDone(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else if (keyWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (response.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new NoDescriptionException(\"delete\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (response.split(\" \").length !\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new IllegalDeleteArgument();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (!response.split(\" \")[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                throw new IllegalDeleteArgument();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            int index \u003d Integer.parseInt(response.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new CommandDelete(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            String firstCmd \u003d response.split(\" \")[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            switch (firstCmd) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    if (response.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        throw new NoDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    newTask \u003d new Todo(response.substring(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                case \"deadline\": {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    if (response.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        throw new NoDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    String nameAndTime \u003d response.substring(9);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    if (nameAndTime.split(\" /by \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        throw new NoTimeException(\"deadline\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    newTask \u003d new Deadline(response.substring(9).split(\" /by \")[0],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            response.substring(9).split(\" /by \")[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                case \"event\": {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    if (response.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        throw new NoDescriptionException(\"event\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    String nameAndTime \u003d response.substring(6);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    if (nameAndTime.split(\" /at \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        throw new NoTimeException(\"event\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    newTask \u003d new Event(response.substring(6).split(\" /at \")[0],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                            response.substring(6).split(\" /at \")[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    throw new IllegalCommandException(response);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return new CommandAdd(newTask);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 109
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.NoDataFileException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private static final String path \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Read stored task list from the disk data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * This method loads the stored task list from the disk data file. If the file cannot"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * be found, \u003ccode\u003eStorage\u003c/code\u003e will create a new file for the user and throws"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * \u003ccode\u003eNoDataFileException\u003c/code\u003e to notify the chat bot. If there is an error"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * accessing the file and new file cannot be created, \u003ccode\u003eIOException\u003c/code\u003e will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * thrown to notify the chat bot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return a \u003ccode\u003eLinkedList\u003c/code\u003e of tasks read from the data file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws IOException throw if there is some error accessing the file and we cannot"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *                     create a new one"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws NoDataFileException throw if there is no file copy and Duke has successfully"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *                     created a new one"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static LinkedList\u003cTask\u003e readList() throws IOException, NoDataFileException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        LinkedList\u003cTask\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            File data \u003d new File(path);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            Scanner sc \u003d new Scanner(data);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                String currentLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                Task currentTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                String[] parts \u003d currentLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                switch (parts[0]) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        currentTask \u003d new Todo(parts[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        currentTask \u003d new Deadline(parts[2], parts[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        currentTask \u003d new Event(parts[2], parts[3]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                        throw new IOException(\"Illegal string found in data file.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                if (parts[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    currentTask.markAsDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                list.add(currentTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (!new File(path).exists()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                new File(path).createNewFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                if (!new File(path).exists()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    throw new IOException(\"Cannot access the file.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    throw new NoDataFileException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Write a list of tasks to the local data file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Write a list of tasks to the local data file, the format of the data file can be"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * understood by \u003ccode\u003eStorage\u003c/code\u003e, so that it can read the file and convert back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * to a list of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param list the list of tasks to be written into the data file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public static void save(LinkedList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                writer.write(task.toDataString() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            System.out.println(\"     Oops! Something wrong happened when writing the data!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 94
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * A class to handle operations on the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * A class that abstracts all operations regarding the task list, so that outer classes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * do not need to operate on a \u003ccode\u003eLinkedList\u003c/code\u003e anymore."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private LinkedList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new \u003ccode\u003eTaskList\u003c/code\u003e that stores a specified list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param list the list of tasks to be stored in the created object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public TaskList(LinkedList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new \u003ccode\u003eTaskList\u003c/code\u003e storing a new empty list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the list stored in the \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return a \u003ccode\u003eLinkedList\u003c/code\u003e of tasks that is currently stored in the object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public LinkedList\u003cduke.task.Task\u003e getList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the size of the list stored in the \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return an \u003ccode\u003eint\u003c/code\u003e that is the size of the list that is currently stored"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *         in the object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Mark a specified task in the current list done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Mark a specified task in the current list as done. This index must be verified to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * be valid for the current list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param index a valid index indicating the task that needs to be marked as done"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void markAsDone(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        list.get(index).markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Remove a specified task in the current list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Remove a specified task in the current list. This index must be verified to be valid"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * for the current list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param index a valid index indicating the task that needs to be removes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Add a given task to the current list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Add a given task to the current list. This task must be verified to be valid for the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * current list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param newTask a new task to be adding to the current list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 76
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * A class to handle the internal logic regarding interactions with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * This class handles the logic of receiving chat from the user and generating user interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Print out a list to the interface."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param list the list of tasks to be printed out"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void printList(LinkedList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            System.out.println(\"     You have no tasks in your list now! \" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    \"Type todo, event or deadline to add some!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                System.out.println(\"     \" + i + \".\" + list.get(i - 1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Print a specified line in the required format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param line the line of the string that needs to be printed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void printLine(String line) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        System.out.println(\"     \" + line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Read next line from the user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return String of the next user input line."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String receiveChat() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Show that Duke is fetching data from the local database."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void showLoading() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        System.out.println(\"     Data loading...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Show that Duke has fetched data from the local database."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param num the number of tasks Duke fetched from the local database."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void showLoaded(int num) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        System.out.println(\"     Previous data found!\\n     Now you have \" + num"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                + \" task in the list!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Show that Duke did not find data from the local database and created a new data file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void showLoadedNew() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        System.out.println(\"     Did not find any previous stored data and \" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                \"new data file created!\\n     Welcome!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Show that Duke encounters an error when accessing the file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        System.out.println(\"     Oops! Cannot access your data file and no \" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                \"new data file has been created!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Print welcome to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        printHorizontal();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        System.out.println(\"    \" + \" Hello! I\u0027m Duke!\\n     What can I do for you?\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        printHorizontal();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Draw a horizontal line to divide different chats."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void printHorizontal() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 95
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Interface for all command classes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * This interface declares methods \u003ccode\u003eexecute()\u003c/code\u003e and \u003ccode\u003eisExit()\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    void execute(TaskList tasks, Ui ui) throws Exception;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 14
    }
  },
  {
    "path": "src/main/java/duke/command/CommandAdd.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Command to add a task to a designated list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class CommandAdd implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final Task newTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new command to add a specified task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param newTask the new task to be added by \u003ccode\u003eCommandAdd\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandAdd(Task newTask) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Add the new task to a specified \u003ccode\u003eTaskList\u003c/code\u003e with interface updates."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e which the new task will be adding to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param ui the \u003ccode\u003eUi\u003c/code\u003e object to handle the interface updates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(newTask.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return \u003ccode\u003efalse\u003c/code\u003e since the command is not exit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 41
    }
  },
  {
    "path": "src/main/java/duke/command/CommandBye.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Command to exit."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class CommandBye implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return \u003ccode\u003etrue\u003c/code\u003e since the command is exit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Execute the command by printing goodbye."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param tasks the task list to be executed on"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param ui the \u003ccode\u003eUi\u003c/code\u003e object to handle interface updates"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 26
    }
  },
  {
    "path": "src/main/java/duke/command/CommandDelete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.IllegalDoneArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The command to delete a specified task from a designated task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class CommandDelete implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new command to delete a task at specified index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param index the index (can be invalid) of the task to be deleted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandDelete(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Execute the command to delete the task indexed \u003ccode\u003en\u003c/code\u003e from a given list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e to delete from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param ui to handle interface updates"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws Exception throw when the index \u003ccode\u003en\u003c/code\u003e is out of range"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new IllegalDoneArgument();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Task deleted \u003d tasks.getList().get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(\"Noted! I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(deleted.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return false since the command is not to exit."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 46
    }
  },
  {
    "path": "src/main/java/duke/command/CommandDone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.exception.IllegalDoneArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The command to mark a task of given index as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class CommandDone implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new command to mark the task at given index as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param index the index (can be invalid) of the task to be marked as done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandDone(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Execute the command to mark the task at given index as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e to operate on"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param ui the \u003ccode\u003eUi\u003c/code\u003e object to handle interface updates."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @throws Exception throw if the index is out of range"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            throw new IllegalDoneArgument();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        tasks.markAsDone(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printLine(tasks.getList().get(index).toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return \u003ccode\u003efalse\u003c/code\u003e since the command is not to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 43
    }
  },
  {
    "path": "src/main/java/duke/command/CommandFind.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The command to find tasks with search keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class CommandFind implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new find command with search keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param keyword the string to search"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public CommandFind(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Execute the command to search all tasks with keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e to operate on"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param ui the \u003ccode\u003eUi\u003c/code\u003e object to handle interface"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        LinkedList\u003cTask\u003e results \u003d new LinkedList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        for (Task result : tasks.getList()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            if (result.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                results.add(result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            ui.printLine(\"No tasks containing \" + keyword + \" found!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            ui.printLine(\"Found \" + results.size() + \" tasks:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            ui.printList(results);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return \u003ccode\u003efalse\u003c/code\u003e since the command is not exit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 50
    }
  },
  {
    "path": "src/main/java/duke/command/CommandList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The command to list all task of a designated task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class CommandList implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Execute the command to list all tasks of a given \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e to operate on"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param ui the \u003ccode\u003eUi\u003c/code\u003e to handle the interface updates"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        ui.printList(tasks.getList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return \u003ccode\u003efalse\u003c/code\u003e since the command is not exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The exception to be thrown when Duke encounters non-understandable commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class IllegalCommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new exception with the command that causes the confusion."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param command the command that confuses Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public IllegalCommandException(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(\"☹ OOPS!!! I cannot recognise the command \\\"\" + command + \"\\\" :-(\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDeleteArgument.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Exception to be thrown when Duke encounters an index illegal or out of range in a delete command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class IllegalDeleteArgument extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct the exception to indicate illegal index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public IllegalDeleteArgument() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(\"☹ OOPS!!! The argument for a delete command must be an integer within the range!!!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDoneArgument.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The exception to be thrown when Duke encounters index illegal or out of range in a done command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class IllegalDoneArgument extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new exception to indicate illegal index for delete."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public IllegalDoneArgument() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(\"☹ OOPS!!! The argument for a done command must be an integer within the range!!!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/NoDataFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The exception to be thrown to indicate that Duke did not find"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * an existing data file and created a new one."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class NoDataFileException  extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new exception to indicate that no data file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * found and Duke created a new empty one."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public NoDataFileException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(\"No data file found, a new data file created!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The exception to be thrown when Duke encounters an empty description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class NoDescriptionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new exception with the type of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param type the type of task where the exception is encountered"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public NoDescriptionException(String type) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(\"☹ OOPS!!! The description of a \" + type + \" cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/NoTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The exception to be thrown when Duke encounters an empty time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class NoTimeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new exception with the type of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param type the type of task where the exception is encountered"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public NoTimeException(String type) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(\"☹ OOPS!!! The time of a \" + type + \" cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * A type of tasks that has a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private String byString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new deadline task from specified description and due date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param description the description of the task to be created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param by the string indicates the deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *           If the string \u003ccode\u003eby\u003c/code\u003e is of pattern that Duke understands,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *           Duke will save the deadline as a date. Otherwise, Duke will"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *           understand this as a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.byString \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.byString \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.by \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string that is intended to be stored in the local database."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string to be stored in the local database, the format is"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *         understandable for \u003ccode\u003eStorage\u003c/code\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"D | 1 | \" + description + \" | \" + byString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"D | 0 | \" + description + \" | \" + byString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string representation of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string representation of the task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (this.by !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + byString + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * A type of tasks that has a time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    private String atString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new event task from specified description and due date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param description the description of the task to be created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param at the string indicates the event time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *           If the string \u003ccode\u003eat\u003c/code\u003e is of pattern that Duke"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *           understands, Duke will save the time as a date. Otherwise,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *           Duke will understand this as a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.atString \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.atString \u003d at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            this.at \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string that is intended to be stored in the local database."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string to be stored in the local database, the format is"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *         understandable for \u003ccode\u003eStorage\u003c/code\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"E | 1 | \" + description + \" | \" + atString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"E | 0 | \" + description + \" | \" + atString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string representation of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string representation of the task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (this.at !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                    + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + atString + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * Task class that abstracts a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Construct a new Task with a given description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * This method is intended to serve as a dummy task generator for placeholder purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Please do NOT construct tasks using this method. Instead, use the constructors of its"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * subclasses, i.e. \u003ccode\u003eDeadline\u003c/code\u003e, \u003ccode\u003eEvent\u003c/code\u003e, and \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @param description the name of the task to be created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Get the status icon (tick or cross) of the current task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return an icon (tick or cross) to indicate whether the current task has been done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Get the description of the current task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return a string of the description of the current task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Mark the current task as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string that is intended to be stored in the local database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string to be stored in the local database, the format is understandable"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *         for \u003ccode\u003eStorage\u003c/code\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"? | 1 | \" + description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"? | 0 | \" + description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string representation of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string representation of the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " * The basic type of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string that is intended to be stored in the local database."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string to be stored in the local database, the format is"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     *         understandable for \u003ccode\u003eStorage\u003c/code\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"T | 1 | \" + description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "            return \"T | 0 | \" + description + \" | \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * Return the string representation of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     * @return the string representation of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 32
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void toStringTest1() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        assertEquals(new Event(\"this event\", \"a typed non-formatted string of time\").toString()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                ,\"[E][✘] this event (at: a typed non-formatted string of time)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void toStringTest2() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        assertEquals(new Event(\"that event\", \"2020-10-10\").toString()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                ,\"[E][✘] that event (at: Oct 10 2020)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    public void toStringTest3() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        Event event \u003d new Event(\"new event\", \"2020-10-10\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "        assertEquals(event.toString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "                ,\"[E][\\u2713] new event (at: Oct 10 2020)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 27
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "hi!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "todo this task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "deadline this"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "deadline this /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "deadline this /by that"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "event this /by that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "event this /at"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "event this /at that"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "done x"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "done the first task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "delete first"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 24
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhXchD"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "zhXchD": 1,
      "-": 37
    }
  }
]
