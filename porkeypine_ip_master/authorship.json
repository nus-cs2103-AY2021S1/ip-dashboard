[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 15
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import main.java.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private enum Speaking {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        GREET(\"My name? You don\u0027t need to know that. \\nStop bothering me already... What do you want??\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        BYE(\"Finally... don\u0027t come back if you can possibly help it, please.\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        LIST(\"I wouldn\u0027t bother doing them if I were you.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        DONE(\"Oh goody... You actually accomplished something!!\\n  \"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ADD(\"You\u0027re making me feel tired... But if you insist:\\n  \"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        DELETE(\"Oh, getting lazy are we? I approve. I\u0027ve removed this:\\n  \"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        EXCEPTION(\"Jesus, what are you doing?\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        INVALIDINPUT(\"Invalid input, dummy.\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        INVALIDCOMMAND(\"I don\u0027t understand what you mean.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        private final String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        private Speaking(String line) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            this.line \u003d line;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String getFirstWord(String command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return command.contains(\" \") ? command.split(\" \")[0] : command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static void readCommands(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            command \u003d command.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // allow multiple termination commands"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Set\u003cString\u003e terminationCommands \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            terminationCommands.add(\"bye\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            terminationCommands.add(\"toodles\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            terminationCommands.add(\"farewell\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            terminationCommands.add(\"sayonara\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            while (!terminationCommands.contains(command)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        System.out.println(i + 1 + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    System.out.println(Speaking.LIST.line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                } else if (getFirstWord(command).equals(\"done\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        int taskNumber \u003d parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        tasks.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        System.out.println(Speaking.DONE.line + tasks.get(taskNumber));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        throw new DukeException(Speaking.INVALIDINPUT.line + \" Specify the task number correctly.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                } else if (getFirstWord(command).equals(\"todo\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        String toAdd \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        tasks.add(new Todo(toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        int length \u003d tasks.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        System.out.println(Speaking.ADD.line + tasks.get(length-1) +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                                \"\\nYou now have \" + length + (length \u003d\u003d 1 ? \" thing\" : \" things\") + \" in your list\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        throw new DukeException(Speaking.INVALIDINPUT.line + \" Did you put your task after a space?\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                } else if (getFirstWord(command).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        String wholeTask \u003d command.split(\" \",2)[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        String[] descAndDeadline \u003d wholeTask.split(\" /by \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        tasks.add(new Deadline(descAndDeadline[0], descAndDeadline[1]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        int length \u003d tasks.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        System.out.println(Speaking.ADD.line + tasks.get(length-1) +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                                \"\\nYou now have \" + length + (length \u003d\u003d 1 ? \" thing\" : \" things\") + \" in your list\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        throw new DukeException(Speaking.INVALIDINPUT.line + \" Did you put a task before and deadline after \u0027 /by \u0027?\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                } else if (getFirstWord(command).equals(\"event\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        String wholeTask \u003d command.split(\" \",2)[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        String[] descAndTime \u003d wholeTask.split(\" /at \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        tasks.add(new Event(descAndTime[0], descAndTime[1]));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        int length \u003d tasks.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        System.out.println(Speaking.ADD.line + tasks.get(length-1) +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                                \"\\nYou now have \" + length + (length \u003d\u003d 1 ? \" thing\" : \" things\") + \" in your list\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        throw new DukeException(Speaking.INVALIDINPUT.line + \" Did you put a task before and time after \u0027 /at \u0027?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                } else if (getFirstWord(command).equals(\"delete\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        int taskNumber \u003d parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        Task deletedTask \u003d tasks.get(taskNumber);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        int length \u003d tasks.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        System.out.println(Speaking.DELETE.line + deletedTask +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                                \"\\nYou now have \" + length + (length \u003d\u003d 1 ? \" thing\" : \" things\") + \" in your list\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        throw new DukeException(Speaking.INVALIDINPUT.line + \" Specify the task number correctly.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    throw new DukeException(Speaking.INVALIDCOMMAND.line);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                command \u003d command.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            System.out.println(Speaking.BYE.line);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            System.out.println(Speaking.EXCEPTION.line + \" \" + e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            readCommands(tasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        System.out.println(Speaking.GREET.line);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        readCommands(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 116,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DukeException(String e) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(e);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 15
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 23
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "blah"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 10
    }
  }
]
