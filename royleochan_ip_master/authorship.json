[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "royleochan": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "royleochan": 17
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the add command. The add command adds either a to-do, deadline or event task to the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The type of the task to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The description of the task to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String taskDesc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The date of the task to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String taskDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Add command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param type Type of the task to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public AddCommand(String type, String desc) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskType \u003d TaskType.valueOf(type);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDesc \u003d desc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDate \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Add command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param type Type of the task to be added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param date Date of the task to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public AddCommand(String type, String desc, String date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskType \u003d TaskType.valueOf(type);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDesc \u003d desc;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDate \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the add command. The execution involves adding the task to the task list,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * writing to the storage as well as printing the relevant UI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int taskNum \u003d lst.size() + 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                task \u003d new ToDoTask(taskDesc, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                storage.addLine(\"TODO | 0 | \" + taskDesc);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                result \u003d ui.showAddTask(task, taskNum);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                task \u003d new EventTask(taskDesc, false, taskDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                storage.addLine(\"EVENT | 0 | \" + taskDesc + \"| \" + taskDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                result \u003d ui.showAddTask(task, taskNum);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                task \u003d new DeadlineTask(taskDesc, false, taskDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                storage.addLine(\"DEADLINE | 0 | \" + taskDesc + \"| \" + taskDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                result \u003d ui.showAddTask(task, taskNum);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                assert false : taskType;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result \u003d ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assert !result.isEmpty() : \"Response should not be empty\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constants representing the different tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EVENT"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 110
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Abstraction of the command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the logic of the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public abstract String execute(TaskList lst, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 20
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the delete command. The delete command removes a task from the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Integer representing the task number to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Delete command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the delete command. The execution involves deleting the task from the task list,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * writing to the storage as well as printing the relevant UI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int lineNum \u003d taskNum - 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Task task \u003d lst.get(lineNum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            storage.deleteLine(lineNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            lst.remove(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result \u003d ui.showDeleteTask(task, taskNum);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result \u003d ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assert !result.isEmpty() : \"Response should not be empty\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 52
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the done command. The done command marks a task from the task list as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Integer representing the task number to be marked as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Done command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task to be marked as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the done command. The execution involves marking the task as done in the task list,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * writing to the storage as well as printing the relevant UI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        int lineNum \u003d taskNum - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d lst.get(lineNum);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            storage.modifyLineDone(lineNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return ui.showDoneTask(task, taskNum);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 49
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the exit command. The exit command stops execution of the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the exit command. The execution involves exiting the program and showing the goodbye message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 22
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the find command. The find command searches for tasks based on the query and lists them."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Query of the find command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String query;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Find command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param query Query for the find command to search for."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the find command. The execution involves finding tasks based on the query and listing out the search"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * results."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // uses filter method defined in TaskList class"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d lst.filter(query);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        result.append(ui.showFindStatement(filteredTasks.isEmpty()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int taskNum \u003d i + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Task task \u003d filteredTasks.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result.append(ui.showTask(task, taskNum));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assert result.length() !\u003d 0 : \"Response should not be empty\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 51
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the help command. The help command shows the user a list of commands Serina can help the user with and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * how to issue these commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the help command. The execution involves listing all the commands Serina can understand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return ui.showHelp();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 23
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the list command. The list command lists all the current tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the list command. The execution involves listing all the tasks in the task list and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * printing the relevant UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        result.append(ui.showListStatement());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (int i \u003d 0; i \u003c lst.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int taskNum \u003d i + 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Task task \u003d lst.get(i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result.append(ui.showTask(task, taskNum));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assert result.length() !\u003d 0 : \"Response should not be empty\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 32
    }
  },
  {
    "path": "src/main/java/command/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the tag command. Firstly, the tag command can create a new tag and tag it to an existing task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Secondly, if the task has an existing tag, the tag command replaces the existing tag with the newly created tag."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Lastly, the tag command can also delete a tag from a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Integer representing the task number to be marked as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Name of tag to be tagged to task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Boolean representing if the tag command should be one that deletes a tag."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final boolean isDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Tag command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task to be tagged."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public TagCommand(int taskNum, String tagName, boolean isDelete) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.isDelete \u003d isDelete;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the tag command. The execution involves tagging the task with the newly created tag, replacing an"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * existing tag, or deleting the tag from the task. It also involves writing to the storage and printing the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * relevant UI."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String response by the application after executing the command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        int lineNum \u003d taskNum - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d lst.get(lineNum);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Tag tag \u003d new Tag(tagName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        boolean isTagged \u003d task.isTagged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            task.removeTag();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            task.setTag(tag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            storage.modifyLineTag(lineNum, tag, isTagged, isDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return isDelete ? ui.showTagRemoved(task, taskNum) : ui.showTagAdded(task, taskNum);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 71
    }
  },
  {
    "path": "src/main/java/controller/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // clips the ImageView into a rounded frame to display the picture as a circle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Rectangle clip \u003d new Rectangle(displayPicture.getFitWidth(), displayPicture.getFitHeight());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        clip.setArcWidth(100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        clip.setArcHeight(100);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 66
    }
  },
  {
    "path": "src/main/java/controller/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Serina.jpg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Main Window UI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Bind action handlers to userInput and sendButton"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        userInput.setOnAction(event -\u003e handleUserInput());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        sendButton.setOnAction(event -\u003e handleUserInput());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Sets duke in MainWindow and creates initial startup dialogContainer displaying welcome message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param d Duke instance."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getUi().showWelcome(), dukeImage));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 82
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the Duke class. The Duke class serves as the main entry point into the chatbot application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * File directory where the text file is stored"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final String DIR \u003d \"data\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Path and name of the file to be created and loaded from."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/serina.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Ui to print responses to user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Storage where writing and reading of files is handled"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * List of tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Parser to parse and verify user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a Duke instance and loads user tasks. Creates new file if there is no existing file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            storage \u003d new Storage(FILE_PATH, DIR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            tasks \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(\"----- You have no tasks saved as of yet. Feel free to add tasks and I will track\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    + \" them for you\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(\"----- Something went wrong, please try again later\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The main chat bot application logic. Repeatedly reads in user commands and executes the commands until the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * user exits the application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param input User input command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return returns appropriate response after command execution."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Command c \u003d parser.parse(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result \u003d ui.showError(\"I can\u0027t help you with that request, try something else.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            result \u003d ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assert !result.isEmpty() : \"Response should not be empty\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Getter method to get the initialized Ui."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Ui"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "royleochan": 89
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the custom duke exception. This exception is thrown when specific errors relating to the application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * occurs."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a duke exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param message Error message that describes the error which occurred."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 16
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The main method to launch the chat bot application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 15
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import controller.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Initializes the main window and displays it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param stage The stage of the javaFX application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        MainWindow mw \u003d new MainWindow();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Scene scene \u003d new Scene(mw);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        mw.setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        mw.initialize();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 29
    }
  },
  {
    "path": "src/main/java/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.SplitOperation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Inherits from task and represents a task with a deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Deadline of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final LocalDateTime deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone State of whether the task is done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param deadline Deadline of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DeadlineTask(String description, boolean isDone, String deadline) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // formats deadline date and time to the correct format, for example: 2007-12-03T10:15:30"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        SplitOperation deadlineSplit \u003d (input) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return splitInput[0] + \"T\" + splitInput[1].substring(0, 2) + \":\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    + splitInput[1].substring(2, 4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadlineSplit.operate(deadline));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the deadline task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the deadline task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 45
    }
  },
  {
    "path": "src/main/java/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.SplitOperation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Inherits from task and represents a task with an event time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Event time of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final LocalDateTime eventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone      State of whether the task is done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param eventTime   Event time of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public EventTask(String description, boolean isDone, String eventTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // formats eventTime date and time to the correct format, for example: 2007-12-03T10:15:30"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        SplitOperation eventSplit \u003d (input) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return splitInput[0] + \"T\" + splitInput[1].substring(0, 2) + \":\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    + splitInput[1].substring(2, 4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.eventTime \u003d LocalDateTime.parse(eventSplit.operate(eventTime));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the event task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the event task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 45
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents a Task, providing implementation of a general task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * State of whether the task is done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Tag attached to the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    protected Tag tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone      State of whether the task is done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Sets the tag for the task and returns the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param tag Tag to be tagged to task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Return task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Task setTag(Tag tag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Remove the tag for the task and returns the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Return task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Task removeTag() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.tag \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns boolean indicating if task has been tagged."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return boolean indicating if task has beent tagged."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public boolean isTagged() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return tag !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a tick icon or cross icon based on done state of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Tick icon or cross icon."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return task description."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return task description."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String task \u003d \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.description + \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return task + tag.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 104
    }
  },
  {
    "path": "src/main/java/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Inherits from task and represents a basic to-do task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a to-do task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone      State of whether the task is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public ToDoTask(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the to-do task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the to-do task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 26
    }
  },
  {
    "path": "src/main/java/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.TagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The Parser class handles the validation of user input and creation of commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * List of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final TaskList lst;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Parser instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst List of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Parser(TaskList lst) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.lst \u003d lst;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Validates the user input command description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws DukeException If user did not give a command description, or gave it in an invalid format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void validateCommandDesc(String desc, Action type) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String result \u003d desc.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new DukeException(\"Command description cannot be empty\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (type \u003d\u003d Action.DEADLINE) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (isInvalidDeadlineTaskFormat(result)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                throw new DukeException(\"Be sure to include a task description and date in the correct format.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (type \u003d\u003d Action.EVENT) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (isInvalidEventTaskFormat(result)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                throw new DukeException(\"Be sure to include a task description and date in the correct format.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (type \u003d\u003d Action.TAG) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (isInvalidTagFormat(result)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                throw new DukeException(\"Be sure to add a tag in the correct format.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if result is in an invalid format to create an event task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param result String to test validity."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return true if result is in an invalid format to create an event task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private boolean isInvalidEventTaskFormat(String result) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return (!result.contains(\"/at\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                || result.split(\"/at\").length \u003c\u003d 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                || result.split(\"/at\")[0].isEmpty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if result is in an invalid format to create a deadline task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param result String to test validity."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return true if result is in an invalid format to create a deadline task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private boolean isInvalidDeadlineTaskFormat(String result) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return (!result.contains(\"/by\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                || result.split(\"/by\").length \u003c\u003d 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                || result.split(\"/by\")[0].isEmpty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns true if result is in an invalid format to create a deadline task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param result String to test validity."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return true if result is in an invalid format to create a deadline task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private boolean isInvalidTagFormat(String result) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] splitResult \u003d result.split(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return splitResult.length !\u003d 2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Validates the user input task number."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws DukeException If user gave an invalid task number."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void validateTaskNum(int taskNum) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (taskNum \u003e lst.size() || taskNum \u003c\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new DukeException(\"You have no such task. Please check your task number.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the correct command after parsing the user input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param command String representing the user input command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Correct command after parsing user input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws DukeException If user gave an invalid input command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Command resultantCommand \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // splits command string into action, command description (if applicable)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Action action \u003d Action.valueOf(splitCommand[0].toUpperCase());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String commandDesc \u003d splitCommand.length \u003e 1 ? splitCommand[1] : \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.validateCommandDesc(commandDesc, Action.TODO);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new AddCommand(\"TODO\", commandDesc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitValue;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String commandDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (action \u003d\u003d Action.DEADLINE) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                this.validateCommandDesc(commandDesc, Action.DEADLINE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                // splits command desc to get command date"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                splitValue \u003d commandDesc.split(\"/by \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                commandDate \u003d splitValue[1];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                resultantCommand \u003d new AddCommand(\"DEADLINE\", commandDesc, commandDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                this.validateCommandDesc(commandDesc, Action.EVENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                // splits command desc to get command date"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                splitValue \u003d commandDesc.split(\"/at \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                commandDate \u003d splitValue[1];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                resultantCommand \u003d new AddCommand(\"EVENT\", commandDesc, commandDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int taskNum \u003d Integer.parseInt(commandDesc);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.validateTaskNum(taskNum);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d action \u003d\u003d Action.DONE ? new DoneCommand(taskNum) : new DeleteCommand(taskNum);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.validateCommandDesc(commandDesc, Action.FIND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new FindCommand(commandDesc);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case TAG:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            validateCommandDesc(commandDesc, Action.TAG);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitCommandDesc \u003d commandDesc.split(\" \", 2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String tagName \u003d splitCommandDesc[1];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(splitCommandDesc[0]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.validateTaskNum(taskNumber);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            boolean isDelete \u003d tagName.equals(\"delete\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new TagCommand(taskNumber, tagName, isDelete);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            assert false : action;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return resultantCommand;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constants representing the different actions."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private enum Action {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        HELP,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TAG"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 192
    }
  },
  {
    "path": "src/main/java/util/SplitOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents a functional interface with a operate function to split a string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public interface SplitOperation {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns properly formatted string after splitting."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param input string"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Properly formatted string after splitting."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    String operate(String input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 13
    }
  },
  {
    "path": "src/main/java/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The storage class handles the logic of writing and reading files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * File object containing the text file data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Storage instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param filePath  Name of file to be located or created."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param directory Directory of file to be located or created."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If errors are encountered in reading or writing to file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Storage(String filePath, String directory) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        File dir \u003d new File(directory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // make the directory if doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!dir.isDirectory()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // create the file if it doesn\u0027t exist"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a list of tasks in their String format after reading the text data file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return List of Strings representing tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws FileNotFoundException If file to load data from is not found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public List\u003cString\u003e loadData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            lst.add(line);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Adds a line to the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param line Line to be added to the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void addLine(String line) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fw.write(line + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Deletes a line from the file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lineNum Line number to be deleted from the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void deleteLine(int lineNum) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Path path \u003d Path.of(file.getPath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fileContent.remove(lineNum);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Files.write(path, fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Modifies a line from the file, marking the task in the line as done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lineNum Line number to be modified from the file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void modifyLineDone(int lineNum) throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Path path \u003d Path.of(file.getPath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String line \u003d fileContent.get(lineNum);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String updatedLine;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // marking task as done"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        updatedLine \u003d line.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fileContent.set(lineNum, updatedLine);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Files.write(path, fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Modifies a line from the file, adding a tag to the task in the line, replacing the task\u0027s existing tag or"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * deleting the tag."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lineNum Line number to be modified from the file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param tag Tag to be added to the task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isTagged Boolean indicating if task is already tagged."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDelete Boolean indicating if tag should be deleted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void modifyLineTag(int lineNum, Tag tag, boolean isTagged, boolean isDelete) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Path path \u003d Path.of(file.getPath());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String line \u003d fileContent.get(lineNum);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        StringBuilder updatedLine;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] lineSplit \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!isTagged) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // add new tag to task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            updatedLine \u003d new StringBuilder(line + \" | \" + tag.getName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else if (isDelete) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // delete tag from task"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            updatedLine \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            for (int i \u003d 0; i \u003c lineSplit.length - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                if (i \u003d\u003d (lineSplit.length - 2)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    updatedLine.append(lineSplit[i]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    updatedLine.append(lineSplit[i]).append(\"|\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // replace existing tag"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            lineSplit[lineSplit.length - 1] \u003d tag.getName();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            updatedLine \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            for (int i \u003d 0; i \u003c lineSplit.length; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                if (i \u003d\u003d (lineSplit.length - 1)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    updatedLine.append(\" \").append(lineSplit[i]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    updatedLine.append(lineSplit[i]).append(\"|\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fileContent.set(lineNum, updatedLine.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Files.write(path, fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 147
    }
  },
  {
    "path": "src/main/java/util/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents a tag which can be tagged to tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Name of tag."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new tag with given name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param name Name of tag."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Tag(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns name of tag."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Name of tag."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns string representation of tag."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return String representation of tag."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"#\" + name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 39
    }
  },
  {
    "path": "src/main/java/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The TaskList class represents the list containing tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * List containing the different tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final List\u003cTask\u003e lst;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new TaskList of tasks based on an input list of strings obtained from Serina.txt."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The constructor parses these strings to create tasks before adding them to the TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param inputLst List containing tasks represented as strings. (Param can have 0 arguments)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public TaskList(List\u003cString\u003e ...inputLst) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String done \u003d \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (inputLst.length \u003e\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            for (String line : inputLst[0]) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String[] splitInput \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                TaskType taskType \u003d TaskType.valueOf(splitInput[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String taskDescription \u003d splitInput[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String taskDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                boolean hasTag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                Tag tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                boolean isDone \u003d splitInput[1].equals(done);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    hasTag \u003d splitInput.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    if (hasTag) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        tag \u003d new Tag(splitInput[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        this.add(new ToDoTask(taskDescription, isDone).setTag(tag));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        this.add(new ToDoTask(taskDescription, isDone));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    hasTag \u003d splitInput.length \u003d\u003d 5;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    taskDate \u003d splitInput[3];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    if (hasTag) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        tag \u003d new Tag(splitInput[4]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        this.add(new DeadlineTask(taskDescription, isDone, taskDate).setTag(tag));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        this.add(new DeadlineTask(taskDescription, isDone, taskDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    hasTag \u003d splitInput.length \u003d\u003d 5;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    taskDate \u003d splitInput[3];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    if (hasTag) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        tag \u003d new Tag(splitInput[4]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        this.add(new EventTask(taskDescription, isDone, taskDate).setTag(tag));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        this.add(new EventTask(taskDescription, isDone, taskDate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    assert false : taskType;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Adds a task to the TaskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        lst.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Removes a task from the TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void remove(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        lst.remove(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns number of tasks in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Number of tasks in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst.size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a task based on its index in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Task based on its index in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst.get(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a list of tasks based on the query."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param query String representing the search query."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Returns a list of tasks based on the query."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public List\u003cTask\u003e filter(String query) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst.stream().filter(task -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String taskDesc \u003d task.getDescription();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // check if any string in the task description matches the query string"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] wordsInTask \u003d taskDesc.split(\" \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return Arrays.asList(wordsInTask).contains(query);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constants representing the different tasks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EVENT"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 134
    }
  },
  {
    "path": "src/main/java/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The UI class deals with interactions with the user and prints responses accordingly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the welcome message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return returns the welcome message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"Serina here, how can I assist you? Enter \u0027help\u0027 to learn what I can do for you.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the help message with instructions on how to use Serina."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showHelp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"I am Serina, your personal toDo Manager. These are the commands you can issue me: \" + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"1. list\" + \" \u003d\u003e lists all your current tasks \" + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"3. todo {task description} \u003d\u003e creates a new to do task with given description \" + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"4. deadline {task description} /by {YYYY-MM-DD HHMM} \u003d\u003e creates a new task with given \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"description and deadline\" + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"5. event {task description} /at {YYYY-MM-DD HHMM} \u003d\u003e creates a new task with given \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"description and event time\" + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"6. done {task number} \u003d\u003e marks the given task as done\" + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"7. delete {task number} \u003d\u003e deletes the given task\" + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"8. tag {task number} {tag name} \u003d\u003e tag selected task with given tag name\" + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"9. tag {task number} delete \u003d\u003e delete tag from selected task\" + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"10. find {query} \u003d\u003e lists out tasks based on your query\" + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                + \"11. bye \u003d\u003e makes me go to sleep\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the string representation of a task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task Task to print"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return string representation of a task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return taskNum + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the add task acknowledgement string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return  Add task acknowledgement string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showAddTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"The following task has been added: \\n\" + this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the delete task acknowledgement string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return The delete task acknowledgement."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showDeleteTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"The following task has been deleted: \\n\" + this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the task mark as done acknowledgement string."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return The task mark as done acknowledgement string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showDoneTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"The following task has been marked as done: \\n\" + this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the list command statement string."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return List command statement."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showListStatement() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"Here are your current tasks: \\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the find command statement string."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return The find command statement string/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showFindStatement(boolean isEmpty) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return \"No tasks match your query, try searching for something else. \\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return \"Here are your search results: \\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the tag added to task acknowledgement string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return The task tag added to task acknowledgement string."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showTagAdded(Task task, int taskNum) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"The following task has been tagged: \\n\" + this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the tag removed from task acknowledgement string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return The task tag added to task acknowledgement string."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showTagRemoved(Task task, int taskNum) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"The following task\u0027s tag has been removed: \\n\" + this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the goodbye message string."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Goodbye message string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"Alright, call me again if you need me.\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return the error string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Return error string."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String showError(String err) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return err;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 142
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\"  maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         style\u003d\"-fx-background-color: #494B61;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cInsets top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" disable\u003d\"true\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "               preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "royleochan": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.paint.LinearGradient?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.paint.Stop?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx\" "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" opacity\u003d\"0.75\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "               prefWidth\u003d\"324.0\" promptText\u003d\"Enter Command\" style\u003d\"-fx-background-radius: 60;\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "               AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cFont size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003ccursor\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cCursor fx:constant\u003d\"DEFAULT\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/cursor\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #040725;\" text\u003d\"Send \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003ctextFill\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cLinearGradient\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003cstops\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cStop color\u003d\"#cd6464\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \u003cStop color\u003d\"WHITE\" offset\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            \u003c/stops\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/LinearGradient\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003c/textFill\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "              style\u003d\"-fx-background-color: #494B61#494B61;\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "royleochan": 42
    }
  },
  {
    "path": "src/test/java/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d new Task(\"Example task\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(task.isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testTickIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d new Task(\"Example task\", false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(task.getStatusIcon(), \"\\u2713\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testCrossIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d new Task(\"Example task\", false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(task.getStatusIcon(), \"\\u2718\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 28
    }
  },
  {
    "path": "src/test/java/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private TaskList lst \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Parser parser \u003d new Parser(lst);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e parser.parse(\"awdawdwaed\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForBlankCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForEmptyCommandDesc() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"TODO\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"Command description cannot be empty\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidDeadlineCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"deadline buy bread by let\u0027s say March 3\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"Be sure to include a task description and date in the correct format.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidEventCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"event buy bread by let\u0027s say March 3\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"Be sure to include a task description and date in the correct format.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidDoneCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"done 0\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"You have no such task. Please check your task number.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidDeleteCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"done -1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"You have no such task. Please check your task number.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 69
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo plan modules for exchange"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deadline buy birthday gift for mom /by 2020-09-25 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "event internship guidance webinar /at 2020-09-20 1830"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo find internship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "find internship"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "find blah"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deadline adwaedw"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "event awedawedwae"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "royleochan": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "royleochan": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "if"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  )"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "royleochan": 7
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/TaskList.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/Storage.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/Parser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/Ui.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/ToDoTask.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/EventTask.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/DeadlineTask.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/Task.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/duke/DukeException.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/DeleteCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/ListCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/Command.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/AddCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/HelpCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/FindCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/ExitCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/DoneCommand.java"
      }
    ],
    "authorContributionMap": {
      "royleochan": 18
    }
  }
]
