[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"andreatanky":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"    toolVersion \u003d \u00278.35\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"andreatanky":17,"-":44}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"ToDo | done | first"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":"Deadline | undone | second | 23/05/2020 12:30 PM"},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"ToDo | undone | third"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"Event | undone | forth | 12/04/2020 12:30 PM"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"ToDo | undone | fifth"}],"authorContributionMap":{"andreatanky":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":"This is a greenfield project specified under CS2103T Software Engineering."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"Duke is a bot that helps you keep track of your tasks at hand."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"## Features supported"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"1) **`todo`**: Add tasks of type todo to your list."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"2) **`deadline`**: Add tasks of type deadline to your list."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"3) **`event`**: Add tasks of type event to your list."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"4) **`done`**: Marks a task as done."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"5) **`delete`**: Deletes a task."},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"6) **`list`**: Displays a list of tasks."},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"7) **`find`**: Look up tasks with a keyword."},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"8) **`schedule`**: Look up tasks scheduled on a given date."},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"9) **`bye`**: Quits the application. "},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"## Usage of commands"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"### 1) `todo` "},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"- This command adds a task of type *todo* to your list."},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"- A description of your task (eg. do homework) is to be "},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"typed after your command."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"Usage format: "},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"`todo \u003cdescription\u003e`"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"Example of usage: "},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"`todo do homework`"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"```"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"Got it! I\u0027ve added this task:"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"[T][✘] do homework"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"Now you have 1 tasks in the list."},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"```"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"### 2) `deadline`"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"- This command adds a task of type *deadline* to your list."},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"- A description of your task and a formatted date and"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":" time of the task is required."},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":" Usage format: `deadline \u003cdescription\u003e /by dd/mm/yyyy HH:mm PM/AM`"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":" Example of usage: "},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":" `deadline submit homework /by 23/04/2020 12:00 PM`"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":" Expected outcome:"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":" Got it! I\u0027ve added this task:"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":" [D][✘] submit homework (by: 23 Apr 2020,"},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"12:00:00 PM)"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":" Now you have 2 tasks in the list."},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"### 3) `event`"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"- This command adds a task of type *event* to your list."},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"- A description of your task and a formatted date and"},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":" time of the task is required."},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":" Usage format: `event \u003cdescription\u003e /at dd/mm/yyyy HH:mm PM/AM`"},{"lineNumber":69,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":70,"author":{"gitId":"andreatanky"},"content":" Example of usage: "},{"lineNumber":71,"author":{"gitId":"andreatanky"},"content":" `event exam /at 23/09/2020 04:00 PM`"},{"lineNumber":72,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":73,"author":{"gitId":"andreatanky"},"content":" Expected outcome:"},{"lineNumber":74,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":75,"author":{"gitId":"andreatanky"},"content":" Got it! I\u0027ve added this task:"},{"lineNumber":76,"author":{"gitId":"andreatanky"},"content":" [E][✘] exam (at: 23 Sep 2020,"},{"lineNumber":77,"author":{"gitId":"andreatanky"},"content":"4:00:00 PM)"},{"lineNumber":78,"author":{"gitId":"andreatanky"},"content":" Now you have 3 tasks in the list."},{"lineNumber":79,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":80,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":81,"author":{"gitId":"andreatanky"},"content":"### 4) `done`"},{"lineNumber":82,"author":{"gitId":"andreatanky"},"content":"- This command marks a task as done."},{"lineNumber":83,"author":{"gitId":"andreatanky"},"content":"- The task index in the list is required."},{"lineNumber":84,"author":{"gitId":"andreatanky"},"content":"- The status of task will turn from [✘] to [✓]."},{"lineNumber":85,"author":{"gitId":"-"},"content":" "},{"lineNumber":86,"author":{"gitId":"andreatanky"},"content":" Usage format: `done \u003ctask index in list\u003e`"},{"lineNumber":87,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":88,"author":{"gitId":"andreatanky"},"content":" Example of usage: "},{"lineNumber":89,"author":{"gitId":"andreatanky"},"content":" `done 2`"},{"lineNumber":90,"author":{"gitId":"-"},"content":" "},{"lineNumber":91,"author":{"gitId":"andreatanky"},"content":" Expected outcome:"},{"lineNumber":92,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":93,"author":{"gitId":"andreatanky"},"content":" Great work! I\u0027ve marked this task as done:"},{"lineNumber":94,"author":{"gitId":"andreatanky"},"content":" [D][✓] submit homework (by: 23 Apr 2020,"},{"lineNumber":95,"author":{"gitId":"andreatanky"},"content":" 12:00:00 PM)"},{"lineNumber":96,"author":{"gitId":"andreatanky"},"content":" Keep the ticks going! ^_^"},{"lineNumber":97,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"andreatanky"},"content":"### 5) `delete`"},{"lineNumber":100,"author":{"gitId":"andreatanky"},"content":"- This command deletes a task from your list."},{"lineNumber":101,"author":{"gitId":"andreatanky"},"content":"- The task index in the list is required."},{"lineNumber":102,"author":{"gitId":"-"},"content":" "},{"lineNumber":103,"author":{"gitId":"andreatanky"},"content":" Usage format: `delete \u003ctask index in list\u003e`"},{"lineNumber":104,"author":{"gitId":"-"},"content":" "},{"lineNumber":105,"author":{"gitId":"-"},"content":" Example of usage: "},{"lineNumber":106,"author":{"gitId":"andreatanky"},"content":" `delete 1`"},{"lineNumber":107,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":108,"author":{"gitId":"andreatanky"},"content":" Expected outcome:"},{"lineNumber":109,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":110,"author":{"gitId":"andreatanky"},"content":" Noted! I\u0027ve deleted this task:"},{"lineNumber":111,"author":{"gitId":"andreatanky"},"content":" [T][✘] do homework"},{"lineNumber":112,"author":{"gitId":"andreatanky"},"content":" Now you have two tasks in the list."},{"lineNumber":113,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":114,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":115,"author":{"gitId":"andreatanky"},"content":"### 6) `list`"},{"lineNumber":116,"author":{"gitId":"andreatanky"},"content":"- This command displays your list of tasks."},{"lineNumber":117,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":118,"author":{"gitId":"andreatanky"},"content":" Usage format: "},{"lineNumber":119,"author":{"gitId":"andreatanky"},"content":" `list`"},{"lineNumber":120,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":121,"author":{"gitId":"andreatanky"},"content":" Example of usage:"},{"lineNumber":122,"author":{"gitId":"andreatanky"},"content":" `list`"},{"lineNumber":123,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":124,"author":{"gitId":"andreatanky"},"content":" Expected outcome:"},{"lineNumber":125,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":126,"author":{"gitId":"andreatanky"},"content":"Here are the tasks in your list:"},{"lineNumber":127,"author":{"gitId":"andreatanky"},"content":" 1.[D][✓] submit homework (by: 23 Apr 2020,"},{"lineNumber":128,"author":{"gitId":"andreatanky"},"content":" 12:00:00 PM)"},{"lineNumber":129,"author":{"gitId":"andreatanky"},"content":" 2.[E][✘] exam (at: 23 Sep 2020,"},{"lineNumber":130,"author":{"gitId":"andreatanky"},"content":" 4:00:00 PM)"},{"lineNumber":131,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":132,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":133,"author":{"gitId":"andreatanky"},"content":"### 7) `find`"},{"lineNumber":134,"author":{"gitId":"andreatanky"},"content":"- This command displays tasks that contains a given keyword."},{"lineNumber":135,"author":{"gitId":"andreatanky"},"content":"- A keyword is required."},{"lineNumber":136,"author":{"gitId":"andreatanky"},"content":"- The keyword can match the item only partially."},{"lineNumber":137,"author":{"gitId":"-"},"content":" "},{"lineNumber":138,"author":{"gitId":"andreatanky"},"content":" Usage format:"},{"lineNumber":139,"author":{"gitId":"andreatanky"},"content":" `find \u003ckeyword\u003e`"},{"lineNumber":140,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":141,"author":{"gitId":"andreatanky"},"content":" Examples of usage: "},{"lineNumber":142,"author":{"gitId":"andreatanky"},"content":" `find exam`"},{"lineNumber":143,"author":{"gitId":"andreatanky"},"content":" `find ex`"},{"lineNumber":144,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":145,"author":{"gitId":"andreatanky"},"content":" Expected outcome:"},{"lineNumber":146,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":147,"author":{"gitId":"andreatanky"},"content":"These are the tasks with your keyword:"},{"lineNumber":148,"author":{"gitId":"andreatanky"},"content":" 1.[E][✘] exam (at: 23 Sep 2020, 4:00:00 PM)"},{"lineNumber":149,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":150,"author":{"gitId":"andreatanky"},"content":"### 8) `schedule`"},{"lineNumber":151,"author":{"gitId":"andreatanky"},"content":"- This command displays tasks that are scheduled on the given date."},{"lineNumber":152,"author":{"gitId":"andreatanky"},"content":"- A date with the format **dd/mm/yyyy** is required."},{"lineNumber":153,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":154,"author":{"gitId":"andreatanky"},"content":" Usage format:"},{"lineNumber":155,"author":{"gitId":"andreatanky"},"content":" `schedule \u003cscheduled date\u003e`"},{"lineNumber":156,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":157,"author":{"gitId":"andreatanky"},"content":" Example of usage: "},{"lineNumber":158,"author":{"gitId":"andreatanky"},"content":" `schedule 23/09/2020`"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":" Expected outcome:"},{"lineNumber":161,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":162,"author":{"gitId":"andreatanky"},"content":"Here are the tasks scheduled for this date:"},{"lineNumber":163,"author":{"gitId":"andreatanky"},"content":" 1.[E][✘] exam (at: 23 Sep 2020, 4:00:00 PM)"},{"lineNumber":164,"author":{"gitId":"andreatanky"},"content":" ```"},{"lineNumber":165,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":166,"author":{"gitId":"andreatanky"},"content":"### 9) `bye`"},{"lineNumber":167,"author":{"gitId":"andreatanky"},"content":"- This command quits the application immediately."},{"lineNumber":168,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":169,"author":{"gitId":"andreatanky"},"content":" Usage format:"},{"lineNumber":170,"author":{"gitId":"andreatanky"},"content":" `bye`"},{"lineNumber":171,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":172,"author":{"gitId":"andreatanky"},"content":" Example of usage:"},{"lineNumber":173,"author":{"gitId":"andreatanky"},"content":" `bye`"},{"lineNumber":174,"author":{"gitId":"andreatanky"},"content":" "},{"lineNumber":175,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"andreatanky":156,"-":19}},{"path":"src/main/java/duke/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":" * Represents an add command for a task."},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":" * Adds a task to TaskList, depending on the type of task."},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    /** Enumeration of a command */"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    private final CommandEnum command;"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    /** User input as a String */"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    private final String userInput;"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"     * Constructs an AddCommand object with command and a user input."},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"     * @param command Enumeration of a command."},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as a String."},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    AddCommand(CommandEnum command, String userInput) {"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"        this.command \u003d command;"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"     * Adds a task to a task list."},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"     * Execution depends on the type of task."},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"     * @return Text when task is added."},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When input for addToDo, addDeadline and addEvent is invalid."},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"     * @throws IOException When input for addToDo is invalid."},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"    public String execute(TaskList taskList, Storage storage, Ui ui)"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"            throws DukeException, IOException {"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"        assert storage !\u003d null : \"Storage cannot be null\";"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"        assert ui !\u003d null : \"Ui cannot be null\";"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"        switch (command) {"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"        case TODO:"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"            return addToDo(taskList, storage, ui);"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"        case DEADLINE:"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"            return addDeadline(taskList, storage, ui);"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"        case EVENT:"},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"            return addEvent(taskList, storage, ui);"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"        default:"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"An invalid command is entered! :(\");"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"     * Returns user input."},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"     * @return User input as a String."},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"    public String getUserInput() {"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"        return this.userInput;"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"    private String addToDo(TaskList tasks, Storage storage, Ui ui) throws DukeException, IOException {"},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"        assert userInput !\u003d null : \"User input cannot be null\";"},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"        if (userInput.substring(4).isBlank()) {"},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"The description of todo cannot be empty!\");"},{"lineNumber":69,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"andreatanky"},"content":"        ToDo todo \u003d new ToDo(userInput.substring(5));"},{"lineNumber":71,"author":{"gitId":"andreatanky"},"content":"        tasks.addTask(todo);"},{"lineNumber":72,"author":{"gitId":"andreatanky"},"content":"        storage.writeToFile(tasks.getTasks());"},{"lineNumber":73,"author":{"gitId":"andreatanky"},"content":"        return ui.displayAddTodo(todo, tasks);"},{"lineNumber":74,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":76,"author":{"gitId":"andreatanky"},"content":"    private String addDeadline(TaskList tasks, Storage storage, Ui ui)"},{"lineNumber":77,"author":{"gitId":"andreatanky"},"content":"            throws DukeException {"},{"lineNumber":78,"author":{"gitId":"andreatanky"},"content":"        assert userInput !\u003d null : \"User input cannot be null\";"},{"lineNumber":79,"author":{"gitId":"andreatanky"},"content":"        String[] input \u003d userInput.split(\" \");"},{"lineNumber":80,"author":{"gitId":"andreatanky"},"content":"        if (!userInput.substring(8).isBlank()) {"},{"lineNumber":81,"author":{"gitId":"andreatanky"},"content":"            try {"},{"lineNumber":82,"author":{"gitId":"andreatanky"},"content":"                String deadlineInput \u003d String.join(\" \","},{"lineNumber":83,"author":{"gitId":"andreatanky"},"content":"                        Arrays.copyOfRange(input, 1, input.length));"},{"lineNumber":84,"author":{"gitId":"andreatanky"},"content":"                String description \u003d deadlineInput.split(\" /by \")[0];"},{"lineNumber":85,"author":{"gitId":"andreatanky"},"content":"                String date \u003d deadlineInput.split(\" /by \")[1];"},{"lineNumber":86,"author":{"gitId":"andreatanky"},"content":"                Deadline deadline \u003d new Deadline(description, date);"},{"lineNumber":87,"author":{"gitId":"andreatanky"},"content":"                tasks.addTask(deadline);"},{"lineNumber":88,"author":{"gitId":"andreatanky"},"content":"                storage.writeToFile(tasks.getTasks());"},{"lineNumber":89,"author":{"gitId":"andreatanky"},"content":"                return ui.displayAddDeadline(deadline, tasks);"},{"lineNumber":90,"author":{"gitId":"andreatanky"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":91,"author":{"gitId":"andreatanky"},"content":"                throw new DukeException("},{"lineNumber":92,"author":{"gitId":"andreatanky"},"content":"                        \"You have keyed in an invalid input for \u0027deadline\u0027!\");"},{"lineNumber":93,"author":{"gitId":"andreatanky"},"content":"            } catch (DateTimeParseException | IOException ex) {"},{"lineNumber":94,"author":{"gitId":"andreatanky"},"content":"                throw new DukeException("},{"lineNumber":95,"author":{"gitId":"andreatanky"},"content":"                        \"Please key in your deadline in the form:\\n\""},{"lineNumber":96,"author":{"gitId":"andreatanky"},"content":"                        + \" /by \u003cdd/MM/yyyy hh:mm AM/PM\u003e\");"},{"lineNumber":97,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"andreatanky"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"The description of deadline cannot be empty!\");"},{"lineNumber":100,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":103,"author":{"gitId":"andreatanky"},"content":"    private String addEvent(TaskList tasks, Storage storage, Ui ui)"},{"lineNumber":104,"author":{"gitId":"andreatanky"},"content":"            throws DukeException {"},{"lineNumber":105,"author":{"gitId":"andreatanky"},"content":"        assert userInput !\u003d null : \"User input cannot be null\";"},{"lineNumber":106,"author":{"gitId":"andreatanky"},"content":"        String[] input \u003d userInput.split(\" \");"},{"lineNumber":107,"author":{"gitId":"andreatanky"},"content":"        if (!userInput.substring(5).isBlank()) {"},{"lineNumber":108,"author":{"gitId":"andreatanky"},"content":"            try {"},{"lineNumber":109,"author":{"gitId":"andreatanky"},"content":"                String eventInput \u003d String.join(\" \","},{"lineNumber":110,"author":{"gitId":"andreatanky"},"content":"                        Arrays.copyOfRange(input, 1, input.length));"},{"lineNumber":111,"author":{"gitId":"andreatanky"},"content":"                String description \u003d eventInput.split(\" /at \")[0];"},{"lineNumber":112,"author":{"gitId":"andreatanky"},"content":"                String dateAndTime \u003d eventInput.split(\" /at \")[1];"},{"lineNumber":113,"author":{"gitId":"andreatanky"},"content":"                Event event \u003d new Event(description, dateAndTime);"},{"lineNumber":114,"author":{"gitId":"andreatanky"},"content":"                tasks.addTask(event);"},{"lineNumber":115,"author":{"gitId":"andreatanky"},"content":"                storage.writeToFile(tasks.getTasks());"},{"lineNumber":116,"author":{"gitId":"andreatanky"},"content":"                return ui.displayAddEvent(event, tasks);"},{"lineNumber":117,"author":{"gitId":"andreatanky"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":118,"author":{"gitId":"andreatanky"},"content":"                throw new DukeException(\"You have keyed in an \""},{"lineNumber":119,"author":{"gitId":"andreatanky"},"content":"                        + \"invalid input for \u0027event\u0027!\");"},{"lineNumber":120,"author":{"gitId":"andreatanky"},"content":"            } catch (DateTimeParseException | IOException ex) {"},{"lineNumber":121,"author":{"gitId":"andreatanky"},"content":"                throw new DukeException(\"Please key in your event \""},{"lineNumber":122,"author":{"gitId":"andreatanky"},"content":"                        + \"in the form:\\n /at \u003cdd/MM/yyyy hh:mm AM/PM\u003e\");"},{"lineNumber":123,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"andreatanky"},"content":"        } else {"},{"lineNumber":125,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"The description of an event cannot be empty!\");"},{"lineNumber":126,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":128}},{"path":"src/main/java/duke/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents a bye command."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class ByeCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"     * Terminates execution of bot."},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"     * @return Text when ByeCommand is executed."},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    public String execute(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"        assert storage !\u003d null : \"Storage cannot be null\";"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"        assert ui !\u003d null : \"Ui cannot be null\";"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"        return ui.displayBye();"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":22}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":" * Represents an abstract Command class."},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"     * Abstract method to be implemented by all subclasses of Command."},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When execution fails."},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"     * @throws IOException When execution fails."},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"    public abstract String execute(TaskList taskList, Storage storage, Ui ui)"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"            throws DukeException, IOException;"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":20}},{"path":"src/main/java/duke/CommandEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents enumerations for commands."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public enum CommandEnum {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"    BYE, LIST, DEADLINE, EVENT, TODO, DONE, DELETE, FIND, SCHEDULE"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":8}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":" * Represents a Deadline task."},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    /** Deadline of task in local date time */"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    protected LocalDateTime dateAndTime;"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of Deadline task with description and deadline."},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of task."},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"     * @param dateAndTime Deadline of task."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    public Deadline(String description, String dateAndTime) {"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"        super(description, Type.DEADLINE);"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"        this.dateAndTime \u003d LocalDateTime.parse(dateAndTime, DateTimeFormatter.ofPattern("},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"                \"dd/MM/yyyy hh:mm a\"));"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of Deadline task with description, deadline, status of completion."},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of task."},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"     * @param dateAndTime Deadline of task."},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"     * @param isDone Status of completion."},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"    public Deadline(String description, String dateAndTime, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"        super(description, Type.DEADLINE, isDone);"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        this.dateAndTime \u003d LocalDateTime.parse(dateAndTime, DateTimeFormatter.ofPattern("},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"                \"dd/MM/yyyy hh:mm a\"));"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"     * Returns deadline of task."},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"     * @return Deadline of task."},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"    public String getTime() {"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"        return this.dateAndTime.format("},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"     * Returns date of deadline."},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"     * @return Date of deadline as a String."},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"    public String getDate() {"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"        return this.dateAndTime.format("},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"     * Returns a string representation of a Deadline task."},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"     * @return String representation of a Deadline task."},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateAndTime.format("},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"                        DateTimeFormatter.ofLocalizedDateTime("},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"                                FormatStyle.MEDIUM)) + \")\";"},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":68}},{"path":"src/main/java/duke/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":" * Represents a delete command."},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"    /** User input as a String */"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    private final String userInput;"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"     * Constructs a DeleteCommand object with user input."},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as a String."},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"    DeleteCommand(String userInput) {"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"     * Executes the deleting of a task."},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     * @return Text when DeleteCommand is executed."},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When input for delete is invalid, respective error messages are printed."},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"     * @throws IOException When input for delete is invalid, respective error messages are printed."},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"    public String execute("},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"            TaskList taskList, Storage storage, Ui ui) throws DukeException, IOException {"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";"},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"        assert storage !\u003d null : \"Storage cannot be null\";"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"        assert ui !\u003d null : \"Ui cannot be null\";"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"        String deletedTask;"},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"        if (!userInput.substring(6).isBlank()) {"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"                String toDelete \u003d userInput.substring(7);"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"                int deletedTaskIndex \u003d Integer.parseInt(toDelete);"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"                if (deletedTaskIndex \u003c\u003d taskList.size() \u0026\u0026 deletedTaskIndex \u003e 0) {"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"                    deletedTask \u003d taskList.getTasks().get(deletedTaskIndex - 1).toString();"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"                    taskList.getTasks().remove(deletedTaskIndex - 1);"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"                } else {"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"                    throw new DukeException(\"The number keyed in is invalid!\");"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"                throw new DukeException(\"The number keyed in is invalid!\");"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"The description of a delete cannot be empty!\");"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"        storage.writeToFile(taskList.getTasks());"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"        return ui.displayDelete(deletedTask, taskList);"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":57}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":61}},{"path":"src/main/java/duke/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":" * Represents a done command for a task."},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"    /** User input as a String */"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    private final String userInput;"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of a DoneCommand object with user input."},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as a String."},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    DoneCommand(String userInput) {"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"     * Executes the marking of task as done."},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"     * @return Text when DoneCommand is executed."},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException If index \u003c 0 or index \u003e taskList.size()."},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"     * @throws IOException When writing to file fails."},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"    public String execute(TaskList taskList,"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"                        Storage storage, Ui ui) throws DukeException, IOException {"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        assert storage !\u003d null : \"Storage cannot be null\";"},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"        assert ui !\u003d null : \"Ui cannot be null\";"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"        int length \u003d userInput.length();"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"        int position \u003d Integer.parseInt(userInput.substring(5, length));"},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"        if (position \u003c\u003d taskList.getTasks().size() \u0026\u0026 position \u003e 0) {"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"            taskList.getTasks().get(position - 1).markAsDone();"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"You have keyed in an invalid number!\");"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"        storage.writeToFile(taskList.getTasks());"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"        return ui.displayDone(taskList.getTasks(), position);"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":46}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":" * Represents a Duke class."},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"    /** File path */"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    private static final String FILEPATH \u003d \"data/duke.txt\";"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    /** Storage for reading and writing all tasks */"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    /** Task list containing tasks */"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    /** Handles printing of user interaction */"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    private final Ui ui \u003d new Ui();"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"     * Constructs Duke and initialises storage and tasks."},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"    public Duke() {"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"            storage \u003d new Storage(FILEPATH);"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"            tasks \u003d new TaskList(storage.readFromFile());"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"        } catch (DukeException | IOException ex) {"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"            ui.showLoadingError();"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"            tasks \u003d new TaskList(tasks.getTasks());"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"     * Runs the Duke program."},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"    public void run() {"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"        ui.displayGreetings();"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"        while (ui.hasMoreInput()) {"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"                String userInput \u003d ui.readCommand();"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"                Command command \u003d Parser.parseCommands(userInput);"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"                command.execute(this.tasks, this.storage, this.ui);"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"            } catch (DukeException | IOException ex) {"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"                System.out.println(ex.getMessage());"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"    public Ui getUi() {"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"        return this.ui;"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"     * Executes the main program."},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"     * @param args Command line arguments."},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"    public static void main(String[] args) {"},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"        new Duke().run();"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"    String getResponse(String input) {"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"            Command command \u003d Parser.parseCommands(input);"},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"            if (input.equals(\"bye\")) {"},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"                System.exit(0);"},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"andreatanky"},"content":"            return command.execute(this.tasks, this.storage, this.ui);"},{"lineNumber":70,"author":{"gitId":"andreatanky"},"content":"        } catch (IOException | DukeException e) {"},{"lineNumber":71,"author":{"gitId":"andreatanky"},"content":"            return e.getMessage();"},{"lineNumber":72,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"andreatanky"},"content":"}"},{"lineNumber":75,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":76,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":77,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":78,"author":{"gitId":"andreatanky"},"content":""}],"authorContributionMap":{"andreatanky":77,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents Duke Exception class."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"     * Constructs an exception specific to Duke program."},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"     * @param errorMessage Error message of exception."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"        super(\"OOPS!!! :( \" + errorMessage);"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":15}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":" * Represents an Event task."},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    /** Event of task in local date time */"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    protected LocalDateTime dateAndTime;"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of an Event with description and date."},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of event."},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"     * @param dateAndTime Date and time of event."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    public Event(String description, String dateAndTime) {"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"        super(description, Type.EVENT);"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"        this.dateAndTime \u003d LocalDateTime.parse("},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"                dateAndTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of an Event with description, date and completion status."},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of event."},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"     * @param dateAndTime Date and time of event."},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"     * @param isDone Completion status."},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"    public Event(String description, String dateAndTime, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"        super(description, Type.EVENT, isDone);"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        this.dateAndTime \u003d LocalDateTime.parse("},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"                dateAndTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"     * Returns date and time of event."},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"     * @return Date and time of event as a String."},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"    public String getTime() {"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"        return this.dateAndTime.format("},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\"));"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"     * Returns date of event."},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"     * @return Date of event as a String."},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"    public String getDate() {"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"        return this.dateAndTime.format("},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"     * Returns string representation of an event."},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"     * @return String representation of an event."},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"        return \"[E]\" + super.toString()"},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"                + \" (at: \" + dateAndTime.format(DateTimeFormatter"},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"                                .ofLocalizedDateTime(FormatStyle.MEDIUM)) + \")\";"},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":68}},{"path":"src/main/java/duke/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents a find command for a task."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class FindCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /** User input as a string */"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"    private final String userInput;"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"     * Constructs a FindCommand object with user input."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as a string."},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    public FindCommand(String userInput) {"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"     * Executes finding tasks with keyword."},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"     * @return Text when FindCommand is executed."},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When invalid inputs are entered."},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"    public String execute("},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"            TaskList taskList, Storage storage,"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"            Ui ui) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"        assert storage !\u003d null : \"Storage cannot be null\";"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"        assert ui !\u003d null : \"Ui cannot be null\";"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        return ui.displayFindings(taskList.findTasks(userInput));"},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":36}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":9}},{"path":"src/main/java/duke/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents a list command for tasks."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class ListCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"     * Executes listing of tasks."},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"     * @return Text when ListCommand is executed."},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    public String execute(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"        assert storage !\u003d null : \"Storage cannot be null\";"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"        assert ui !\u003d null : \"Ui cannot be null\";"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"        return ui.displayTaskList(taskList);"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":22}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":" * A GUI for Duke using FXML."},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"            assert ap !\u003d null : \"Anchor pane cannot be null\";"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"            stage.setTitle(\"Duke! ٩(◕‿◕｡)۶ \");"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":" * Represents the controller and provides a layout."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDave.png\"));"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"    public MainWindow() {"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"        dialogContainer.getChildren()"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"                .addAll(DialogBox.getDukeDialog(duke.getUi().displayGreetings(), dukeImage));"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"        userInput.clear();"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":57}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents Parser class that parses input commands."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"     * Returns the command of user input as an enumeration."},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as a String."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"     * @return Command as enumeration."},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When an invalid input is keyed in."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    public static CommandEnum getCommand(String userInput) throws DukeException {"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"        CommandEnum command;"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"            String[] input \u003d userInput.split(\" \");"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"            String extractCommand \u003d input[0];"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"            command \u003d CommandEnum.valueOf(extractCommand.toUpperCase());"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"        } catch (NullPointerException | IllegalArgumentException ex) {"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException("},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"                    \"You have keyed in an invalid command or format!\\n\""},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"                            + \"(Valid commands: todo, deadline, event, list,\""},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"                            + \" delete, bye, done, find, schedule)\");"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"        return command;"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"     * Returns a specific command after parsing."},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as a String."},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"     * @return Specific input command."},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When invalid command or formatting is entered."},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"    public static Command parseCommands(String userInput) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"        CommandEnum command \u003d getCommand(userInput);"},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"        switch (command) {"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"        case BYE:"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"            return new ByeCommand();"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"        case LIST:"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"            return new ListCommand();"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"        case DONE:"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"            return new DoneCommand(userInput);"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"        case TODO:"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"            return new AddCommand(CommandEnum.TODO, userInput);"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"        case DEADLINE:"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"            return new AddCommand(CommandEnum.DEADLINE, userInput);"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"        case EVENT:"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"            return new AddCommand(CommandEnum.EVENT, userInput);"},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"        case DELETE:"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"            return new DeleteCommand(userInput);"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"        case FIND:"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"            return new FindCommand(userInput);"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"        case SCHEDULE:"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"            return new ScheduleCommand(userInput);"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"        default:"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException("},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"                    \"You have keyed in an invalid command!\\n\""},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"                            + \"(Valid commands: todo, deadline,\""},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"                            + \" event, list, delete, bye, done, find, schedule)\");"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":64}},{"path":"src/main/java/duke/ScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents a schedule command for a class."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class ScheduleCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /** User input as string */"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"    private final String userInput;"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of a ScheduleCommand object with user input."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as string."},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    public ScheduleCommand(String userInput) {"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"     * Executes the displaying of scheduled tasks."},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"     * @param taskList Task list containing tasks."},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"     * @param storage Storage for storing and retrieving all tasks."},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"     * @param ui Handles printing of user interaction."},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"     * @return Scheduled tasks."},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"        assert storage !\u003d null : \"Storage cannot be null\";"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"        assert ui !\u003d null : \"Ui cannot be null\";"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"        return ui.displayScheduledTasks(taskList.findScheduledTasks(userInput));"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":31}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":" * Represents Storage class for reading and writing tasks."},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    /** Path of file */"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    private final Path path;"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of storage object."},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"     * @param filePath Path of file."},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When there is an error in creating file."},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    public Storage(String filePath) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"        String dir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"        path \u003d Path.of(dir, filePath);"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"        File file \u003d new File(String.valueOf(path));"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"        if (!file.exists()) {"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"            file.createNewFile();"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"        } catch (IOException ex) {"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"Error in creating duke.txt\");"},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"     * Adds tasks to file."},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"     * @param tasks Tasks in an arraylist."},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"     * @throws IOException When writing to file fails."},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"        FileWriter fileWriter \u003d new FileWriter(path.toString());"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"        for (Task task : tasks) {"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"            String isDone \u003d task.isDone ? \"done\" : \"undone\";"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"            String description \u003d task.getTask();"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"            Type taskType \u003d task.getType(); //null"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"            String stringTaskType \u003d taskType.toString();"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"            switch (taskType) {"},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"            case TODO:"},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"                String writeTodo \u003d String.format(\"%s | %s | %s\\n\","},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"                        stringTaskType, isDone, description);"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"                fileWriter.write(writeTodo);"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"            case DEADLINE:"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"            case EVENT:"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"                String dateAndTime \u003d task.getTime();"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"                String write \u003d String.format(\"%s | %s | %s | %s\\n\", stringTaskType, isDone,"},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"                        description, dateAndTime);"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"                fileWriter.write(write);"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"                break;"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"            default:"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"                System.out.println(\"Write failed :(\");"},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"        fileWriter.close();"},{"lineNumber":69,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":71,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"andreatanky"},"content":"     * Retrieves all tasks when bot starts running."},{"lineNumber":73,"author":{"gitId":"andreatanky"},"content":"     * @return ArrayList of tasks."},{"lineNumber":74,"author":{"gitId":"andreatanky"},"content":"     * @throws FileNotFoundException When file with specified pathname does not exist."},{"lineNumber":75,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"andreatanky"},"content":"    public ArrayList\u003cTask\u003e readFromFile() throws FileNotFoundException {"},{"lineNumber":77,"author":{"gitId":"andreatanky"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"andreatanky"},"content":"        File file \u003d path.toFile();"},{"lineNumber":79,"author":{"gitId":"andreatanky"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":80,"author":{"gitId":"andreatanky"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":81,"author":{"gitId":"andreatanky"},"content":"            String input \u003d scanner.nextLine();"},{"lineNumber":82,"author":{"gitId":"andreatanky"},"content":"            String[] splitString \u003d input.split(\" \\\\| \");"},{"lineNumber":83,"author":{"gitId":"andreatanky"},"content":"            boolean isDone \u003d splitString[1].equals(\"done\");"},{"lineNumber":84,"author":{"gitId":"andreatanky"},"content":"            switch (splitString[0]) {"},{"lineNumber":85,"author":{"gitId":"andreatanky"},"content":"            case \"ToDo\":"},{"lineNumber":86,"author":{"gitId":"andreatanky"},"content":"                Task todo \u003d new ToDo(splitString[2], isDone);"},{"lineNumber":87,"author":{"gitId":"andreatanky"},"content":"                tasks.add(todo);"},{"lineNumber":88,"author":{"gitId":"andreatanky"},"content":"                break;"},{"lineNumber":89,"author":{"gitId":"andreatanky"},"content":"            case \"Deadline\":"},{"lineNumber":90,"author":{"gitId":"andreatanky"},"content":"                Task deadline \u003d new Deadline(splitString[2], splitString[3], isDone);"},{"lineNumber":91,"author":{"gitId":"andreatanky"},"content":"                tasks.add(deadline);"},{"lineNumber":92,"author":{"gitId":"andreatanky"},"content":"                break;"},{"lineNumber":93,"author":{"gitId":"andreatanky"},"content":"            case \"Event\":"},{"lineNumber":94,"author":{"gitId":"andreatanky"},"content":"                Task event \u003d new Event(splitString[2], splitString[3], isDone);"},{"lineNumber":95,"author":{"gitId":"andreatanky"},"content":"                tasks.add(event);"},{"lineNumber":96,"author":{"gitId":"andreatanky"},"content":"                break;"},{"lineNumber":97,"author":{"gitId":"andreatanky"},"content":"            default:"},{"lineNumber":98,"author":{"gitId":"andreatanky"},"content":"                System.out.println(\"Cannot read file! :(\");"},{"lineNumber":99,"author":{"gitId":"andreatanky"},"content":"                break;"},{"lineNumber":100,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"andreatanky"},"content":"        return tasks;"},{"lineNumber":103,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":104}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents a task."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /** Description of task */"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    /** Completion status */"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    /** Type of task */"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    protected Type type;"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of a task with its description."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of task."},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    public Task(String description) {"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"        this.isDone \u003d false;"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of a task with its description and type."},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of task."},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"     * @param type Type of task."},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"    public Task(String description, Type type) {"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"        this.description \u003d description;"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"        this.isDone \u003d false;"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"        this.type \u003d type;"},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of a task with its description, type and completion status."},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of task."},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"     * @param type Type of task."},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"     * @param isDone Completion status."},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"    public Task(String description, Type type, boolean isDone) {"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"        this.description \u003d description;"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"        this.type \u003d type;"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"     * Returns description of task."},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"     * @return Description of task."},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"    public String getTask() {"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"        return this.description;"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"     * Returns date and time in subclasses, when valid."},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"     * @return Date and time as a string."},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"    public String getTime() {"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"        return \"\";"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"     * Returns date of task."},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"     * @return Date of task."},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"andreatanky"},"content":"    public String getDate() {"},{"lineNumber":70,"author":{"gitId":"andreatanky"},"content":"        return \"\";"},{"lineNumber":71,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":73,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"andreatanky"},"content":"     * Returns status icon of task."},{"lineNumber":75,"author":{"gitId":"andreatanky"},"content":"     * @return Status icon of task."},{"lineNumber":76,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"andreatanky"},"content":"    public String getStatusIcon() {"},{"lineNumber":78,"author":{"gitId":"andreatanky"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":79,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":81,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"andreatanky"},"content":"     * Marks task as done."},{"lineNumber":83,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"andreatanky"},"content":"    public void markAsDone() {"},{"lineNumber":85,"author":{"gitId":"andreatanky"},"content":"        this.isDone \u003d true;"},{"lineNumber":86,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":88,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"andreatanky"},"content":"     * Returns type of task."},{"lineNumber":90,"author":{"gitId":"andreatanky"},"content":"     * @return Type of task."},{"lineNumber":91,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"andreatanky"},"content":"    public Type getType() {"},{"lineNumber":93,"author":{"gitId":"andreatanky"},"content":"        return this.type;"},{"lineNumber":94,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":96,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"andreatanky"},"content":"     * Returns string representation of task."},{"lineNumber":98,"author":{"gitId":"andreatanky"},"content":"     * @return String representation of task."},{"lineNumber":99,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"andreatanky"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitId":"andreatanky"},"content":"        return \"[\" + getStatusIcon() + \"]\" + \" \" + getTask();"},{"lineNumber":103,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":104}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":" * Represents taskList containing tasks."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    /** ArrayList of tasks */"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of TaskList with an arraylist of tasks."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"     * @param tasks ArrayList of tasks."},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"        assert tasks !\u003d null : \"Tasks cannot be null\";"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     * Adds tasks to TaskList."},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"     * @param task ArrayList of tasks."},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"    public void addTask(Task task) {"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"        assert task !\u003d null : \"Task cannot be null\";"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"        this.tasks.add(task);"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"     * Returns an Arraylist of tasks with keyword."},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as string."},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"     * @return Arraylist of tasks with keyword."},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"    public ArrayList\u003cTask\u003e findTasks(String userInput) {"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"        String keyword \u003d userInput.substring(5);"},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"        ArrayList\u003cTask\u003e findings;"},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"        findings \u003d tasks.stream().filter(x -\u003e x.description"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"                .contains(keyword)).collect(Collectors.toCollection(ArrayList::new));"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"        return findings;"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"     * Returns an ArrayList of tasks in schedule."},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"     * @param userInput User input as string."},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"     * @return Arraylist of tasks in schedule."},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"    public ArrayList\u003cTask\u003e findScheduledTasks(String userInput) throws DukeException {"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"            ArrayList\u003cTask\u003e scheduledTasks;"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"            String dateAsString \u003d userInput.substring(9);"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"            LocalDate dateOfScheduledTask \u003d LocalDate.parse(dateAsString,"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"            scheduledTasks \u003d tasks.stream().filter(x -\u003e x.getDate().equals(dateAsString)).collect("},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"                    Collectors.toCollection(ArrayList::new));"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"            return scheduledTasks;"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"        } catch (StringIndexOutOfBoundsException ex) {"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"Scheduled date cannot be empty! :(\");"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"You have keyed in an invalid format for date!\\n\""},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"                    + \"valid format: dd/mm/yyyy\");"},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":70,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"andreatanky"},"content":"     * Returns number of tasks in task list."},{"lineNumber":72,"author":{"gitId":"andreatanky"},"content":"     * @return Number of tasks in task list."},{"lineNumber":73,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"andreatanky"},"content":"    public int size() {"},{"lineNumber":75,"author":{"gitId":"andreatanky"},"content":"        return this.tasks.size();"},{"lineNumber":76,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":78,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"andreatanky"},"content":"     * Returns arraylist of tasks."},{"lineNumber":80,"author":{"gitId":"andreatanky"},"content":"     * @return ArrayList of tasks."},{"lineNumber":81,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"andreatanky"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":83,"author":{"gitId":"andreatanky"},"content":"        return this.tasks;"},{"lineNumber":84,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":85}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents a ToDo task."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public class ToDo extends Task { //added"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of a ToDo object with description."},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of task."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    public ToDo(String description) {"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"        super(description, Type.TODO);"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new instance of a ToDo object with description and completion status."},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"     * @param description Description of task."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"     * @param isDone Completion status."},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"        super(description, Type.TODO, isDone);"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"     * Returns string representation of ToDo task."},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     * @return String representation of ToDo task."},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":33}},{"path":"src/main/java/duke/Type.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":" * Represents Enumeration class for types of commands."},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"public enum Type {"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"    TODO {"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"        /**"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"         * Returns string representation of ToDo task."},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"         * @return String representation of ToDo task."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"         */"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"        public String toString() {"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"            return \"ToDo\";"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    }, DEADLINE {"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"        /**"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"         * Returns string representation of Deadline task."},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"         * @return String representation of Deadline task."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"         */"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"        public String toString() {"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"            return \"Deadline\";"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":"    }, EVENT {"},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"        /**"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"         * Returns string representation of Event task."},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"         * @return String representation of Event task."},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"         */"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"        public String toString() {"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"            return \"Event\";"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":32}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import java.util.stream.IntStream;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":" * Represents user interface class."},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    /** Bot\u0027s reply prefix */"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    private static final String bot \u003d \"Dave says:\";"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    /** Scanner object */"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    private final Scanner scanner;"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"     * Constructs a new Ui object."},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    Ui() {"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":24,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"andreatanky"},"content":"     * Returns greetings from bot."},{"lineNumber":26,"author":{"gitId":"andreatanky"},"content":"     * @return Greetings."},{"lineNumber":27,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"andreatanky"},"content":"    public String displayGreetings() {"},{"lineNumber":29,"author":{"gitId":"andreatanky"},"content":"        return \"Greetings from me, Dave!\\n\" + \"How can I help you? ^_^\\n\";"},{"lineNumber":30,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":32,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"andreatanky"},"content":"     * Returns prefix of reply."},{"lineNumber":34,"author":{"gitId":"andreatanky"},"content":"     * @return String of prefix of reply."},{"lineNumber":35,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"andreatanky"},"content":"    public static String getBot() {"},{"lineNumber":37,"author":{"gitId":"andreatanky"},"content":"        return Ui.bot;"},{"lineNumber":38,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":40,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"andreatanky"},"content":"     * Returns bye text from bot."},{"lineNumber":42,"author":{"gitId":"andreatanky"},"content":"     * @return Bye text."},{"lineNumber":43,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"andreatanky"},"content":"    public String displayBye() {"},{"lineNumber":45,"author":{"gitId":"andreatanky"},"content":"        return \"Goodbye! Hope to see you again soon! ^_^\";"},{"lineNumber":46,"author":{"gitId":"andreatanky"},"content":"        //System.exit(0);"},{"lineNumber":47,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":49,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"andreatanky"},"content":"     * Returns tasks in task list."},{"lineNumber":51,"author":{"gitId":"andreatanky"},"content":"     * @param tasks TaskList containing tasks."},{"lineNumber":52,"author":{"gitId":"andreatanky"},"content":"     * @return Task list."},{"lineNumber":53,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"andreatanky"},"content":"    public String displayTaskList(TaskList tasks) {"},{"lineNumber":55,"author":{"gitId":"andreatanky"},"content":"        if (tasks.getTasks().isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"andreatanky"},"content":"            return \"There are no tasks in your list yet! \u003e_\u003c \\n\";"},{"lineNumber":57,"author":{"gitId":"andreatanky"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"andreatanky"},"content":"            StringBuilder list \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitId":"andreatanky"},"content":"            list.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":60,"author":{"gitId":"andreatanky"},"content":"            IntStream.range(0, tasks.size()).forEach(i -\u003e"},{"lineNumber":61,"author":{"gitId":"andreatanky"},"content":"                    list.append(String.format(\"%d. %s\\n\", i + 1, tasks.getTasks().get(i))));"},{"lineNumber":62,"author":{"gitId":"andreatanky"},"content":"            return list.toString();"},{"lineNumber":63,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":66,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"andreatanky"},"content":"     * Returns scheduled tasks."},{"lineNumber":68,"author":{"gitId":"andreatanky"},"content":"     * @param scheduledTasks TaskList containing scheduled tasks."},{"lineNumber":69,"author":{"gitId":"andreatanky"},"content":"     * @return Scheduled Tasks."},{"lineNumber":70,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"andreatanky"},"content":"    public String displayScheduledTasks(ArrayList\u003cTask\u003e scheduledTasks) {"},{"lineNumber":72,"author":{"gitId":"andreatanky"},"content":"        if (scheduledTasks.isEmpty()) {"},{"lineNumber":73,"author":{"gitId":"andreatanky"},"content":"            return \"There are no tasks scheduled for this date! \u003e_\u003c\";"},{"lineNumber":74,"author":{"gitId":"andreatanky"},"content":"        } else {"},{"lineNumber":75,"author":{"gitId":"andreatanky"},"content":"            StringBuilder list \u003d new StringBuilder();"},{"lineNumber":76,"author":{"gitId":"andreatanky"},"content":"            list.append(\"Here are the tasks scheduled for this date:\\n\");"},{"lineNumber":77,"author":{"gitId":"andreatanky"},"content":"            IntStream.range(0, scheduledTasks.size()).forEach(i -\u003e"},{"lineNumber":78,"author":{"gitId":"andreatanky"},"content":"                    list.append(String.format(\"%d. %s\\n\", i + 1, scheduledTasks"},{"lineNumber":79,"author":{"gitId":"andreatanky"},"content":"                    .get(i))));"},{"lineNumber":80,"author":{"gitId":"andreatanky"},"content":"            return list.toString();"},{"lineNumber":81,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":84,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"andreatanky"},"content":"     * Returns task to be deleted and displayed text when deleted."},{"lineNumber":86,"author":{"gitId":"andreatanky"},"content":"     * @param deletedTask Task deleted."},{"lineNumber":87,"author":{"gitId":"andreatanky"},"content":"     * @param taskList User\u0027s tasks."},{"lineNumber":88,"author":{"gitId":"andreatanky"},"content":"     * @return Text when a task is deleted."},{"lineNumber":89,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"andreatanky"},"content":"    public String displayDelete(String deletedTask, TaskList taskList) {"},{"lineNumber":91,"author":{"gitId":"andreatanky"},"content":"        return \"Noted! I\u0027ve deleted this task:\\n\" + deletedTask"},{"lineNumber":92,"author":{"gitId":"andreatanky"},"content":"                    + \"\\nNow you have \" + taskList.size()"},{"lineNumber":93,"author":{"gitId":"andreatanky"},"content":"                    + \" tasks in the list.\";"},{"lineNumber":94,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":96,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"andreatanky"},"content":"     * Returns and marks task as done."},{"lineNumber":98,"author":{"gitId":"andreatanky"},"content":"     * @param tasks Arraylist of tasks."},{"lineNumber":99,"author":{"gitId":"andreatanky"},"content":"     * @param pos Index in arraylist."},{"lineNumber":100,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"andreatanky"},"content":"    public String displayDone(ArrayList\u003cTask\u003e tasks, int pos) {"},{"lineNumber":102,"author":{"gitId":"andreatanky"},"content":"        String taskMarkedAsDone \u003d tasks.get(pos - 1).toString();"},{"lineNumber":103,"author":{"gitId":"andreatanky"},"content":"        return \"Great work! I\u0027ve marked this task as done:\\n\""},{"lineNumber":104,"author":{"gitId":"andreatanky"},"content":"                + taskMarkedAsDone"},{"lineNumber":105,"author":{"gitId":"andreatanky"},"content":"                + \"\\nKeep the ticks going! ^_^\";"},{"lineNumber":106,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":108,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"andreatanky"},"content":"     * Prints tasks with the keyword."},{"lineNumber":110,"author":{"gitId":"andreatanky"},"content":"     * @param findings Arraylist of tasks with the keyword."},{"lineNumber":111,"author":{"gitId":"andreatanky"},"content":"     * @return Tasks that contains keyword."},{"lineNumber":112,"author":{"gitId":"andreatanky"},"content":"     * @throws DukeException When findings is empty."},{"lineNumber":113,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"andreatanky"},"content":"    public String displayFindings(ArrayList\u003cTask\u003e findings) throws DukeException {"},{"lineNumber":115,"author":{"gitId":"andreatanky"},"content":"        StringBuilder list \u003d new StringBuilder();"},{"lineNumber":116,"author":{"gitId":"andreatanky"},"content":"        if (findings.isEmpty()) {"},{"lineNumber":117,"author":{"gitId":"andreatanky"},"content":"            throw new DukeException(\"There are no such tasks with this keyword! :(\");"},{"lineNumber":118,"author":{"gitId":"andreatanky"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"andreatanky"},"content":"            list.append(\"These are the tasks with your keyword:\\n\");"},{"lineNumber":120,"author":{"gitId":"andreatanky"},"content":"            int i \u003d 0;"},{"lineNumber":121,"author":{"gitId":"andreatanky"},"content":"            for (Task task : findings) {"},{"lineNumber":122,"author":{"gitId":"andreatanky"},"content":"                list.append(String.format(\"%d.%s\\n\", i + 1, task));"},{"lineNumber":123,"author":{"gitId":"andreatanky"},"content":"                i++;"},{"lineNumber":124,"author":{"gitId":"andreatanky"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"andreatanky"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"andreatanky"},"content":"        return list.toString();"},{"lineNumber":127,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":129,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"andreatanky"},"content":"     * Returns text when ToDo task is added."},{"lineNumber":131,"author":{"gitId":"andreatanky"},"content":"     * @param todoTask Task to be done."},{"lineNumber":132,"author":{"gitId":"andreatanky"},"content":"     * @param tasks TaskList to add task to."},{"lineNumber":133,"author":{"gitId":"andreatanky"},"content":"     * @return Text when todo task is added."},{"lineNumber":134,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"andreatanky"},"content":"    public String displayAddTodo(ToDo todoTask, TaskList tasks) {"},{"lineNumber":136,"author":{"gitId":"andreatanky"},"content":"        return \"Got it! I\u0027ve added this task:\\n\" + todoTask.toString()"},{"lineNumber":137,"author":{"gitId":"andreatanky"},"content":"                + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":138,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":140,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"andreatanky"},"content":"     * Returns text when Event task is added."},{"lineNumber":142,"author":{"gitId":"andreatanky"},"content":"     * @param eventTask Event task."},{"lineNumber":143,"author":{"gitId":"andreatanky"},"content":"     * @param tasks TaskList to add task to."},{"lineNumber":144,"author":{"gitId":"andreatanky"},"content":"     * @return Text when event task is added."},{"lineNumber":145,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"andreatanky"},"content":"    public String displayAddEvent(Event eventTask, TaskList tasks) {"},{"lineNumber":147,"author":{"gitId":"andreatanky"},"content":"        return \"Got it! I\u0027ve added this task:\\n\" + eventTask.toString()"},{"lineNumber":148,"author":{"gitId":"andreatanky"},"content":"                + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":149,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":151,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"andreatanky"},"content":"     * Returns text when Deadline task is added."},{"lineNumber":153,"author":{"gitId":"andreatanky"},"content":"     * @param deadlineTask Deadline task."},{"lineNumber":154,"author":{"gitId":"andreatanky"},"content":"     * @param tasks TaskList to add task to."},{"lineNumber":155,"author":{"gitId":"andreatanky"},"content":"     * @return Text when deadline task is added."},{"lineNumber":156,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"andreatanky"},"content":"    public String displayAddDeadline(Deadline deadlineTask, TaskList tasks) {"},{"lineNumber":158,"author":{"gitId":"andreatanky"},"content":"        return \"Got it! I\u0027ve added this task:\\n\" + deadlineTask.toString()"},{"lineNumber":159,"author":{"gitId":"andreatanky"},"content":"            + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":160,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":162,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"andreatanky"},"content":"     * Returns user inputs."},{"lineNumber":164,"author":{"gitId":"andreatanky"},"content":"     * @return User input."},{"lineNumber":165,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"andreatanky"},"content":"    public String readCommand() {"},{"lineNumber":167,"author":{"gitId":"andreatanky"},"content":"        return scanner.nextLine();"},{"lineNumber":168,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":170,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"andreatanky"},"content":"     * Checks if there is more user input."},{"lineNumber":172,"author":{"gitId":"andreatanky"},"content":"     * @return True if there is more input, if not false."},{"lineNumber":173,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"andreatanky"},"content":"    public boolean hasMoreInput() {"},{"lineNumber":175,"author":{"gitId":"andreatanky"},"content":"        return scanner.hasNext();"},{"lineNumber":176,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":178,"author":{"gitId":"andreatanky"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"andreatanky"},"content":"     * Prints loading of tasks error."},{"lineNumber":180,"author":{"gitId":"andreatanky"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"andreatanky"},"content":"    public void showLoadingError() {"},{"lineNumber":182,"author":{"gitId":"andreatanky"},"content":"        System.out.println(\"I am unable to load your tasks! D:\");"},{"lineNumber":183,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":184}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"        \u003cLabel fx:id\u003d\"dialog\" graphicTextGap\u003d\"10.0\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"WHITE\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" style\u003d\"-fx-border-color: #A78195; -fx-background-color: #A78195; -fx-border-radius: 10px; -fx-background-radius: 10px; -fx-padding: 5px;\"\u003e"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"        \u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"andreatanky":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"            fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"45.0\" prefWidth\u003d\"360.0\""},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"               AnchorPane.bottomAnchor\u003d\"1.0\" style\u003d\"-fx-text-fill: #FFFFFF; -fx-background-color: #A78195\"/\u003e"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"            prefHeight\u003d\"42.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" style\u003d\"-fx-background-color: #876D7B;\" /\u003e"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"                vvalue\u003d\"1.0\" style\u003d\"-fx-background-color: #32232B\"\u003e"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #32232B;\" /\u003e"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"andreatanky":20}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":" * Tests parseCommands method."},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    public void parseCommands_getCommand_success() {"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"        AddCommand c \u003d new AddCommand(CommandEnum.TODO, \"todo sleep\");"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"        assertEquals(c.getUserInput(), \"todo sleep\");"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":16}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":" * Tests size of task list."},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"public class TaskListTest {"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"    public void size_getIntSize_success() {"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"        ArrayList\u003cTask\u003e aList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"        TaskList taskList \u003d new TaskList(aList);"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"        taskList.getTasks().add(new Task(\"swimming\"));"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"        taskList.getTasks().add(new Task(\"read book\"));"},{"lineNumber":19,"author":{"gitId":"andreatanky"},"content":"        assertEquals(2, taskList.size());"},{"lineNumber":20,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":21}},{"path":"src/test/java/duke/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"andreatanky"},"content":" * Tests getTask method."},{"lineNumber":9,"author":{"gitId":"andreatanky"},"content":" */"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"public class TaskTest {"},{"lineNumber":11,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":12,"author":{"gitId":"andreatanky"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"andreatanky"},"content":"    public void getTask_getStringDescription_success() {"},{"lineNumber":14,"author":{"gitId":"andreatanky"},"content":"        Task task \u003d new Task(\"Borrow book\");"},{"lineNumber":15,"author":{"gitId":"andreatanky"},"content":"        assertEquals(\"Borrow book\", task.getTask());"},{"lineNumber":16,"author":{"gitId":"andreatanky"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":""},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"}"}],"authorContributionMap":{"andreatanky":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"andreatanky"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"andreatanky"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"andreatanky"},"content":"list"},{"lineNumber":5,"author":{"gitId":"andreatanky"},"content":"done 3"},{"lineNumber":6,"author":{"gitId":"andreatanky"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"andreatanky"},"content":"list"}],"authorContributionMap":{"andreatanky":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"andreatanky"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"andreatanky"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"andreatanky":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"andreatanky"},"content":"export LC_ALL\u003den_GB.UTF-8"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":6,"author":{"gitId":"-"},"content":"then"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":8,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":11,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"then"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":14,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":17,"author":{"gitId":"andreatanky"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":18,"author":{"gitId":"-"},"content":"then"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":27,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":31,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"andreatanky":2,"-":37}}]
