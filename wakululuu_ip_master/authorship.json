[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    mainClassName \u003d \"botbot.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    archiveBaseName \u003d \"botbot\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 18,
      "-": 43
    }
  },
  {
    "path": "src/main/java/botbot/Botbot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the chatbot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Botbot {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a chatbot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param filePath Filepath where data of the chat is stored."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Botbot(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the response after the execution of the user\u0027s command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return c.execute(storage, tasks, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 33,
      "-": 1
    }
  },
  {
    "path": "src/main/java/botbot/BotbotDateTimeFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a DateTime formatter for Botbot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class BotbotDateTimeFormatter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String FORMAT_DATE \u003d \"d MMM yyyy\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String FORMAT_DATE_HOUR \u003d FORMAT_DATE + \" ha\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String FORMAT_DATE_HOUR_MINUTES \u003d FORMAT_DATE + \" h.mma\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final double NO_TIME_FLAG \u003d Math.PI * Math.pow(10, 13);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final int NO_TIME_FLAG_HOUR \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final int NO_TIME_FLAG_MINUTE \u003d 14;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final int NO_TIME_FLAG_SECOND \u003d 15;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final int NO_TIME_FLAG_NANO \u003d 926535898;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String NO_TIME_FLAG_STR \u003d String.format(\" 0%.0f\", NO_TIME_FLAG);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Converts a LocalDateTime object to a string that will be shown to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param dateTime LocalDateTime object to be converted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Converted string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static String convertDateTimeToStr(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String format;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if ((dateTime.getHour() \u003d\u003d NO_TIME_FLAG_HOUR) \u0026\u0026 (dateTime.getMinute() \u003d\u003d NO_TIME_FLAG_MINUTE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 (dateTime.getSecond() \u003d\u003d NO_TIME_FLAG_SECOND)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u0026\u0026 (dateTime.getNano() \u003d\u003d NO_TIME_FLAG_NANO)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            format \u003d FORMAT_DATE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (dateTime.getMinute() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            format \u003d FORMAT_DATE_HOUR;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            format \u003d FORMAT_DATE_HOUR_MINUTES;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return dateTime.format(DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 40
    }
  },
  {
    "path": "src/main/java/botbot/CommandValidator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.EventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.InvalidCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.TodoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Checker for the validity of user input as Botbot commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class CommandValidator {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_TASK_ID \u003d \"invalid task number!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String ERROR_MESSAGE_NO_SUCH_COMMAND \u003d \"sorry, I don\u0027t know what that means!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY \u003d \"%s cannot be empty!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_DESCRIPTION \u003d String.format(ERROR_MESSAGE_EMPTY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"the description of a task\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_EDIT \u003d String.format(ERROR_MESSAGE_EMPTY,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"the content to be edited\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_SEARCH \u003d String.format(ERROR_MESSAGE_EMPTY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"the search keyword\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_TASK_ID \u003d String.format(ERROR_MESSAGE_EMPTY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"the task number to be %s\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_TASK_ID_DELETE \u003d String.format(ERROR_MESSAGE_EMPTY_TASK_ID,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"deleted\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_TASK_ID_DONE \u003d String.format(ERROR_MESSAGE_EMPTY_TASK_ID,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"marked as done\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_EMPTY_TASK_ID_EDIT \u003d String.format(ERROR_MESSAGE_EMPTY_TASK_ID,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"edited\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_FORMAT \u003d \"invalid %s format! please follow \u0027%s\u0027!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_FORMAT_DATETIME \u003d String.format(ERROR_MESSAGE_INVALID_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"date-time\", \"\u003cD-M-YYYY HHmm\u003e (eg. 17-3-2020 0945 or 3-4-2020 with no time specified)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_FORMAT_DEADLINE \u003d String.format(ERROR_MESSAGE_INVALID_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"command\", Deadline.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_FORMAT_EDIT \u003d String.format(ERROR_MESSAGE_INVALID_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"command\", EditCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_INVALID_FORMAT_EVENT \u003d String.format(ERROR_MESSAGE_INVALID_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"command\", Event.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Pattern FORMAT_ARG_ADD_DEADLINE \u003d Pattern.compile(\"(?\u003cdescription\u003e.*) /by (?\u003cby\u003e.*)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Pattern FORMAT_ARG_ADD_EVENT \u003d Pattern.compile(\"(?\u003cdescription\u003e.*) /at (?\u003cat\u003e.*)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Pattern FORMAT_ARGS_EDIT \u003d Pattern.compile(\"(?\u003cid\u003e\\\\d+)(?\u003cdescription\u003e.+?)?\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        + \"(\\\\h+/at\\\\h*(?\u003cat\u003e.*?))?(\\\\h+/by\\\\h*(?\u003cby\u003e.*))?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Attempts to create a DeadlineCommand."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Arguments to create deadline."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return EventCommand if arguments given are valid, InvalidCommand otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Command tryAddDeadline(String args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Matcher matcher \u003d FORMAT_ARG_ADD_DEADLINE.matcher(args);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_FORMAT_DEADLINE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String description \u003d matcher.group(\"description\").trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String byStr \u003d matcher.group(\"by\").trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            LocalDateTime by \u003d Parser.parseDateTime(byStr);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new DeadlineCommand(description, by);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_FORMAT_DATETIME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Attempts to create an EventCommand."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Arguments to create event."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return EventCommand if arguments given are valid, InvalidCommand otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Command tryAddEvent(String args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Matcher matcher \u003d FORMAT_ARG_ADD_EVENT.matcher(args);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_FORMAT_EVENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String description \u003d matcher.group(\"description\").trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String atStr \u003d matcher.group(\"at\").trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            LocalDateTime at \u003d Parser.parseDateTime(atStr);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new EventCommand(description, at);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_FORMAT_DATETIME);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Attempts to create a TodoCommand."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Arguments to create to-do."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return TodoCommand if arguments given are valid, InvalidCommand otherwise."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Command tryAddTodo(String args) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new TodoCommand(args);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Attempts to create a DeleteCommand."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Arguments to delete task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return DeleteCommand if arguments given are valid, InvalidCommand otherwise."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Command tryDelete(String args) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_EMPTY_TASK_ID_DELETE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            int id \u003d Parser.parseCommandId(args);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new DeleteCommand(id);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Attempts to create an EditCommand."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Arguments to edit task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return EditCommand if arguments given are valid, InvalidCommand otherwise."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Command tryEdit(String args) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_EMPTY_TASK_ID_EDIT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Matcher matcher \u003d FORMAT_ARGS_EDIT.matcher(args.trim());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_FORMAT_EDIT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String idStr \u003d matcher.group(\"id\").trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Optional\u003cString\u003e description \u003d Optional.ofNullable(matcher.group(\"description\"))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .map(String::trim);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Optional\u003cString\u003e atStr \u003d Optional.ofNullable(matcher.group(\"at\"))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .map(String::trim);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Optional\u003cString\u003e byStr \u003d Optional.ofNullable(matcher.group(\"by\"))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                .map(String::trim);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            int id \u003d Parser.parseCommandId(idStr);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (description.isEmpty() \u0026\u0026 atStr.isEmpty() \u0026\u0026 byStr.isEmpty()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return new InvalidCommand(ERROR_MESSAGE_EMPTY_EDIT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Optional\u003cLocalDateTime\u003e at \u003d atStr.map(Parser::parseDateTime);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Optional\u003cLocalDateTime\u003e by \u003d byStr.map(Parser::parseDateTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new EditCommand(id, description, at, by);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_FORMAT_DATETIME);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Attempts to create a FindCommand."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Arguments to find task(s)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return FindCommand if arguments given are valid, InvalidCommand otherwise."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Command tryFind(String args) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_EMPTY_SEARCH);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new FindCommand(args);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Attempts to create a DoneCommand."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Arguments to mark task as done."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return DoneCommand if arguments given are valid, InvalidCommand otherwise."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static Command tryMarkAsDone(String args) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_EMPTY_TASK_ID_DONE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            int id \u003d Parser.parseCommandId(args);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new MarkAsDoneCommand(id);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(ERROR_MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 215
    }
  },
  {
    "path": "src/main/java/botbot/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * @author wakululuu-reused."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Reused from https://se-education.org/guides/tutorials/javaFxPart4.html."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 15
    }
  },
  {
    "path": "src/main/java/botbot/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * A GUI for Botbot using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * @author wakululuu-reused."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Botbot botbot \u003d new Botbot(\"data/botbot.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setBotbot(botbot);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 34
    }
  },
  {
    "path": "src/main/java/botbot/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.EventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.InvalidCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.TodoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Parser for Botbot commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final Pattern FORMAT_COMMAND \u003d Pattern.compile(\"(?\u003ccommandKeyword\u003e\\\\S+)(?\u003cargs\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String FORMAT_DATE_TIME \u003d \"d-M-yyyy HHmm[ssn]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final int DATE_TIME_LENGTH \u003d 13;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the given user input into a command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param input Input to be parsed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Command parsed from input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    static Command parseCommand(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Matcher matcher \u003d FORMAT_COMMAND.matcher(input.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(CommandValidator.ERROR_MESSAGE_NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String commandKeyword \u003d matcher.group(\"commandKeyword\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String args \u003d matcher.group(\"args\").trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        switch (commandKeyword) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case DeadlineCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return CommandValidator.tryAddDeadline(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case DeleteCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return CommandValidator.tryDelete(args);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case EditCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return CommandValidator.tryEdit(args);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case EventCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return CommandValidator.tryAddEvent(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case ExitCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case FindCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return CommandValidator.tryFind(args);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case ListCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case MarkAsDoneCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return CommandValidator.tryMarkAsDone(args);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        case TodoCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return CommandValidator.tryAddTodo(args);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new InvalidCommand(CommandValidator.ERROR_MESSAGE_NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the input for a task ID."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param args Input to be parsed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Task ID parsed from input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws NumberFormatException If input does not contain a parsable integer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    static int parseCommandId(String args) throws NumberFormatException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert !args.isBlank() : \"Args provided is blank\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Integer.parseInt(args) - 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the input for a date (and a time)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param input Input to be parsed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Date (and time) parsed from input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws DateTimeParseException If input does not follow expected datetime format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    static LocalDateTime parseDateTime(String input) throws DateTimeParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (input.length() \u003c DATE_TIME_LENGTH) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            input +\u003d BotbotDateTimeFormatter.NO_TIME_FLAG_STR;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return LocalDateTime.parse(input, DateTimeFormatter.ofPattern(FORMAT_DATE_TIME));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 102
    }
  },
  {
    "path": "src/main/java/botbot/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.TaskStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the storage of data from Botbot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a storage with a specified filepath."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param filePath Filepath where data will be located."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Loads any existing data at the filepath."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * If there is no existing data, a new file is created at the filepath."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return List of existing tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert file.getParentFile().isDirectory() : \"Parent directory for data file not created\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (file.isFile()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return readDataFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return createDataFile(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private List\u003cTask\u003e readDataFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Scanner sc \u003d createFileScanner();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert sc !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return extractTasks(sc);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Scanner createFileScanner() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        FileInputStream file;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            file \u003d new FileInputStream(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            System.out.println(\"oops! your data file is missing!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new Scanner(file);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private List\u003cTask\u003e extractTasks(Scanner sc) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cTask\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            String data \u003d sc.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            String[] dataArr \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            char taskType \u003d dataArr[0].charAt(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            TaskStatus taskStatus \u003d TaskStatus.convertToStatus(dataArr[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            String description \u003d dataArr[2];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            case Deadline.TYPE_CODE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String by \u003d dataArr[3];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                list.add(new Deadline(description, taskStatus, by));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            case Event.TYPE_CODE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String at \u003d dataArr[3];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                list.add(new Event(description, taskStatus, at));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            case Todo.TYPE_CODE:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                list.add(new Todo(description, taskStatus));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                assert false : \"Invalid task type\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private List\u003cTask\u003e createDataFile(File file) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Saves the current task list in the storage."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to be saved."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                List\u003cString\u003e temp \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                temp.add(String.valueOf(task.getType()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                temp.add(task.getStatus());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                temp.add(task.getDescription());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    temp.add(task.getBy().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    temp.add(task.getAt().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    assert task instanceof Todo : \"Invalid task type\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String data \u003d String.join(\"|\", temp);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                fw.write(data + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 142
    }
  },
  {
    "path": "src/main/java/botbot/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static botbot.Ui.INDENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the Botbot task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TaskList extends LinkedList\u003cTask\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_ILLEGAL_ARG \u003d \"you cannot set a %s for a%s!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_ILLEGAL_ARG_DEADLINE \u003d String.format(ERROR_MESSAGE_ILLEGAL_ARG,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"time\", \" deadline\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_ILLEGAL_ARG_EVENT \u003d String.format(ERROR_MESSAGE_ILLEGAL_ARG,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"deadline\", \"n event\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_ILLEGAL_ARG_TODO_AT \u003d String.format(ERROR_MESSAGE_ILLEGAL_ARG,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"time\", \" todo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String ERROR_MESSAGE_ILLEGAL_ARG_TODO_BY \u003d String.format(ERROR_MESSAGE_ILLEGAL_ARG,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \"deadline\", \" todo\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Tasks in task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public TaskList(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Deletes a task in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be deleted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void delete(int id) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert size() \u003e 0 \u0026\u0026 id \u003c\u003d size() : \"Invalid ID to delete\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        remove(id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Edits a task in the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be edited."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description to be edited to."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time to be edited to."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline to be edited to."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws IllegalArgumentException If \u0027at\u0027 is provided for a deadline or to-do, or if \u0027by\u0027 is "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *         provided for an event or to-do."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void edit(int id, Optional\u003cString\u003e description, Optional\u003cLocalDateTime\u003e at,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Optional\u003cLocalDateTime\u003e by) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert size() \u003e 0 \u0026\u0026 id \u003c\u003d size() : \"Invalid ID to edit\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Task task \u003d get(id);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            at.ifPresent(x -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new IllegalArgumentException(ERROR_MESSAGE_ILLEGAL_ARG_TODO_AT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            by.ifPresent(x -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new IllegalArgumentException(ERROR_MESSAGE_ILLEGAL_ARG_TODO_BY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            at.ifPresent(x -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new IllegalArgumentException(ERROR_MESSAGE_ILLEGAL_ARG_DEADLINE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            by.ifPresent(task::setBy);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            by.ifPresent(x -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new IllegalArgumentException(ERROR_MESSAGE_ILLEGAL_ARG_EVENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            at.ifPresent(task::setAt);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        description.ifPresent(task::setDescription);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            result.append(String.format(INDENT + \"%s. %s\\n\", i + 1, this.get(i)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 98
    }
  },
  {
    "path": "src/main/java/botbot/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the UI of the chatbot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String INDENT \u003d \"  \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String PLURALITY_PLURAL \u003d \"s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String PLURALITY_SINGULAR \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String LOGO \u003d \"\\n.-. .-\u0027)                .-\u0027) _  .-. .-\u0027)                .-\u0027) _\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"\\\\  ( OO )              (  OO) ) \\\\  ( OO )              (  OO) )\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" ;-----.\\\\  .-\u0027),-----. /     \u0027._ ;-----.\\\\  .-\u0027),-----. /     \u0027._\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" | .-.  | ( OO\u0027  .-.  \u0027|\u0027--...__)| .-.  | ( OO\u0027  .-.  \u0027|\u0027--...__)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" | \u0027-\u0027 /_)/   |  | |  |\u0027--.  .--\u0027| \u0027-\u0027 /_)/   |  | |  |\u0027--.  .--\u0027\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" | .-. `. \\\\_) |  | |  |   |  |   | .-. `. \\\\_) |  | |  |   |  |\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" | |  \\\\  |  \\\\ |  | |  |   |  |   | |  \\\\  |  \\\\ |  | |  |   |  |\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" | \u0027--\u0027  /   `\u0027  \u0027-\u0027  \u0027   |  |   | \u0027--\u0027  /   `\u0027  \u0027-\u0027  \u0027   |  |\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \" `------\u0027      `-----\u0027    `--\u0027   `------\u0027      `-----\u0027    `--\u0027\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_ADD \u003d \"ok! I\u0027ve added this task:\\n\" + INDENT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"%s\\nyou now have %d task%s in your list\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_DELETE \u003d \"ok! I\u0027ve removed this task:\\n\" + INDENT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"%s\\nyou now have %d task%s in your list\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_EDIT \u003d \"ok! I\u0027ve edited the task to:\\n\" + INDENT + \"%s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_ERROR \u003d \"oops! %s\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_EXIT \u003d \"bye! see you soon!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_FIND_MATCH \u003d \"here is the match in your list:\\n%s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_FIND_MATCHES \u003d \"here are the matches in your list:\\n%s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_FIND_NO_MATCH \u003d \"there are no matches in your list!\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_GREET \u003d \"helluu! I\u0027m\\n\" + LOGO"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"\\nwhat would you like me to do?\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_LIST \u003d \"here\u0027s your list:\\n%s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_LIST_EMPTY \u003d \"your list is empty!\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String RESPONSE_MARK_AS_DONE \u003d \"nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + INDENT + \"%s\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Welcome message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return RESPONSE_GREET;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the exit message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Exit message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static String exit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return RESPONSE_EXIT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static String makePlural(int count) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return (count \u003e 1) ? PLURALITY_PLURAL : PLURALITY_SINGULAR;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the response for an AddCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param task Task added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param numOfTasks Updated number of tasks in task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response for AddCommand."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String showAddResponse(Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String plurality \u003d makePlural(numOfTasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(RESPONSE_ADD, task, numOfTasks, plurality);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the response for a DeleteCommand."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param task Task deleted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param numOfTasks Updated number of tasks in task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response for DeleteCommand."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String showDeleteResponse(Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String plurality \u003d makePlural(numOfTasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(RESPONSE_DELETE, task, numOfTasks, plurality);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the response for an EditCommand."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param task Task edited."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response for EditCommand."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String showEditResponse(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(RESPONSE_EDIT, task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the error message."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param errorMessage Error message to be displayed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String showErrorResponse(String errorMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(RESPONSE_ERROR, errorMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the response for a FindCommand."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list of matches."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response for FindCommand."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String showFindResponse(TaskList tasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return RESPONSE_FIND_NO_MATCH;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return String.format(RESPONSE_FIND_MATCH, tasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(RESPONSE_FIND_MATCHES, tasks);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the response for a ListCommand."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Current task list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response for ListCommand."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String showListResponse(TaskList tasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (tasks.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return RESPONSE_LIST_EMPTY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(RESPONSE_LIST, tasks);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Displays the response for a MarkAsDoneCommand."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param task Task marked as done."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response for MarkAsDoneCommand."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String showMarkAsDoneResponse(Task task) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(RESPONSE_MARK_AS_DONE, task);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 143
    }
  },
  {
    "path": "src/main/java/botbot/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Adds a task to the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an add command to add the specified task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the add command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to add task to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert tasks.size() \u003e 0 : \"Empty task list after adding task\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return ui.showAddResponse(task, tasks.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 38
    }
  },
  {
    "path": "src/main/java/botbot/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a command with the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save task list to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to execute command on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public abstract String execute(Storage storage, TaskList tasks, Ui ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 20
    }
  },
  {
    "path": "src/main/java/botbot/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Adds a deadline to the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a deadline command to add a deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public DeadlineCommand(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(new Deadline(description, by));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 22
    }
  },
  {
    "path": "src/main/java/botbot/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.CommandValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Deletes a task from the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a delete command to delete the specified task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public DeleteCommand(int id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the delete command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to delete task from."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Task task \u003d tasks.get(id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            tasks.delete(id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return ui.showDeleteResponse(task, tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return ui.showErrorResponse(CommandValidator.ERROR_MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 44
    }
  },
  {
    "path": "src/main/java/botbot/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.CommandValidator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"edit INDEX [/desc NEW_DESCRIPTION] [/at NEW_TIME_OF_EVENT] \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"[/by NEW_DEADLINE_OF_TASK] (at least one of /desc, /at and /by must be provided)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"edit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an edit command to edit the specified task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be edited."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description to be edited to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time to be edited to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline to be edited to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public EditCommand(int id, Optional\u003cString\u003e description, Optional\u003cLocalDateTime\u003e at,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Optional\u003cLocalDateTime\u003e by) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the edit command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to edit task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            task \u003d tasks.get(id);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return ui.showErrorResponse(CommandValidator.ERROR_MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            tasks.edit(id, description, at, by);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return ui.showErrorResponse(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return ui.showEditResponse(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 63
    }
  },
  {
    "path": "src/main/java/botbot/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Adds an event to the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"event\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an event command to add an event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time of event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public EventCommand(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(new Event(description, at));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 22
    }
  },
  {
    "path": "src/main/java/botbot/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Terminates the bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save task list to."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list of the bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Ui.exit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 25
    }
  },
  {
    "path": "src/main/java/botbot/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Searches for tasks that match the specified keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a find command to search for the specified keyword in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param keyword Keyword to search."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the find command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to add task to."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        TaskList matches \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                matches.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return ui.showFindResponse(matches);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 42
    }
  },
  {
    "path": "src/main/java/botbot/commands/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an invalid command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final String errorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an invalid command to alert the user of an error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param errorMessage Error to be printed to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public InvalidCommand(String errorMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the invalid command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage of the bot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list of the bot."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return ui.showErrorResponse(errorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 34
    }
  },
  {
    "path": "src/main/java/botbot/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Lists all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage of the bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return ui.showListResponse(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 25
    }
  },
  {
    "path": "src/main/java/botbot/commands/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.CommandValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.TaskStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Marks a task in the task list as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class MarkAsDoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a mark as done command to mark the specified task as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be marked as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public MarkAsDoneCommand(int id) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the mark as done command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to mark task as done from."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to show response of execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Response of execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Task task \u003d tasks.get(id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assert task.getStatus().equals(TaskStatus.DONE.getStrValue()) : \"Mark task as done unsuccessful\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return ui.showMarkAsDoneResponse(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return ui.showErrorResponse(CommandValidator.ERROR_MESSAGE_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 46
    }
  },
  {
    "path": "src/main/java/botbot/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Adds a to-do to the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"todo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a to-do command to add a to-do."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of to-do."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(new Todo(description));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 19
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.BotbotDateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a deadline with a description, deadline and completion status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final char TYPE_CODE \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"deadline \u003cdescription\u003e /by \u003cD-M-YYYY HHmm\u003e (eg. 17-3-2020 0945 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"or 3-4-2020 with no time specified)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, null, by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param status Completion status of deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Deadline(String description, TaskStatus status, String by) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, null, LocalDateTime.parse(by), status);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(\"[%c] [%s] %s (by: %s)\", getType(), getStatusIcon(), getDescription(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                BotbotDateTimeFormatter.convertDateTimeToStr(getBy()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 41
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.BotbotDateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an event with a description, time and completion status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final char TYPE_CODE \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"event \u003cdescription\u003e /at \u003cD-M-YYYY HHmm\u003e (eg. 17-3-2020 0945 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"or 3-4-2020 with no time specified)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, at, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param status Completion status of event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time of event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Event(String description, TaskStatus status, String at) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, LocalDateTime.parse(at), null, status);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(\"[%c] [%s] %s (at: %s)\", getType(), getStatusIcon(), getDescription(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                BotbotDateTimeFormatter.convertDateTimeToStr(getAt()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 41
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a task with a description and completion status."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final char type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private TaskStatus status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Task(char type, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.at \u003d Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.by \u003d Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        status \u003d TaskStatus.NOT_DONE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time of task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Task(char type, String description, LocalDateTime at, LocalDateTime by) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.at \u003d Optional.ofNullable(at);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.by \u003d Optional.ofNullable(by);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert this.at.isPresent() ^ this.by.isPresent() : \"\u0027at\u0027 and \u0027by\u0027 are both present or both absent\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        status \u003d TaskStatus.NOT_DONE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param status Completion status of task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Task(char type, String description, TaskStatus status) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.at \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.by \u003d Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time of task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param status Completion status of task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Task(char type, String description, LocalDateTime at, LocalDateTime by, TaskStatus status) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.at \u003d Optional.ofNullable(at);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.by \u003d Optional.ofNullable(by);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert this.at.isPresent() ^ this.by.isPresent() : \"\u0027at\u0027 and \u0027by\u0027 are both present or both absent\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the type of the task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Type of task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert type \u003d\u003d Deadline.TYPE_CODE || type \u003d\u003d Event.TYPE_CODE || type \u003d\u003d Todo.TYPE_CODE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                : \"Task type not D, E or T\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert description !\u003d null : \"Empty description\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the completion status of the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return 1 if task is done, 0 otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return status.getStrValue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the icon representing the completion status of the task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Tick if task is done, cross otherwise."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return status.getStatusIcon();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        status \u003d TaskStatus.DONE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the time of the task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public LocalDateTime getAt() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return at.orElse(null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Deadline of task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return by.orElse(null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setAt(LocalDateTime at) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert at !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.at \u003d Optional.ofNullable(at);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setBy(LocalDateTime by) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert by !\u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.by \u003d Optional.ofNullable(by);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 157
    }
  },
  {
    "path": "src/main/java/botbot/tasks/TaskStatus.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public enum TaskStatus {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    DONE (\"1\", \"\\u2713\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    NOT_DONE (\"0\", \"\\u2718\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final String strValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final String statusIcon;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    TaskStatus(String strValue, String statusIcon) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.strValue \u003d strValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.statusIcon \u003d statusIcon;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Converts a string value to a task status."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param strValue String to be converted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Task status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static TaskStatus convertToStatus(String strValue) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (strValue.equals(DONE.strValue)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return DONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (strValue.equals(NOT_DONE.strValue)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return NOT_DONE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assert false : \"Invalid task status\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getStrValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return strValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return statusIcon;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 39
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a to-do with a description and completion status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final char TYPE_CODE \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a to-do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of to-do."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a to-do."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of to-do."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param status Completion status of to-do."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Todo(String description, TaskStatus status) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, status);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(\"[%c] [%s] %s\", getType(), getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 32
    }
  },
  {
    "path": "src/main/java/botbot/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * @author wakululuu-reused."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert dialog.getText() !\u003d null : \"Empty dialog box text\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert displayPicture.getImage() !\u003d null : \"Display picture not set\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        displayPicture.setClip(new Circle(30, 30, 30));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert displayPicture.getClip() !\u003d null : \"Display picture clip not set\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static DialogBox getBotbotDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 69
    }
  },
  {
    "path": "src/main/java/botbot/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Botbot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * @author wakululuu-reused."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Botbot botbot;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpeg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final Image botbotImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/botbot.jpeg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getBotbotDialog(Ui.greet(), botbotImage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert dialogContainer.getChildren().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void setBotbot(Botbot botbot) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.botbot \u003d botbot;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Botbot\u0027s reply and then"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert input !\u003d null : \"Empty input\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String response \u003d botbot.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert response !\u003d null : \"Empty response\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                DialogBox.getBotbotDialog(response, botbotImage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assert dialogContainer.getChildren().size() \u003e\u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 62
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"600.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"botbot.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"500.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"524.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 23
    }
  },
  {
    "path": "src/test/java/botbot/tasks/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027D\u0027, new Deadline(\"deadline test /by 1-1-2020\").getType());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027D\u0027, new Deadline(\"test\", true, \"2020-01-01T03:14:15.926535898\").getType());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027E\u0027, new Event(\"event sample /at 31-12-2020 2359\").getType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027E\u0027, new Event(\"sample\", false, \"2020-12-31T00:00\").getType());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027T\u0027, new Todo(\"todo test\").getType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027T\u0027, new Todo(\"test\", true).getType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Deadline(\"deadline test /by 1-1-2020\").getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Deadline(\"test\", true, \"2020-01-01T03:14:15.926535898\").getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"sample\", new Event(\"event sample /at 31-12-2020 2359\").getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"sample\", new Event(\"sample\", false, \"2020-12-31T00:00\").getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Todo(\"todo test\").getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Todo(\"test\", true).getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getStatus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Deadline(\"deadline test /by 1-1-2020\").getStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"1\", new Deadline(\"test\", true, \"2020-01-01T03:14:15.926535898\").getStatus());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Event(\"event sample /at 31-12-2020 2359\").getStatus());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Event(\"sample\", false, \"2020-12-31T00:00\").getStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Todo(\"todo test\").getStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"1\", new Todo(\"test\", true).getStatus());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 52
    }
  },
  {
    "path": "src/test/java/botbot/tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getAt() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"todo test\").getAt());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", true).getAt());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", false).getAt());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getBy() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"todo test\").getBy());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", true).getBy());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", false).getBy());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(\"[T] [\\u2718] test\", new Todo(\"todo test\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(\"[T] [\\u2713] sample\", new Todo(\"sample\", true).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(\"[T] [\\u2718] test\", new Todo(\"test\", false).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 29
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "blah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "event "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "delete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/botbot.Botbot.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "java -classpath ../bin botbot.Botbot \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "-": 36
    }
  }
]
