[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 1,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 7,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "D | 0 | return book | 19/09/2020 1000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "E | 0 | project meeting | 20/12/2020 200-1400"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "T | 1 | join sports club"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 4
    }
  },
  {
    "path": "src/main/java/duke/Command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Adds a task to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final String desc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs an \u003ccode\u003eAddCommand\u003c/code\u003e Object given description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param taskDescription The task description from user input, excluding the command word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public AddCommand(String taskDescription) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.desc \u003d taskDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static String getStringWithoutKeyword(String[] strArr) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return String.join(\" \", Arrays.copyOfRange(strArr, 1, strArr.length));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private static String getDate(String str, String delimiter) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String[] splitString \u003d str.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (delimiter.equals(Deadline.delimiterBy) \u0026\u0026 splitString[splitString.length - 1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"The due time of a deadline cannot by empty\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else if (delimiter.equals(Event.delimiterAt) \u0026\u0026 splitString[splitString.length - 1].equals(\"/at\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"The time of an event cannot by empty\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (str.split(delimiter).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            // (deadline/event by/at ...)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return str.split(delimiter)[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // (deadline/event ... by/at ...)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return str.split(delimiter)[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private static String getWithoutDelimiter(String str, String delimiter) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String[] splitString \u003d str.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (delimiter.equals(Deadline.delimiterBy) \u0026\u0026 splitString[0].equals(\"/by\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot by empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else if (delimiter.equals(Event.delimiterAt) \u0026\u0026 splitString[0].equals(\"/at\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"The description of an event cannot by empty\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return str.split(delimiter)[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String[] words \u003d this.desc.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String keyword \u003d words[0]; // todo, deadline, event"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String stringWithoutKeyword;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        stringWithoutKeyword \u003d getStringWithoutKeyword(words);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String stringWithoutDelimiter;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            newTask \u003d new ToDo(stringWithoutKeyword);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (words.length \u003d\u003d 1 || (words[1].equals(\"/by\") \u0026\u0026 words.length \u003d\u003d 2)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                throw new DukeException(\"The description and the due time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            date \u003d getDate(stringWithoutKeyword, Deadline.delimiterBy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            stringWithoutDelimiter \u003d getWithoutDelimiter(stringWithoutKeyword, Deadline.delimiterBy);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            newTask \u003d new Deadline(stringWithoutDelimiter, date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (words.length \u003d\u003d 1 || (words[1].equals(\"/at\") \u0026\u0026 words.length \u003d\u003d 2)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                throw new DukeException(\"The description and the time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            date \u003d getDate(stringWithoutKeyword, Event.delimiterAt);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            stringWithoutDelimiter \u003d getWithoutDelimiter(stringWithoutKeyword, Event.delimiterAt);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            newTask \u003d new Event(stringWithoutDelimiter, date);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return Message.concatLines(Message.MESSAGE_ADDED, newTask.toString(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                Ui.LINE_SEPARATOR, Message.getTotalTaskMessage(taskList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 115
    }
  },
  {
    "path": "src/main/java/duke/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Returns true if the command triggers termination of the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return True if the command triggers termination of the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 30
    }
  },
  {
    "path": "src/main/java/duke/Command/CompleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Marks a task as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public CompleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return Message.concatLines(Message.MESSAGE_DONE, task.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 31
    }
  },
  {
    "path": "src/main/java/duke/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Deletes a task from the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return Message.concatLines(Message.MESSAGE_DELETE, task.toString(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                Ui.LINE_SEPARATOR, Message.getTotalTaskMessage(taskList));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 32
    }
  },
  {
    "path": "src/main/java/duke/Command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ui.scanner.close();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 24
    }
  },
  {
    "path": "src/main/java/duke/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Finds and lists all tasks in the task list whose description contains the specified keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        TaskList resultWithKeyword \u003d taskList.filter(keyword);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (resultWithKeyword.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return Message.MESSAGE_NO_TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return Message.concatLines(Message.MESSAGE_FIND,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    Ui.LINE_SEPARATOR, resultWithKeyword.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 31
    }
  },
  {
    "path": "src/main/java/duke/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Lists all the tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return Message.MESSAGE_NO_TASK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return Message.concatLines(Message.MESSAGE_LIST,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    Ui.LINE_SEPARATOR, taskList.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 22
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this(Storage.STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            ui.printResponse(Message.MESSAGE_LOADING_ERROR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Main entry point of the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ui.printResponse(Message.MESSAGE_WELCOME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                ui.printResponse(c.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                ui.printResponse(Message.showError(e.getMessage()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Generate a response to user input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return Message.showError(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 68,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/Exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Deals with all exceptions related to the duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 15
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 10
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"../view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 32
    }
  },
  {
    "path": "src/main/java/duke/Parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.CompleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Handles making sense of the user command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses user input and returns an executable \u003ccode\u003eCommand\u003c/code\u003e Object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param str The raw user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return An executable \u003ccode\u003eCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static Command parse(String str) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (str.equals(\"bye\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else if (str.equals(\"list\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else if (str.contains(\"done\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(str.split(\"\\\\s+\")[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return new CompleteCommand(taskIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else if (str.contains(\"delete\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(str.split(\"\\\\s+\")[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else if (str.contains(\"find\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            String keyword \u003d str.substring(5).trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return new AddCommand(str);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 41
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Handles loading tasks from the given file and saving tasks to the same file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String STORAGE_FILEPATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs a \u003ccode\u003eStorage\u003c/code\u003e Object using filePath."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param filePath The filePath where the data is stored"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Loads the existing tasks from the data file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return An ArrayList of tasks which are stored in the data file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @throws DukeException If file does not exist"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                String[] data \u003d scanner.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                switch (data[0]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    task \u003d new ToDo(data[2]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    task \u003d new Deadline(data[2], data[3]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    task \u003d new Event(data[2], data[3]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    throw new DukeException(\"Failed to load tasks.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                if (data[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"File is not found\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Saves the current tasks in the list to the data file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param tasks The TaskList to be saved to the destined filePath"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @throws DukeException If writing to file fails"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void saveTasks(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                fw.write(task.serialize());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"Failed to save tasks\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 99
    }
  },
  {
    "path": "src/main/java/duke/Task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String delimiterBy \u003d \" /by \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs a \u003ccode\u003eDeadline\u003c/code\u003e Object to represent a task with a deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param description The description of the deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param by The deadline containing date and time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String[] dateTime \u003d this.by.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.date \u003d parseDate(dateTime[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (dateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.time \u003d parseTime(dateTime[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses a text and returns the date of the deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param dateString The text to be parsed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The date of the deadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private LocalDate parseDate(String dateString) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return LocalDate.parse(dateString, formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses a text and returns the time of the deadline."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param timeString The text to be parsed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The time of the deadline"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private LocalTime parseTime(String timeString) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return LocalTime.parse(timeString, formatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private String byFormat() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"EEE, d MMMM yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return String.format(\"%s\", dateFormatter.format(date));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return String.format(\"%s, %s\", dateFormatter.format(date), timeFormatter.format(time));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", getStatusCode(), description, by);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + byFormat() + \")\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 80
    }
  },
  {
    "path": "src/main/java/duke/Task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Represents a task that is an event with both start and end time/date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String delimiterAt \u003d \" /at \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs an \u003ccode\u003eEvent\u003c/code\u003e Object to represent an event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param description The description of the event item"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param at          The duration of the event (including the start and end of both date and time)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @throws DukeException If the format of either date or time is incorrect"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String[] dateTime \u003d this.at.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        // case if event last for day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (dateTime[0].contains(\"-\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            String[] dateSplit \u003d dateTime[0].split(\"-\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.startDate \u003d parseDate(dateSplit[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.endDate \u003d parseDate(dateSplit[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (this.startDate.compareTo(this.endDate) \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                throw new DukeException(\"The start date cannot be after the end date\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            this.startDate \u003d parseDate(dateTime[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String[] timeSplit \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.startTime \u003d parseTime(timeSplit[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.endTime \u003d parseTime(timeSplit[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (this.startTime.compareTo(this.endTime) \u003e 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"The start time cannot be after the end time\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses a text and returns the date of an event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param dateString The text to be parsed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The date of an event"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private LocalDate parseDate(String dateString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return LocalDate.parse(dateString, formatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Parses a text and returns the time of an event."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param timeString The text to be parsed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The time of an event"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private LocalTime parseTime(String timeString) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return LocalTime.parse(timeString, formatter);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private String atFormat() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"EEE, d MMMM yyyy\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return String.format(\"%s, %s - %s\", dateFormatter.format(startDate),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    timeFormatter.format(startTime),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    timeFormatter.format(endTime));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return String.format(\"%s - %s, %s - %s\", dateFormatter.format(startDate),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    dateFormatter.format(endDate),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    timeFormatter.format(startTime),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    timeFormatter.format(endTime));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", getStatusCode(), description, at);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + atFormat() + \")\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 106
    }
  },
  {
    "path": "src/main/java/duke/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs a \u003ccode\u003eTask\u003c/code\u003e Object to represent a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param description The description of a task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public int getStatusCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Sets the status of a task as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @throws DukeException If a task is already marked as done before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void markAsDone() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(\"This task is already completed!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public abstract String serialize();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 50
    }
  },
  {
    "path": "src/main/java/duke/Task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs a task list containing the elements of the specifies ArrayList of tasks,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * in the order they are returned by the list\u0027s iterator."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param tasks The ArrayList of tasks whose tasks are to be placed in the task list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs an empty list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Retrieves the requested \u003ccode\u003eTask\u003c/code\u003e Object from the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param taskId The 1-based index of the task to be fetched"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The requested \u003ccode\u003eTask\u003c/code\u003e object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @throws DukeException If an invalid taskId is passed in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Task get(int taskId) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            return tasks.get(taskId - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            throw new DukeException(String.format(\"Task No.%d is not in your list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    + \"Please enter a valid task ID.\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                    taskId));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Removes the requested \u003ccode\u003eTask\u003c/code\u003e Object from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param taskId The 1-based index of the task to be fetched"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The requested \u003ccode\u003eTask\u003c/code\u003e object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @throws DukeException If an invalid taskId is passed in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Task remove(int taskId) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Task task \u003d get(taskId);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        tasks.remove(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The number of tasks in the task list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Returns true if the task list contains no tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return True if the task list contains no task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Filters the task list that contains the given keyword and returns a new task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param keyword The keyword from user input to filter the task list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return The list of \u003ccode\u003eTask\u003c/code\u003e objects that contains the keyword"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public TaskList filter(String keyword) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ArrayList\u003cTask\u003e resultWithKeyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                resultWithKeyword.add(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return new TaskList(resultWithKeyword);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            Task task \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            sb.append(String.format(\"%d.%s\", i, task));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            if (i !\u003d tasks.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                sb.append(Ui.LINE_SEPARATOR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 112
    }
  },
  {
    "path": "src/main/java/duke/Task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Represents a task with description only."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Constructs a \u003ccode\u003eToDo\u003c/code\u003e Object to represent a todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param description The description of a todo item"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return String.format(\"T | %d | %s\", getStatusCode(), description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 26
    }
  },
  {
    "path": "src/main/java/duke/Ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 61
    }
  },
  {
    "path": "src/main/java/duke/Ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private void showWelcomeMessage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello from Duke\", dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 59
    }
  },
  {
    "path": "src/main/java/duke/Ui/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String BORDERS \u003d \"___________________________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task:\\n    \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n   \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\\n    \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_NO_TASK \u003d \"There are currently no tasks in your list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_LIST \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String MESSAGE_LOADING_ERROR \u003d \"Failed to load tasks. An empty list is created.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Prints the total number of tasks in the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @param taskList The task list containing all the tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * @return A message of the total number of tasks in the task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static String getTotalTaskMessage(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return \"Now you have \" + taskList.size()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                + (taskList.size() \u003d\u003d 1 ? \" task \" : \" tasks \")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                + \"in the list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static String showError(String message) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return String.format(\"☹ OOPS!!! %s\\n\", message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static String concatLines(String... str) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return String.join(\"\", str);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 36
    }
  },
  {
    "path": "src/main/java/duke/Ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " * Handles interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     * Prints a new line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        System.out.print(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return scanner.nextLine().trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void printResponse(String string) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        System.out.print(string);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.Ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 19
    }
  },
  {
    "path": "src/test/java/duke/Parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.CompleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import duke.Command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parserAdd() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"todo Test\") instanceof AddCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"deadline Test /by deadlineBy\") instanceof AddCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"deadline Test /by 25/07/2015 1500\") instanceof AddCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"event Test /at eventAt\") instanceof AddCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"event Test /at 26/07/2014 1600\") instanceof AddCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parserExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parserList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parserComplete() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"done 2\") instanceof CompleteCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void parserDelete() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertTrue(Parser.parse(\"delete 2\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 43
    }
  },
  {
    "path": "src/test/java/duke/Task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void stringConversion_withTime() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test\", \"01/01/2020 0700\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(\"[D][✘] Test (by: Wed, 1 January 2020, 7:00am)\", deadline.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void stringConversion_withoutTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test\", \"01/01/2020\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(\"[D][✘] Test (by: Wed, 1 January 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    void serializeTest_withoutTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test\", \"01/01/2020\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(\"D | 0 | Test | 01/01/2020\", deadline.serialize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    void serializeTest_withTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test\", \"01/01/2020 0700\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(\"D | 0 | Test | 01/01/2020 0700\", deadline.serialize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 32
    }
  },
  {
    "path": "src/test/java/duke/Task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    void stringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(\"[T][✘] Test\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    void serializeTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(\"T | 0 | Test\", todo.serialize());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 20
    }
  },
  {
    "path": "src/test/java/duke/Ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "package duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final InputStream systemIn \u003d System.in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private final PrintStream systemOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private ByteArrayInputStream testIn;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private ByteArrayOutputStream testOut;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void initStream() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        testOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        System.setOut(new PrintStream(testOut));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        System.setOut(systemOut);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    private String getOutput() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        return testOut.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    void readCommand_withTrailingSpaces() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        String data \u003d \"Test   \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        testIn \u003d new ByteArrayInputStream(data.getBytes());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        System.setIn(testIn);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(\"Test\", ui.readCommand());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        System.setIn(systemIn);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    void showLine() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "        assertEquals(System.lineSeparator(), getOutput());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 53
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "# force shell to use UTF-8 format for output"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "export LC_ALL\u003den_US.UTF-8"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Door-oof"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Door-oof"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Door-oof": 4,
      "-": 37
    }
  }
]
