[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    applicationDefaultJvmArgs \u003d [\"-Dfile.encoding\u003dutf-8\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 25,
      "-": 46
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Welcome to Duke, a task manager that helps to keep track of, well, tasks!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Duke is capable of keeping track of simple todos, deadlines as well as events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Of course, adding tasks is not the only thing Duke can do! Below are all the features"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "implemented into this version of Duke. Enjoy!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Add a todo/deadline/event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Delete a todo/deadline/event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Set a task to have the \"done\" status"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* View all the tasks that you have currently"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Exit using the \"bye\" command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Tag a task with your own custom tag name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Untag a tagged task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Find tasks that contain a specified keyword"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "* Saves your tasks upon parsing every command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### Add a task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "In Duke, there are 3 types of tasks you can enter into the program:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Todos, Deadlines and Events"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "To add a task, follow the commands below."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "todo: `todo \u003cinsert task name here\u003e` "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "deadline: `deadline \u003cinsert task name here\u003e /by \u003cinsert due date here\u003e`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "event: `event \u003cinsert task name here\u003e /at \u003cinsert task location here\u003e`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**NOTE**: When entering task names, ensure that your task name does not contain the \u0027#\u0027 character. That character is "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "reserved for tagging."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**NOTE**: When entering due dates for deadlines, ensure that the due date follows the \"YYYY-MM-DD\" format. Otherwise an "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "error message would appear on Duke!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `todo`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon a successful task creation, you will see Duke acknowledging the created todo."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`todo homework`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/todoExample.png)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `deadline`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon a successful task creation, you will see Duke acknowledging the created deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`deadline homework /by 2020-09-19`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/deadlineExample.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `event`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon a successful task creation, you will see Duke acknowledging the created event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`event homework /at home`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/eventExample.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "***"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Delete a task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Deletes a task at a specific numbering"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "To delete a task, follow the command below:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`delete \u003cinsert item index here\u003e`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**NOTE**: Ensure that the index you input into the command is valid (i.e not less than 1 and not more than the number"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "of tasks)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `delete`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon a successful task deletion, you will see Duke acknowledging the deleted task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/deleteExample.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "***"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Set task to be \u0027done\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "In Duke, you can set a task to be \u0027done\u0027, replacing its default cross icon with a tick"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "To set a task to be \u0027done\u0027, enter the command below:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`done \u003cinsert item index here\u003e`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**NOTE**: Similar to delete, ensure that the index you input into the command is valid (i.e not less than 1 and not more "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "than the number of tasks)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `done`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon successfully marking a task as \u0027done\u0027, you will see Duke acknowledging the completed task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage: `done 2`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/doneExample.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "***"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## View all current tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "In Duke, you can view all tasks you have added/updated."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "To view all the tasks you have, enter the command below:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon successfully listing all the tasks you have, you will see Duke with the output as shown."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage: `list`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/listExample.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "***"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## save the tasks you have"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "In Duke, you can save all the tasks you have added/updated before closing the program using the `bye` command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "To save all the tasks you have and exit the program, enter the command below:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `bye`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon successfully saving all the tasks you have, you will see Duke with the output as shown before shutting down."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage: `bye`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/byeExample.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "***"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Tagging and Untagging of tasks"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "In Duke, you can tag untagged tasks with a custom tag, and vice versa."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "To tag an untagged task, or untag a tagged task, enter the commands below:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "tag: `tag \u003cinsert task index here\u003e \u003cinsert tag description here\u003e`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "untag: `untag \u003cinsert task index here\u003e`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**NOTE** Each task can only have one tag, attempting to tag a tagged task would result in an error message "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "**NOTE** Just like before, ensure that the index you input into the command is valid (i.e not less than 1 and not more "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "than the number of tasks)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `tag`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon successfully tagging an untagged task, you will see Duke acknowledging the command with the following output:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage: `tag 2 finished`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/tagExample.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### `untag`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon successfully untagging a tagged task, you will see Duke acknowledging the command with the following output:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage: `untag 2`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/untagExample.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "### Finding tasks using keywords"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "In Duke, you are able to find specific tasks that contains a keyword of your choosing."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "To find tasks that contain a certain keyword, enter the command below:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "`find \u003cinsert keyword here\u003e`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Upon successfully finding tasks that contains the specified keyword, you will see Duke acknowledging the command with "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "the following output:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "Example of usage: `find home`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "![Image of outcome](images/findExample.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 191,
      "-": 22
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DukeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * The duke.Duke class that runs the duke.Duke task manager program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/stark.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/jarvis.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private DukeParser parser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for a Duke object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for creating a Duke object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        storage \u003d new Storage(\"src/main/data/\", \"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        parser \u003d new DukeParser(storage.getData());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * A simple method that allows the delayed execution of a runnable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param runnable The runnable you would like to delay"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param delay Duration you want to delay the runnable for"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void setTimeout(Runnable runnable, int delay) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                Thread.sleep(delay);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                runnable.run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getUserDialog(userInput.getText(), user),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getDukeDialog(getResponse(userInput.getText()), duke)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String outputMessage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            outputMessage \u003d parser.parse(input).execute();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            ArrayList\u003cString\u003e finalLines \u003d parser.finalizedLines();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            storage.saveData(finalLines);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (!parser.shouldContinueDuke()) { //Checks if a bye input has been parsed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                setTimeout(() -\u003e Platform.exit(), 1500);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            outputMessage \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            storage.processData();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (java.io.IOException ignored) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            /* Exceptions are ignored */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.introduction(), duke));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setTitle(\"duke.Duke\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 149,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for a DukeException, an exception exclusive to the duke.Duke package."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param errorMessage The desired error message to be displayed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DukeException (String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert errorMessage.length() \u003e 0 : \"Empty Duke Error Message\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 13
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static void main (String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            stage.setTitle(\"Duke!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the ByeCommand object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ByeCommand() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the bye command by providing a goodbye message to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the message representing the goodbye message to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return Ui.bye();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 18
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    String execute();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 6
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DeadlineParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private DeadlineParser deadlineParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for the DeadlineCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be manipulated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param deadlineParser the parser that parses the deadline command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DeadlineCommand(TaskList lines, DeadlineParser deadlineParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.deadlineParser \u003d deadlineParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the deadline command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string that represents the outcome of the execution of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String task \u003d deadlineParser.checkIfValid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.addTask(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.addedTask(task, lines.getNumberOfItems());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 37
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DeleteParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private DeleteParser deleteParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be manipulated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param deleteParser The deleteParser object to check the validity of the command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DeleteCommand(TaskList lines, DeleteParser deleteParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.deleteParser \u003d deleteParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the delete command and returns a String to be output to the user, a success message if the execution was"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * successful, and an error message otherwise"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The output message for the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int itemNumber \u003d deleteParser.checkIfValid();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String deletedTask \u003d lines.getTask(itemNumber - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.removeTask(itemNumber - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.deletedTask(deletedTask, lines.getNumberOfItems());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 39
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DoneParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private DoneParser doneParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the DoneCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines The TaskList to be manipulated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param doneParser the parser that parses the done command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DoneCommand(TaskList lines, DoneParser doneParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.doneParser \u003d doneParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the done command and returns a string to be output to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the String representing the output to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int itemNumber \u003d doneParser.checkIfValid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String completedTask \u003d lines.getTask(itemNumber - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.done(completedTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.updateTask(Ui.updateDoneTask(completedTask), itemNumber - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 39
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.EventParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private EventParser eventParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the EventCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be manipulated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param eventParser the parser that parses the event command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public EventCommand(TaskList lines, EventParser eventParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.eventParser \u003d eventParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the event command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return A string representing the output message to the user upon execution of the event command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String task \u003d eventParser.checkIfValid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.addTask(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.addedTask(task, lines.getNumberOfItems());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 38
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.FindParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private FindParser findParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the FindCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines The TaskList to be manipulated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param findParser The FindParser that parses the find command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public FindCommand(TaskList lines, FindParser findParser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.findParser \u003d findParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the find command and returns the string representing the output message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the output message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String keyword \u003d findParser.keywordIfValid();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            ArrayList\u003cString\u003e matchingTasks \u003d lines.find(keyword);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.listMatchingTasks(matchingTasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the ListCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be manipulated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ListCommand(TaskList lines) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the list command by returning the String that represents the listed tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the String that represents the listed tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return Ui.listTasks(lines.getList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 24
    }
  },
  {
    "path": "src/main/java/duke/command/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.TagParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TagCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TagParser tagParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the TagCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be manipulated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param tagParser the TagParser that parses the tag command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public TagCommand(TaskList lines, TagParser tagParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.tagParser \u003d tagParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the tag command and returns the output string for the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the output message for the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int itemNumber \u003d tagParser.checkIfValid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String description \u003d tagParser.getDescription(itemNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            boolean tagged \u003d lines.tagItem(itemNumber - 1, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.taggedTask(lines.getTask(itemNumber - 1), tagged);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 38
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.TodoParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TodoParser todoParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor of the TodoCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be manipulated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param todoParser the parser that parses the task command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public TodoCommand(TaskList lines, TodoParser todoParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.todoParser \u003d todoParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the task command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return a output message for the user upon executing the task command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String createdTask \u003d todoParser.checkIfValid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.addTask(createdTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.addedTask(createdTask, lines.getNumberOfItems());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 37
    }
  },
  {
    "path": "src/main/java/duke/command/UntagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.UntagParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class UntagCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private UntagParser untagParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for the UntagCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be manipulated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param untagParser the parser that parses the untag command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public UntagCommand(TaskList lines, UntagParser untagParser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.untagParser \u003d untagParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Executes the untag command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the output message for the user upon executing the untag command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int index \u003d untagParser.checkIfValid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            boolean tagRemoved \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (lines.removeTag(index - 1)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                tagRemoved \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.untaggedTask(lines.getTask(index - 1), tagRemoved);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 40
    }
  },
  {
    "path": "src/main/java/duke/parser/DeadlineParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DeadlineParser implements TaskCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the DeadlineParser object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the input by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DeadlineParser(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * checks if the deadline command is valid, then returns the string represented the created deadline task. Throws a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * DukeException if there are errors in the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the String representing the created deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException thrown if there are errors in the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        int byIndex \u003d input.indexOf(\" /by \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean containsBy \u003d input.contains(\" /by \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean missingDate \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (byIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            missingDate \u003d input.substring(input.indexOf(\" /by \")).length() \u003d\u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean missingTaskDescription \u003d input.contains(\"deadline /by \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (missingTaskDescription) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Where is the description of your deadline?!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (!containsBy || missingDate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Oi, when is this deadline due??\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean validDateFormat \u003d Deadline.checkDateFormat(input.substring(byIndex + 5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                Deadline task \u003d new Deadline(input.substring(9, byIndex), input.substring(byIndex + 5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return task.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 45
    }
  },
  {
    "path": "src/main/java/duke/parser/DeleteParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DeleteParser implements IndexCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the DeleteParser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the command string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be used for reference."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DeleteParser(String input, TaskList lines) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the delete command is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the index of the task as mentioned in the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException if the command or index is invalid, a DukeException describing the error is thrown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int itemNumber \u003d Integer.parseInt(input.substring(input.indexOf(\" \") + 1)); // The task index in the list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            boolean invalidIndex \u003d lines.getNumberOfItems() \u003c itemNumber || itemNumber \u003c\u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (input.length() \u003c\u003d 7) { // This condition is to check if the delete command is empty"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"You did not specify which task you are deleting!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else if (invalidIndex) { // This condition is to check if the index is within the lines TaskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Hey, no such task exists!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return itemNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (NumberFormatException e) { // Thrown by parseInt"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Invalid index input for the delete command!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 40
    }
  },
  {
    "path": "src/main/java/duke/parser/DoneParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DoneParser implements IndexCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the DoneParser object. It takes in a String and a TaskList in order to parse the String\u0027s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input The command to be input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines The TaskList to be manipulated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DoneParser(String input, TaskList lines) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the input is a valid \"done\" command. Returns the integer in the command if it is a valid task index,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * and throws DukeExceptions if otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return A valid task index"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException if there are errors in the command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int itemNumber \u003d Integer.parseInt(input.substring(input.indexOf(\" \") + 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            boolean invalidIndex \u003d lines.getNumberOfItems() \u003c itemNumber || itemNumber \u003c\u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (input.length() \u003c\u003d 5) { // This condition is to check if the done command is empty"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"You did not specify which task you are done with!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else if (invalidIndex) { // This condition is to check if the index is within lines."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Hey, no such task exists!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return itemNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (NumberFormatException e) { // Thrown by parseInt which signifies"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Invalid index input for the done command!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 43
    }
  },
  {
    "path": "src/main/java/duke/parser/DukeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.TagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.UntagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DukeParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private boolean carryOn \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor of the Parser object. It takes in an ArrayList{@link ArrayList} which represents"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * the current set of tasks. The arrayList is then converted into a TaskList object for easier manipulation of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * items."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DukeParser(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d new TaskList(lines);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if duke.Duke should carry on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return True if duke.Duke is not terminated with a Bye command, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public boolean shouldContinueDuke() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return carryOn;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply returns the current set of lines. This should be called when duke.Duke is terminated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The finalized set of lines"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e finalizedLines() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines.getList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if a string contains the # character"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the string to be checked"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return true if the string contains \"#\", false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public boolean noHashTag(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (input.contains(\"#\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param inputString"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Command parse(String inputString) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!noHashTag(inputString)) { // Checks if the input contains \"#\" as it will cause problems."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Your input contains the # character, don\u0027t do that :(\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (inputString.indexOf(\"done \") \u003d\u003d 0) { // Checks if the input string is a done command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DoneParser doneParser \u003d new DoneParser(inputString, lines);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new DoneCommand(lines, doneParser);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.equals(\"list\")) { // Checks if the input string is a list command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new ListCommand(lines);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.equals(\"bye\")) { // Checks if the input string is a bye command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            carryOn \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"delete \") \u003d\u003d 0) { // If the input string is a delete command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeleteParser deleteParser \u003d new DeleteParser(inputString, lines);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new DeleteCommand(lines, deleteParser);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"find \") \u003d\u003d 0) { // If the user input is a find command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FindParser findParser \u003d new FindParser(inputString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new FindCommand(lines, findParser);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"tag \") \u003d\u003d 0) { // If the user input is a tag command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TagParser tagParser \u003d new TagParser(inputString, lines);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new TagCommand(lines, tagParser);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"untag \") \u003d\u003d 0) { // If the input is an untag command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            UntagParser untagParser \u003d new UntagParser(inputString, lines);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new UntagCommand(lines, untagParser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"todo \") \u003d\u003d 0) { // If the input is a TodoTask command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TodoParser todoParser \u003d new TodoParser(inputString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new TodoCommand(lines, todoParser);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"deadline \") \u003d\u003d 0) { // If the input is a DeadlineTask command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeadlineParser deadlineParser \u003d new DeadlineParser(inputString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new DeadlineCommand(lines, deadlineParser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"event \") \u003d\u003d 0) { // If the input is a event command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            EventParser eventParser \u003d new EventParser(inputString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return new EventCommand(lines, eventParser);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"I have no idea what you are saying!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 111
    }
  },
  {
    "path": "src/main/java/duke/parser/EventParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class EventParser implements TaskCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for the EventParser object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the command input for the Event command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public EventParser(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the event command is a valid command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the created event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException if there are errors in the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        int atIndex \u003d input.indexOf(\" /at \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean containsAt \u003d input.contains(\" /at \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean missingDate \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (atIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            missingDate \u003d input.substring(input.indexOf(\" /at \")).length() \u003d\u003d 5;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean missingTaskDescription \u003d input.contains(\"event /at \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (missingTaskDescription) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Where is your event description?!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (!containsAt || missingDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Oi, when is this event at??\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean validDateFormat \u003d Event.checkDateFormat(input.substring(atIndex + 5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                Event task \u003d new Event(input.substring(6, atIndex), input.substring(atIndex + 5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return task.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 44
    }
  },
  {
    "path": "src/main/java/duke/parser/FindParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class FindParser implements IndexCommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the FindParser object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the input command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public FindParser(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the find command is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return returns -1 if the command is valid, throws a DukeException if otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException thrown if the find command is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (input.length() \u003c\u003d 5) { // Checks if the input string does not contain a keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"What are you trying to find?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns the keyword for the find command if its valid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the keyword for the find command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String keywordIfValid() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            checkIfValid(); // The integer is not important, we just want to run checkIfValid()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return input.substring(5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 43
    }
  },
  {
    "path": "src/main/java/duke/parser/IndexCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public interface IndexCommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    int checkIfValid() throws DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/TagParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TagParser implements IndexCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for the TagParser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the tag command by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be checked."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public TagParser(String input, TaskList lines) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the tag command is valid and throws a DukeException explaining the error if otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the index, which is valid, as written in the input command by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException if there are errors in the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean missingTagDetails \u003d input.length() \u003c\u003d 6"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                || input.length() \u003d\u003d 7 \u0026\u0026 input.lastIndexOf(\" \") \u003d\u003d 6;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (missingTagDetails) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Hey, your tag command is missing details! Check it again!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return checkAndGetIndex();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the index exists in TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index the index to be checked."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return true if its valid, false otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public boolean checkValidIndex(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d lines.getList().size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the command contains a single or double digit index and extracts it, throwing a DukException if there"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * are errors in the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException if there are errors in the command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int checkAndGetIndex() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String taskIndex \u003d input.substring(4, 6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean singleDigit \u003d taskIndex.contains(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (singleDigit) { // if the tag index is a single digit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int index \u003d Integer.parseInt(taskIndex.substring(0, 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (!checkValidIndex(index)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"No such task exists!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (NumberFormatException e) { // Thrown by parseInt"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"That is not a valid index input!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int index \u003d Integer.parseInt(taskIndex.substring(0, 2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (!checkValidIndex(index)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"No such task exists!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"That is not a valid index input!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Obtains the description of the tag in the command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index the index written inside the command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the description in the tag command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String getDescription(int index) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (index \u003c 10) { // Checks if its a double digit index or single digit."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return input.substring(6);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return input.substring(7);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 92
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public interface TaskCommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    String checkIfValid() throws DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/TodoParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TodoParser implements TaskCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for the TodoParser object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public TodoParser(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the task command is valid, then returns the task as a string if it is and throw a DukeException if"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * errors occur."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return a String representing the created task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException if there are errors in the input command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean emptyDescription \u003d input.length() \u003c\u003d 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (emptyDescription) { // Checks if there is an input for the task command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Hey! Your Todo is empty \u003e:(\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (input.indexOf(\" \") !\u003d 4) { // Checks if the input is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"What are you even saying?!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Todo task \u003d new Todo(input.substring(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return task.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 34
    }
  },
  {
    "path": "src/main/java/duke/parser/UntagParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class UntagParser implements IndexCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the UntagParser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the TaskList to be checked."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public UntagParser(String input, TaskList lines) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if the index in the untag command is valid and returns it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the index specified in the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException if there are errors in the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int checkIfValid() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean missingIndex \u003d input.length() \u003c\u003d 6;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (missingIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"Which task are you trying to untag?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int index \u003d Integer.parseInt(input.substring(6));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (index \u003c\u003d 0 || index \u003e lines.getList().size()) { // Checks if the index exists in the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"No such task exists!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (NumberFormatException e) { // Thrown by parseInt."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"What kind of task index is that?!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 41
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DukeParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The task list */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The directoryPath */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private String directoryPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The filePath */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The File object with filePath as its param */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private File data;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the Storage class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param directoryPath the path to the directory containing the data.txt file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param filePath the path to the data.txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Storage(String directoryPath, String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.directoryPath \u003d directoryPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            this.processData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException ignored) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            //Exceptions are ignored as processData() checks if the path is valid, if not create the path"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Obtains the file required to begin duke.Duke. If the files/folders are missing, they would be created in the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * specified directories. It then converts the txt file into an ArrayList{@link ArrayList} containing strings that"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * represent the tasks specified in the txt file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * It is important to know that the arrayList is not updated throughout the use of duke.Duke. The goal of this class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * is to only process the initial data.txt file upon loading and saving a final updated copy of the txt file which"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * has to be provided. Updates occur in the Parser{@link DukeParser} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws IOException An exception is thrown as the file and directory paths specified might be invalid or cannot"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * be found. In this case, the exception can be ignored as the method creates the directories as needed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void processData() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File directory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        data \u003d new File(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!data.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            data.createNewFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert data.exists() : \"file does not exist!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Scanner fileReader \u003d new Scanner(data);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        while (fileReader.hasNextLine()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String nextLine \u003d new String(fileReader.nextLine().getBytes(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            buffer.append(nextLine).append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        fileReader.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String fileContents \u003d buffer.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (fileContents.length() !\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String[] lineArray \u003d fileContents.split(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Collections.addAll(lines, lineArray);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply returns the ArrayList."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the ArrayList stored in the class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e getData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Saves into the txt file, located in the path specified when creating the storage object, a list of tasks which"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * is obtained from the supplied ArrayList parameter. The old txt file is overwritten as a result. Call this"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * method only after calling processData."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param finalLines the list of tasks to be saved"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void saveData(ArrayList\u003cString\u003e finalLines) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        StringBuffer finalLineList \u003d new StringBuffer();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        for (int i \u003d 0; i \u003c finalLines.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String currentLine \u003d finalLines.get(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            finalLineList.append(currentLine).append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            OutputStreamWriter writer \u003d new OutputStreamWriter(new FileOutputStream(data), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            writer.write(finalLineList.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            //ignored"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 106
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private int numberOfItems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the TaskList object. It takes in an ArrayList of Strings which would be manipulated using the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * methods in the object. It also stores the number of items in said ArrayList and the number gets updated with"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * certain TaskList methods. This is to reduce the number of calls to ArrayList.size()."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines The ArrayList to be stored and manipulated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.numberOfItems \u003d lines.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Adds a task to the task list if the number of items is less than 100. Updates the number of items in the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * accordingly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The task to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void addTask(String task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (numberOfItems \u003c 100) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            numberOfItems +\u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Removes a task from the task list based on the index provided. Updates the number of items in the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * accordingly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index the index of the task to be removed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        numberOfItems -\u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Changes a task in the task list based on the index provided to the task provided."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The updated task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index the index of the task to be replaced."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void updateTask(String task, int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        // Index has to be a valid index in lines"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert index \u003c\u003d (lines.size() - 1) \u0026\u0026 index \u003e\u003d 0 : \"Invalid Index\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.set(index, task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns the stored arrayList of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the lists of tasks currently stored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns the task stored in the position provided. This method is only called after verifying that the position"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * is valid, i.e not negative and not more than the number of items in the stored list. This is done in the Parser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param position the position of the task desired."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the task desired."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String getTask(int position) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines.get(position);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply returns the number of items in the stored list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the number of items in the stored list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int getNumberOfItems() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return numberOfItems;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param tagDescription"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public boolean tagItem(int index, String tagDescription) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String task \u003d lines.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (task.contains(\" #\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String taggedTask \u003d task + \" #\" + tagDescription;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.set(index, taggedTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * removes the tag from a tagged task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index the tagged task to be untagged"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return true if a tag is removed, false otherwise"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public boolean removeTag(int index) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String task \u003d lines.get(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        int startIndex \u003d task.indexOf(\" #\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (startIndex \u003c 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            task \u003d task.substring(0, startIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.set(index, task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Finds all tasks that contains the keyword"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param keyword The keyword that we want our resulting tasks to have"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return An arrayList containing the tasks that contains the keyword"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e find(String keyword) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        ArrayList\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String task \u003d lines.get(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (task.contains(keyword)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 139
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Constructor of the Deadline object which extends Task{@link Task}. It stores the description of the task as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * as the deadline of the task, formatted in FORMATSTYLE.FULL."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description the description of the Deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param by the date the deadline should be done by. It should follow the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.date \u003d localDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.by \u003d localDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply checks if the \"by\" String observes the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param date The String which represents by when the deadline is due."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return True if the date String follows the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException thrown if the \"by\" String does not follow the specified format, or if the date is invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * e.g. the 50th of June."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static boolean checkDateFormat(String date) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        int stringLength \u003d date.length();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean invalidDateString \u003d stringLength !\u003d 10;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (invalidDateString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"That is not a valid date!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try { //Further checks if the date String is a valid date format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                LocalDate localDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Please check your date! It is clearly not realistic \u003e:(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor of the Event object which is extended from Task{@link Task}. It takes in a task description as"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * well as an \"at\" String which represents when the event will be held, formatted in FORMATSTYLE.FULL."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description The description of the Event object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param at the date the deadline should be done by. It should follow the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(at, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.date \u003d localDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.at \u003d localDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply checks if the \"at\" String observes the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param date The String which represents by when the deadline is due."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return True if the date String follows the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException thrown if the \"by\" String does not follow the specified format, or if the date is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * e.g. the 50th of June."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static boolean checkDateFormat(String date) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        int stringLength \u003d date.length();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean invalidDateString \u003d stringLength !\u003d 10;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (invalidDateString) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"That is not a valid date!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try { //Further checks if the date String is a valid date format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                LocalDate localDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Please check your date! It is clearly not realistic \u003e:(\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Constructor for a Task object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description the description of the Task item."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Updates the Task object by setting it to be done or not yet done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param check sets the status of the object to be done or not done. 1 \u003d done, any other int is not done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void updateTask(int check) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (check \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return (isDone ? \"[\" + \"\\u2713\" + \"]\" + \" \" + this.description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                : \"[\" + \"\\u2718\" + \"]\" + \" \" + this.description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the Todo object which extends Task{@link Task}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description simply the descriptiong of the todo object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 18
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/stark.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/jarvis.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        // Adds the intro message into the Duke GUI upon start up"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.introduction(), dukeImage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 56
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * The Ui class handles all of the Ui interaction with the users using its various static methods"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private static String divider \u003d \"************************************************\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns a String to be printed as an introduction upon start up duke.Duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return  returns the intro String"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String introduction() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String intro \u003d \"Hello! I\u0027m duke.Duke\\nWhat can i do for you?\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return divider + intro + divider;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns a done statement while updating the task string by swapping the cross with a tick."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The doneTask argument must comply with the standard output string format of duke.Duke tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param doneTask the task that is to be marked done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return returns the updated line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String updateDoneTask(String doneTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert doneTask.length() \u003e\u003d 5 : \"Invalid task done\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return doneTask.substring(0, 4) + \"\\u2713\" + doneTask.substring(5);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns a string representing the message shown to users when a task is done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param doneTask The task to be updated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the output message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String done(String doneTask) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String updatedLine \u003d updateDoneTask(doneTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d divider + \"Nice! I have marked this task as done:\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        message \u003d message + updatedLine + \"\\n\" + divider;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns out the tasks in numerical order based on the ArrayList param."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The lines argument must contain Strings that comply with the standard output string format of duke.Duke tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines List of tasks to be printed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The string representing the list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String listTasks(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        list \u003d list + divider + \"Here are the tasks in your list!\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int numbering \u003d i + 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String task \u003d lines.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            list \u003d list + (numbering + \".\" + task + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        list \u003d list + divider;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Same as listTasks() except that the message printed out is slightly different. If the ArrayList supplied is"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * empty, a \"no matching tasks\" message would be printed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines The list of tasks to print out."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return A string representing the list of tasks / message to print out."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String listMatchingTasks(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String list \u003d divider; // Listing matching tasks will always start with a divider string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (lines.size() \u003e 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            list \u003d list + \"Here are the matching tasks in your list!\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int numbering \u003d i + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                String task \u003d lines.get(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                list \u003d list + numbering + \".\" + task + \"\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            list \u003d list + \"Unfortunately no tasks matches your keyword :(\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        list \u003d list + divider;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns a String representing the message shown when users exit duke.Duke."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The string representing the goodbye message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String bye() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return divider + \"Bye! See you next time!\" + \"\\n\" + divider;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns a message representing the tagged task or an error message depending on the supplied"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * boolean."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task the potentially tagged task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param tagged the boolean representing if the task is tagged or not"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the message representing the outcome"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String taggedTask(String task, boolean tagged) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (tagged) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d divider + \"Noted. The following task has been tagged.\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + task + \"\\n\" + divider + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d divider + \"Hey, the task has already been tagged! Remove the tag first!\\n\" + divider;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Prints out messages depending if a task was successfully untagged or not"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task the task that might have been untagged"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param removed true if the task is untagged, false otherwise"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the message representing the outcome"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String untaggedTask(String task, boolean removed) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (removed) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String message \u003d divider + \"Noted. The following task has been untagged!\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + task + \"\\n\" + divider + \"\\n\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String message \u003d divider + \"The task did not have a tag to begin with!\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + divider;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns a statement confirming that a task has been deleted, as well as the number of tasks left."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The task string representing the task that was deleted."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param numberOfItems the remaining number of tasks."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the deleted task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String deletedTask(String task, int numberOfItems) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d divider + \"Noted, the following task has been deleted\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        message \u003d message + task + \"\\n\" + divider + \"\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        message \u003d message + \"Now you have \" + numberOfItems + \" tasks in the list.\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Prints out a statement confirming that a task has been added, as well as the number of tasks currently."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The task string representing the task that was added."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param numberOfItems the current number of tasks."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the message representing the added task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String addedTask(String task, int numberOfItems) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (numberOfItems \u003c 100) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + divider + \"Got it, I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + \" \" + task + \"\\n\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + \"Now you have \" + numberOfItems + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + divider;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + divider + \"Sorry, the list is full!\\n\" + divider;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Handles DukeExceptions{@link DukeException} thrown by duke.Duke package methods by returning a string"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * representing the error."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param e The DukeException to be handled."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the exception."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String handleDukeException(DukeException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return divider + e.getMessage() + \"\\n\" + divider;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 184
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 19
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the Storage class creates the necessary files and folders should they be missing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void processData_creatingDirectories_directoriesCreated() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File dir \u003d new File(\"src/main/data/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (dir.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            for (File file: dir.listFiles()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    file.delete();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (dir.listFiles().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                dir.delete();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Storage storage \u003d new Storage(\"src/main/data/\", \"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            storage.processData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            File newDir \u003d new File(\"src/main/data/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assert newDir.exists();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            File newFile \u003d new File(\"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assert newFile.exists();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            newFile.delete();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            newDir.delete();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void saveData_testSavingData_dataSaved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File dir \u003d new File(\"src/main/data/\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (dir.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            for (File file: dir.listFiles()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    file.delete();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (dir.listFiles().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                dir.delete();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Storage storage \u003d new Storage(\"src/main/data/\", \"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        TaskList lines \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Todo(\"Homework\").toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Deadline(\"Project\", \"2020-09-09\").toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Event(\"Meeting\", \"2020-10-10\").toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            storage.processData();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            storage.saveData(lines.getList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            File newFile \u003d new File(\"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Scanner fileReader \u003d new Scanner(newFile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            while (fileReader.hasNextLine()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                buffer.append(fileReader.nextLine()).append(\"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String fileContents \u003d buffer.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String[] lineArray \u003d fileContents.split(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            for (int i \u003d 0; i \u003c lineArray.length; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                assertEquals(lines.getTask(i), lineArray[i]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail(); //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 88
    }
  },
  {
    "path": "src/test/java/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class ByeCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the Bye Command outputs the correct message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validByeCommand_correctOutput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            ByeCommand byeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String output \u003d byeCommand.execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.bye(), output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 24
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected TaskList lines \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected void setLines() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Todo(\"Homework\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Deadline(\"Project\", \"2020-09-09\").toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Event(\"Meeting\", \"2020-10-10\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected void resetLines() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 22
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DeleteParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DeleteCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeleteCommand provides the correct output given a DeleteParser that parsed an invalid delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidDeleteCommand_correctOutput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeleteParser invalidDeleteCommandParser \u003d new DeleteParser(\"delete 4\", lines);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeleteCommand invalidDeleteCommand \u003d new DeleteCommand(lines, invalidDeleteCommandParser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutput \u003d invalidDeleteCommand.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.handleDukeException(new DukeException(\"Hey, no such task exists!\")), invalidOutput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeleteCommand provides the correct output given a DeleteParser that parsed a valid delete command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validDeleteCommand_correctOutput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeleteParser validDeleteCommandParser \u003d new DeleteParser(\"delete 1\", lines);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeleteCommand validDeleteCommand \u003d new DeleteCommand(lines, validDeleteCommandParser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String deletedTask \u003d lines.getTask(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validDeleteCommand.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.deletedTask(deletedTask, 2), validOutput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 49
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DoneParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DoneCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DoneCommand provides the correct output given a DoneParser that parsed an invalid input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidDoneCommand_correctOutput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DoneParser invalidDoneCommandParser \u003d new DoneParser(\"done 0\", lines);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DoneCommand invalidDoneCommand \u003d new DoneCommand(lines, invalidDoneCommandParser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutput \u003d invalidDoneCommand.execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.handleDukeException(new DukeException(\"Hey, no such task exists!\")), invalidOutput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DoneCommand provides the correct output given a DoneParser that parsed a valid input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validDoneCommand_correctOutput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DoneParser validDoneCommandParser \u003d new DoneParser(\"done 3\", lines);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DoneCommand validDoneCommand \u003d new DoneCommand(lines, validDoneCommandParser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validDoneCommand.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.done(lines.getTask(2)), validOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 46
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.FindParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class FindCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if FindCommand provides the correct output given a FindParser that parsed an invalid find command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidFindCommand_correctOutput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FindParser invalidFindParser \u003d new FindParser(\"find NUS\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FindCommand invalidFindCommand \u003d new FindCommand(lines, invalidFindParser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutput \u003d invalidFindCommand.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.listMatchingTasks(new ArrayList\u003c\u003e()), invalidOutput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if FindCommand provides the correct output given a FindParser that parsed a valid find command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validFindCommand_correctOutput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FindParser validFindParser \u003d new FindParser(\"find e\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FindCommand validFindCommand \u003d new FindCommand(lines, validFindParser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validFindCommand.execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.listMatchingTasks(lines.getList()), validOutput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 51
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class ListCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the ListCommand provides the correct output given a TaskList lines."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validListCommand_correctOutput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            ListCommand listCommand \u003d new ListCommand(lines);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String output \u003d listCommand.execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.listTasks(lines.getList()), output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 26
    }
  },
  {
    "path": "src/test/java/duke/command/TagCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.TagParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TagCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the TagCommand provides the correct output given a TagParser that parsed an invalid tag command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidTagCommand_correctOutput() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TagParser invalidTagParser \u003d new TagParser(\"tag 4 urgent\", lines);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TagCommand invalidTagCommand \u003d new TagCommand(lines, invalidTagParser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutput \u003d invalidTagCommand.execute();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.handleDukeException(new DukeException(\"No such task exists!\")), invalidOutput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the TagCommand provides the correct output given a TagParser that parsed a valid tag command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validTagCommand_correctOutput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TagParser validTagParser \u003d new TagParser(\"tag 2 urgent\", lines);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TagCommand validTagCommand \u003d new TagCommand(lines, validTagParser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validTagCommand.execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.taggedTask(lines.getTask(1), true), validOutput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 47
    }
  },
  {
    "path": "src/test/java/duke/command/TasksCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.DeadlineParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.EventParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.TodoParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TasksCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if TodoCommand provides the correct output given a TodoParser that parsed an invalid todotask command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidTodoCommand_correctOutput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TodoParser invalidTodoParser \u003d new TodoParser(\"todo \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TodoCommand invalidTodoCommand \u003d new TodoCommand(lines, invalidTodoParser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutcome \u003d invalidTodoCommand.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.handleDukeException(new DukeException(\"Hey! Your Todo is empty \u003e:(\")), invalidOutcome);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if TodoCommand provides the correct output given a TodoParser that parsed an valid todotask command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validTodoCommand_correctOutput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TodoParser validTodoParser \u003d new TodoParser(\"todo sleep\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            TodoCommand validTodoCommand \u003d new TodoCommand(lines, validTodoParser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutcome \u003d validTodoCommand.execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Todo expectedTodo \u003d new Todo(\"sleep\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.addedTask(expectedTodo.toString(), 4), validOutcome);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeadlineCommand provides the correct output given a DeleteParser that parsed an invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * deadline task command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidDeadlineCommand_correctOutput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeadlineParser invalidDeadlineParser \u003d new DeadlineParser(\"deadline homework /by 2020-31-31\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeadlineCommand invalidDeadlineCommand \u003d new DeadlineCommand(lines, invalidDeadlineParser);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutcome \u003d invalidDeadlineCommand.execute();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.handleDukeException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    new DukeException(\"Please check your date! It is clearly not realistic \u003e:(\")), invalidOutcome);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeadlineCommand provides the correct output given a DeleteParser that parsed a valid"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * deadline task command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validDeadlineCommand_correctOutput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeadlineParser validDeadlineParser \u003d new DeadlineParser(\"deadline homework /by 2020-09-09\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            DeadlineCommand validDeadlineCommand \u003d new DeadlineCommand(lines, validDeadlineParser);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutcome \u003d validDeadlineCommand.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Deadline expectedDeadline \u003d new Deadline(\"homework\", \"2020-09-09\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.addedTask(expectedDeadline.toString(), 4), validOutcome);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if EventCommand provides the correct output given an EventParser that parsed an invalid event task command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidEventCommand_correctOutput() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            EventParser invalidEventParser \u003d new EventParser(\"event Career-Fair /at\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            EventCommand invalidEventCommand \u003d new EventCommand(lines, invalidEventParser);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutcome \u003d invalidEventCommand.execute();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.handleDukeException(new DukeException(\"Oi, when is this event at??\")), invalidOutcome);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if EventCommand provides the correct output given an EventParser that parsed a valid event task command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validEventCommand_correctOutput() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            EventParser validEventParser \u003d new EventParser(\"event Career-Fair /at 2020-10-10\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            EventCommand validEventCommand \u003d new EventCommand(lines, validEventParser);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutcome \u003d validEventCommand.execute();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Event expectedEvent \u003d new Event(\"Career-Fair\", \"2020-10-10\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.addedTask(expectedEvent.toString(), 4), validOutcome);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 126
    }
  },
  {
    "path": "src/test/java/duke/command/UntagCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.parser.UntagParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class UntagCommandTest extends CommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the UntagCommand provides the correct output given a UntagParser that parsed an invalid untag command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_invalidUntagCommand_correctOutput() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.tagItem(1, \"urgent\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            UntagParser invalidUntagParser \u003d new UntagParser(\"untag 0\", lines);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            UntagCommand invalidUntagCommand \u003d new UntagCommand(lines, invalidUntagParser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutput \u003d invalidUntagCommand.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.handleDukeException(new DukeException(\"No such task exists!\")), invalidOutput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the UntagCommand provides the correct output given a UntagParser that parsed a valid untag command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void execute_validUntagCommand_correctOutput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.tagItem(1, \"urgent\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            UntagParser validUntagParser \u003d new UntagParser(\"untag 1\", lines);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            UntagCommand validUntagCommand \u003d new UntagCommand(lines, validUntagParser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validUntagCommand.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.untaggedTask(lines.getTask(1), false), validOutput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 49
    }
  },
  {
    "path": "src/test/java/duke/parser/DeleteParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DeleteParserTest extends ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeleteParser parses an invalid delete command correctly with its checkIfValid()."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_invalidDeleteCommand_correctOutput() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DeleteParser invalidDeleteParser \u003d new DeleteParser(\"delete 4\", lines);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int invalidIndex \u003d invalidDeleteParser.checkIfValid();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"Hey, no such task exists!\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeleteParser parses a valid delete command correctly with its checkIfValid()."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_validDeleteCommand_correctOutput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DeleteParser invalidDeleteParser \u003d new DeleteParser(\"delete 2\", lines);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int validIndex \u003d invalidDeleteParser.checkIfValid();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(2, validIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 42
    }
  },
  {
    "path": "src/test/java/duke/parser/DoneParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DoneParserTest extends ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DoneParser parses an invalid done command properly with its checkIfValid()."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_invalidDoneCommand_correctOutput() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DoneParser invalidDoneParser \u003d new DoneParser(\"done 0\", lines);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int invalidOutcome \u003d invalidDoneParser.checkIfValid();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"Hey, no such task exists!\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DoneParser parses a valid done command properly with its checkIfValid()."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_validDoneCommand_correctOutput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DoneParser validDoneParser \u003d new DoneParser(\"done 2\", lines);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int validOutcome \u003d validDoneParser.checkIfValid();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(2, validOutcome);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 40
    }
  },
  {
    "path": "src/test/java/duke/parser/DukeParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DukeParserTest extends ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DukeParser parses an invalid input command properly with its parse()."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void parse_invalidInputCommand_correctOutput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DukeParser dukeParser \u003d new DukeParser(lines.getList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Command invalidCommand \u003d dukeParser.parse(\"#tag 2 first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"Your input contains the # character, don\u0027t do that :(\", e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DukeParser parses a valid input command properly with its parse()."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void parse_validInputCommand_correctOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DukeParser dukeParser \u003d new DukeParser(lines.getList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Command validCommand \u003d dukeParser.parse(\"done 2\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(Ui.done(lines.getTask(2)), validCommand.execute());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 43
    }
  },
  {
    "path": "src/test/java/duke/parser/FindParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class FindParserTest extends ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if FindParser parses an invalid find command properly with its keywordIfValid()."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void keywordIfValid_invalidFindCommand_correctOutput() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        FindParser invalidFindParser \u003d new FindParser(\"find\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidKeyword \u003d invalidFindParser.keywordIfValid();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"What are you trying to find?\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if FindParser parses a valid find command properly with its keywordIfValid()."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void keywordIfValid_validFindCommand_correctOutput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        FindParser validFindParser \u003d new FindParser(\"find ome\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validKeyword \u003d validFindParser.keywordIfValid();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"ome\", validKeyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 36
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected TaskList lines \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected void setLines() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Todo(\"Homework\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Deadline(\"Project\", \"2020-09-09\").toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.addTask(new Event(\"Meeting\", \"2020-10-10\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected void resetLines() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 22
    }
  },
  {
    "path": "src/test/java/duke/parser/TagParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TagParserTest extends ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if TagParser parses an invalid tag command properly with its  checkIfValid()."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_invalidTagCommand_correctOutput() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        TagParser invalidTagParser \u003d new TagParser(\"tag 10 important\", lines);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int invalidIndex \u003d invalidTagParser.checkIfValid();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"No such task exists!\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if TagParser parses a valid tag command properly with its checkIfValid()."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_validTagCommand_correctOutput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        TagParser validTagParser \u003d new TagParser(\"tag 1 important\", lines);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int validIndex \u003d validTagParser.checkIfValid();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(1, validIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 40
    }
  },
  {
    "path": "src/test/java/duke/parser/TasksParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TasksParserTest extends ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if TodoParser parses an invalid todocommand properly with its checkIfValid()."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_invalidTodoCommand_correctOutput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        TodoParser invalidTodoParser \u003d new TodoParser(\"todo \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutput \u003d invalidTodoParser.checkIfValid();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"Hey! Your Todo is empty \u003e:(\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if TodoParser parses a valid todocommand properly with its checkIfValid()."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_validTodoCommand_correctOutput() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        TodoParser validTodoParser \u003d new TodoParser(\"todo housework\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validTodoParser.checkIfValid();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Todo expectedTodoOutput \u003d new Todo(\"housework\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(expectedTodoOutput.toString(), validOutput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeadlineParser parses an invalid deadline command properly with its checkIfValid()."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_invalidDeadlineCommand_correctOutput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DeadlineParser invalidDeadlineParser \u003d new DeadlineParser(\"deadline assignment /by \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d invalidDeadlineParser.checkIfValid();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"Oi, when is this deadline due??\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if DeadlineParser parses a valid deadline command properly with its checkIfValid()."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_validDeadlineCommand_correctOutput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        DeadlineParser validDeadlineParser \u003d new DeadlineParser(\"deadline assignment /by 2020-09-09\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validDeadlineParser.checkIfValid();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Deadline expectedDeadlineOutput \u003d new Deadline(\"assignment\", \"2020-09-09\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(expectedDeadlineOutput.toString(), validOutput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if EventParser parses an invalid event command properly with its checkIfValid()."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_invalidEventCommand_correctOutput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        EventParser invalidEventParser \u003d new EventParser(\"event conference /at 2020-13-13\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String invalidOutput \u003d invalidEventParser.checkIfValid();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"Please check your date! It is clearly not realistic \u003e:(\", e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if EventParser parses a valid event command properly with its checkIfValid()."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_validEventCommand_correctOutput() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        EventParser validEventParser \u003d new EventParser(\"event conference /at 2020-11-12\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String validOutput \u003d validEventParser.checkIfValid();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Event expectedEventOutput \u003d new Event(\"conference\", \"2020-11-12\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(expectedEventOutput.toString(), validOutput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 101
    }
  },
  {
    "path": "src/test/java/duke/parser/UntagParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class UntagParserTest extends ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if UntagParser parses an invalid untag command properly with its checkIfValid()."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_invalidUntagCommand_correctOutput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        UntagParser invalidUntagParser \u003d new UntagParser(\"untag \", lines);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int invalidIndex \u003d invalidUntagParser.checkIfValid();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(\"Which task are you trying to untag?\", e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if UntagParser parses a valid untag command properly with its checkIfValid()."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void checkIfValid_validUntagCommand_correctOutput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setLines();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        UntagParser validUntagParser \u003d new UntagParser(\"untag 3\", lines);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int validIndex \u003d validUntagParser.checkIfValid();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            assertEquals(3, validIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        resetLines();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 41
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "todo revise lectures"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "deadline return clothes /by the day before tomorrow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "event project meeting /at jurong bird park"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "javac  -cp ..\\src\\  -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "java -classpath ../bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "-": 36
    }
  }
]
