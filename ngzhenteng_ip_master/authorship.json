[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "# main.java.duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/main.java.duke.Duke.java` file, right-click it, and choose `Run main.java.duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    mainClassName \u003d \"main.java.duke.Duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 15,
      "-": 45
    }
  },
  {
    "path": "src/main/java/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    String taskType \u003d \"D\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    LocalDate localDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    LocalTime localTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Deadline(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public LocalTime stringToLocalTime(String hour, String minutes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        LocalTime lc \u003d LocalTime.parse(hour + \":\" + minutes);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return lc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the deadline inputted by the user with brackets surrounding the date and time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param byDateTime string in the format \"by 2019-11-31 1700\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return bracketed deadline format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String bracketedDeadline(String byDateTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // description came from user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // an array where index 0 contains \"by\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // index 1 contains date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // index 2 contains time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String[] descSplitBySpace \u003d byDateTime.split(\" \", 3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert descSplitBySpace.length \u003d\u003d 3 : \"deadline is not in the format /by 2011-11-29 1830\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        localDate \u003d LocalDate.parse(descSplitBySpace[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String timeString \u003d descSplitBySpace[2];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        localTime \u003d stringToLocalTime(timeString.substring(0, timeString.length() - 2),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                timeString.substring(timeString.length() - 2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"(\" + descSplitBySpace[0] + \": \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localDate.getMonth() + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localDate.getDayOfMonth() + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localDate.getYear()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                +\", \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localTime.format(DateTimeFormatter.ofPattern(\"HH:mm a\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns a formatted description of the Deadline task, with the date and time dateline wrapped in parenthesis"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return a formatted description of the Deadline task, with the date and time dateline wrapped in parenthesis"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String formattedDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert super.description.length() \u003e 0 : \"task description is empty\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // an array where index 0 contains \"deadline return book\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // and index 1 contains \"by 2019-10-15 1800\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String[] descSplitBySlash \u003d super.description.split(\"/\", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (descSplitBySlash.length \u003e 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String dateTimeWBrackets \u003d bracketedDeadline(descSplitBySlash[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return descSplitBySlash[0] + dateTimeWBrackets;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // description came from System file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            assert descSplitBySlash.length \u003d\u003d 1 : \"There is a \u0027/\u0027 inside the description of this task.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return descSplitBySlash[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns a string representation of the Deadline object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return a string representation of the Deadline object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"[\" + taskType + \"]\" + \"[\" + super.getStatusIcon()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"] \" + formattedDescription();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 74
    }
  },
  {
    "path": "src/main/java/main/java/duke/DeadlineFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class DeadlineFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Default constructor which creates an instance of DeadlineFormatException with the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * default error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public DeadlineFormatException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(\"  \\u2639 OOPS!!! The command for a deadline/event task must follow this format: deadline \" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \"homework /by 2019-11-21 1800\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of DeadlineFormatException, a custom exception"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * for user inputs of the wrong deadline format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param error the string representation of the error"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public DeadlineFormatException(String error) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 23
    }
  },
  {
    "path": "src/main/java/main/java/duke/DeleteTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class DeleteTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of DeleteTaskException, a custom exception that occurs when deleting tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param error the string representing the error."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public DeleteTaskException(String error) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 11
    }
  },
  {
    "path": "src/main/java/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    //variables have to match the id within the fxml file in order for @FXML to work as intended"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Private constructor which creates an isntance of DialogBox from a static context"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param text To be displayed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param img To be displayed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Circle ivCrop \u003d new Circle(50.0, 50.0, 50.0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        displayPicture.setClip(ivCrop);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 65
    }
  },
  {
    "path": "src/main/java/main/java/duke/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class DoneException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of DoneException, a custom exception that occurs when marking tasks as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param error the string representing the error."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public DoneException(String error) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 11
    }
  },
  {
    "path": "src/main/java/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * The central class in handling the various objects in the Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * application"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Ui object for Duke to obtain user input and handle those inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * An empty constructor, known as the init method for the method start to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * launch the Graphic User Interface"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of main.java.duke.Duke"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param filepath the directory of the tasklist.txt file where tasks are stored"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d storage.getStartupTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert taskArrayList !\u003d null : \"taskArrayList is null\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ui \u003d new Ui(taskList, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Starts the user interface for command line interface"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ui.handleUserInput();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Passes input string to ui.getResultFromParser(String input) and returns the response to be displayed in GUI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return duke\u0027s response to be displayed in GUI."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"Duke responds:\\n\" + ui.getDukeResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert workingDir.length() \u003e 0 : \"working directory is empty\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Duke application \u003d new Duke(workingDir + File.separator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"tasklist.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        application.run();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 57,
      "-": 4
    }
  },
  {
    "path": "src/main/java/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Default constructor for DukeException containing a generic error message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(\"  \\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what \" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \"that means :-(\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of DukeException, a custom class for exceptions found within the Duke application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param error the string representation of the error"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 20
    }
  },
  {
    "path": "src/main/java/main/java/duke/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Default constructor which creates an instance of EmptyDescriptionException with the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * default error message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EmptyDescriptionException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(\"  \\u2639 OOPS!!! The \" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \"description\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \" of a task cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of EmptyDescriptionException, a custom exceptions for user commands with no task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param error the string representation of the error"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EmptyDescriptionException(String error) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 24
    }
  },
  {
    "path": "src/main/java/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    String taskType \u003d \"E\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    LocalDate localDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    LocalTime localTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public LocalTime stringToLocalTime(String hour, String minutes) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        LocalTime lc \u003d LocalTime.parse(hour +\":\" + minutes);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return lc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the deadline inputted by the user with brackets surrounding the date and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param byDateTime string in the format \"by 2019-11-31 1700\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return bracketed deadline format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String bracketedDeadline(String byDateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // description came from user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // an array where index 0 contains \"by\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // index 1 contains date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // index 2 contains time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String[] descSplitBySpace \u003d byDateTime.split(\" \", 3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert descSplitBySpace.length \u003d\u003d 3 : \"deadline is not in the format /by 2011-11-29 1830\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        localDate \u003d LocalDate.parse(descSplitBySpace[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String timeString \u003d descSplitBySpace[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        localTime \u003d stringToLocalTime(timeString.substring(0, timeString.length() - 2),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                timeString.substring(timeString.length() - 2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"(\" + descSplitBySpace[0] + \": \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localDate.getMonth() + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localDate.getDayOfMonth() + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localDate.getYear()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                +\", \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + localTime.format(DateTimeFormatter.ofPattern(\"HH:mm a\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String formattedDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert super.description.length() \u003e 0 : \"task description is empty\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // an array where index 0 contains \"deadline return book\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // and index 1 contains \"by 2019-10-15 1800\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String[] descSplitBySlash \u003d super.description.split(\"/\", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (descSplitBySlash.length \u003e 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String dateTimeWBrackets \u003d bracketedDeadline(descSplitBySlash[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return descSplitBySlash[0] + dateTimeWBrackets;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // description came from System file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            assert descSplitBySlash.length \u003d\u003d 1 : \"There is a \u0027/\u0027 inside the description of this task.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return descSplitBySlash[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"[\" + taskType + \"]\" + \"[\" + super.getStatusIcon()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"] \" + formattedDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 67
    }
  },
  {
    "path": "src/main/java/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 14
    }
  },
  {
    "path": "src/main/java/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Duke duke \u003d new Duke(workingDir + File.separator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            + \"tasklist.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The main entry point for all JavaFX applications."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The start method is called after the init method has returned,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * and after the system is ready for the application to begin running."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * NOTE: This method is called on the JavaFX Application Thread."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param primaryStage the primary stage for this application, onto which"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *                     the application scene can be set."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *                     Applications may create other stages, if needed, but they will not be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *                     primary stages."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws Exception if something goes wrong"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void start(Stage primaryStage) throws MalformedURLException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 50
    }
  },
  {
    "path": "src/main/java/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Image userImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Image dukeImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 52
    }
  },
  {
    "path": "src/main/java/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * The class responsible for identifying the type of task the user is trying to create and add to his/her list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns a task object according to the type of Task added by the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param input the string user input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return a task object according to the type of Task added by the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws EmptyDescriptionException when the given command has the task type but not the task description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Task handleInput(String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String[] commandComponents \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert commandComponents.length \u003e 0 : \"The string input cannot be split by a whitespace.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String taskType \u003d commandComponents[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Task taskToReturn;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (commandComponents.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            EmptyDescriptionException emptyDescException \u003d new EmptyDescriptionException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw emptyDescException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new Event(commandComponents[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new Deadline(commandComponents[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (taskType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new Todo(commandComponents[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 34
    }
  },
  {
    "path": "src/main/java/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private FileWriter appendFileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private BufferedWriter bufferedAppendWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private ArrayList\u003cTask\u003e startupTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of Storage, reads the file at the directory filepath and populates the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * list of tasks for other entities of Duke to gain access to."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param filepath the string path where a .txt file containing the list of tasks is stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // what about the IOException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                populateTaskList(file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // appendFileWriter appends new text whenever we write to the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // to maintain the previous entries."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            appendFileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            assert appendFileWriter !\u003d null : \"appendFileWriter not initialized properly\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            bufferedAppendWriter \u003d new BufferedWriter(appendFileWriter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Iterates through a file object using a scanner object, interprets the lines of text and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * populates the task list with the corresponding task objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param file File object that contains the list of tasks in text file format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void populateTaskList(File file) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // while there is still a line of string to read, populate the tasklist"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            while(fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                // dissect the line of String to create Task objects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                String taskDesc \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                String[] lineComponents \u003d taskDesc.split(\" \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                Task toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                if (taskDesc.contains(\"[T]\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    toAdd \u003d new Todo(lineComponents[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                } else if (taskDesc.contains(\"[D]\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    toAdd \u003d new Deadline(lineComponents[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                } else if (taskDesc.contains(\"[E]\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    toAdd \u003d new Event(lineComponents[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    toAdd \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    System.out.println(\"Couldn\u0027t read saved task from System\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                if (taskDesc.contains(\"\\u2713\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    // description has a tick"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    toAdd.markDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                if (toAdd !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    startupTaskList.add(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            System.out.println(fnfe.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Writes a string input to the text file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void writeToFile(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            bufferedAppendWriter.write(input + System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            bufferedAppendWriter.flush();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Overrides the existing text file using the overriding bufferedWriter."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void changeFileContents(TaskList taskList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // the FileWriter and BufferedWriters are created on demand here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // as they tend to change over time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            FileWriter overrideFileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            BufferedWriter bufferedOverrideWriter \u003d new BufferedWriter(overrideFileWriter);;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                Task toWrite \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                assert toWrite !\u003d null : \"task to be written into .txt storage file is null\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                bufferedOverrideWriter.write(toWrite.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            bufferedOverrideWriter.flush();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the task list saved previously in the text file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public ArrayList\u003cTask\u003e getStartupTaskList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return startupTaskList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 120
    }
  },
  {
    "path": "src/main/java/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of the Task class, the parent class for Todo, Deadline and Event classes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the symbol indicating if the task has been completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * \"\\u2713\" is unicode for the tick icon and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * \"\\u2718 is unicode for the cross icon."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Marks this instance of Task as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Marks this instance of Task as undone."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void markUndone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns a string representation of the Task object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return a string representation of the Task object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 49
    }
  },
  {
    "path": "src/main/java/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an isntance of TaskList which is a wrapper class for an ArrayList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Adds a task to the list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param task to be added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return true if the task was successfully added, false otherwise"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this.taskList.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the task removed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param taskIndex 0-indexed position of the task to be removed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return the task removed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Task removeTask(int taskIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this.taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the task at the specified index parameter"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param taskIndex 0-indexed position of the task to be retrieved without removing it."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return the task at the specified index parameter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this.taskList.get(taskIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the size of the arraylist task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return Returns the size of the task list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert this.taskList !\u003d null : \"taskList is null, unable to obtain its size.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Iterates through all tasks in the task ArrayList and appends tasks with descriptions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * containing the keyword to the returned result."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param keyword to be used for the search"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return a string with all tasks that have descriptions containing the keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String searchWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        StringBuilder matches \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String taskString \u003d taskList.get(i).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (taskString.contains(keyword)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                if (matches.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    matches.append(System.lineSeparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                matches.append(\"  \" + taskString + System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return matches.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Lists all tasks within the task list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                result.append(\"  \" + (i+1) + \".\" + taskList.get(i));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                result.append(\"  \" + (i+1) + \".\" + taskList.get(i) + System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 89
    }
  },
  {
    "path": "src/main/java/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    String taskType \u003d \"T\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of Todo class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns a string representation of the Todo object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return a string representation of the Todo object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert super.description.length() \u003e 0 : \"Description is empty\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"[\" + taskType + \"]\" + \"[\" + super.getStatusIcon()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"] \" + super.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 25
    }
  },
  {
    "path": "src/main/java/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * The class responsible for taking in user commands and displaying Duke\u0027s responses"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an instance of the Ui class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param taskList taskList object used to store tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param storage storage object used to read and write for the tasklist.txt file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Ui(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert this.taskList !\u003d null : \"taskList is assigned to null\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert this.storage !\u003d null : \"storage is assigned to null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Prints a horizontal line of fixed length."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void horiLine(int length) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            System.out.print(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (i \u003d\u003d length - 1) System.out.println(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Adds the passed task to the list of tasks and returns the response from Duke as a string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param toAdd The Task object to be added to the list of tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return The string response from duke for the input command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String handleAddTask(Task toAdd) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        storage.writeToFile(toAdd.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        taskList.addTask(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"  Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"    \" + toAdd.toString() + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"  Now you have \" + (taskList.size()+1) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Marks the task at index taskIndex of the task list as done, thereafter updates the contents"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * of the local text file storage and returns the string response from Duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param taskIndex index of the task in the task list, 0-indexed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return the string response from Duke for the given \u0027done\u0027 command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String markTaskDone(int taskIndex) throws IndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Task toMark \u003d taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        toMark.markDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        storage.changeFileContents(taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"  Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"    \" + toMark.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Deletes the task at index taskIndex of the task list, updates the contents"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * of the local text file storage and returns the string response from Duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param taskIndex index of the task in the task list, 0-indexed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return the string response from Duke for the given \u0027delete\u0027 command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String deleteTask(int taskIndex) throws IndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Task toDisplay \u003d taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        taskList.removeTask(taskIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        storage.changeFileContents(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return \"  Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"    \" + toDisplay.toString() + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + \"  Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Takes in the user command and passes it to the parser object, to receive the correct Task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * to be handled appropriately. Thereafter Duke\u0027s response is returned."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param nextInput user input commands that involve the creation of task objects."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return the string to be displayed as the response on CLI or GUI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String getResultFromParser(String nextInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String toReturn;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // pass user input to parser"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            Task toAdd \u003d parser.handleInput(nextInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (toAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                DukeException invInputException \u003d new DukeException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d invInputException.getMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d handleAddTask(toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (EmptyDescriptionException ede) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d ede.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            DeadlineFormatException dFormatException \u003d new DeadlineFormatException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d dFormatException.getMessage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            DeadlineFormatException dFormatException \u003d new DeadlineFormatException(\"Sorry, please key in a \" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    \"valid date and time \" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    \"format\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d dFormatException.getMessage();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Handles the user input command and returns the respective string responses to the given command. Commands that"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * involves the creation of tasks will be passed to the getResultFromParser method."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param nextInput User input command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return the string to be displayed as the response on CLI or GUI"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public String getDukeResponse(String nextInput) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String[] commandComponents \u003d nextInput.split(\" \", 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String taskType \u003d commandComponents[0];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String toReturn;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (nextInput.equals(\"hello\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d \"  Hey! welcome to your nightmare!\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (nextInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d \"  Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (nextInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d taskList.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (commandComponents[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(commandComponents[1]) - 1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d markTaskDone(taskIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                DoneException doneException \u003d new DoneException(\"The task number does not exist!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d doneException.getMessage();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                DoneException doneException \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                        new DoneException(\"Please provide a task number to mark as done!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d doneException.getMessage();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (commandComponents[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(commandComponents[1]) - 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d deleteTask(taskIndex);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                DeleteTaskException deleteException \u003d new DeleteTaskException(\"The task number does not exist!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d deleteException.getMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                DeleteTaskException deleteException \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                        new DeleteTaskException(\"Please provide a task number to delete!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                toReturn \u003d deleteException.getMessage();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (commandComponents[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String keyword \u003d commandComponents[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d taskList.searchWithKeyword(keyword);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            toReturn \u003d getResultFromParser(nextInput);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Takes in user input via a Scanner object. For commands bye, done and delete this"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * method updates the TaskList object and writes the changes to the System via the Storage object."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The inputting of new tasks is passed to the Parser object. Thereafter the application\u0027s responses are printed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void handleUserInput() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        horiLine(60);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        System.out.println(\"  Hello! I\u0027m IntelliGent!\\n  What can I do for you?\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        horiLine(60);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String nextInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            horiLine(60);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            System.out.println(getDukeResponse(nextInput));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (nextInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            horiLine(60);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 188
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003cInsets bottom\u003d\"0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            fx:controller\u003d\"main.java.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 27
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import main.java.duke.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void toStringTest1() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Complete assignment /by 2019-10-15 1233\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(\"[D][\\u2718] Complete assignment (by: OCTOBER 15 2019, 12:33 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void toStringTest2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Have breakfast /by 2019-10-15 0800\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(\"[D][\\u2718] Have breakfast (by: OCTOBER 15 2019, 08:00 AM)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 20
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import main.java.duke.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void addTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(true, taskList.addTask(new Deadline(\"Complete assignment /by 2019-10-15 1233\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 18
    }
  },
  {
    "path": "tasklist.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[D][?] assignment "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[D][?] sdfasf by sfd"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[D][?] sdfa(by: OCTOBER 21 2019, 18:00 PM)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[E][?] meow"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "return book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "todo buy iPhone"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deadline CS2103T Assignment /by Thursday 2359"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deadline sleep /by 3am"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deadline invalid with no \\by ..."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "event invalid with no \\by ..."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1 done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\main.java.duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "java -classpath ..\\bin main.java.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/main.java.duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "java -classpath ../bin main.java.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "-": 36
    }
  }
]
