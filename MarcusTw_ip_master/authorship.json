[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the chat bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * It is the Main class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param filePath The file path of the Storage text file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            list \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidDataException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Runs the chat bot, continuously interact with user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * It also executes the command corresponding to user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui.intro();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                isExit \u003d !c.execute(list, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DukeEmptyIndexException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    | DukeEmptyDescriptionException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    | DukeEmptyByException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    | DukeEmptyAtException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    | DukeInvalidDateTimeInputException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    | DukeEmptyKeywordException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Checks to see if directory is found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates the directory if directory is not found."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param filePath The file path of the directory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static void checkAndMakeDir(String filePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (f.mkdir()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "           System.out.printf(\"Created a directory \u0027%s\u0027%n\", filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Main method that runs the program."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param args The String array."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String homePath \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        checkAndMakeDir(homePath + \"/data\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Duke duke \u003d new Duke(homePath + \"/data/duke.txt\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 82
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * An object that reads and understands user inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * It then returns the required commands needed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Reads and convert the date and time in String format to LocalDateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Date is stored in index 0 and Time is stored in index 1."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * (eg. \"9/8/2020 2009\" is converted to Local Date and Local Time.)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param dateTimeString String representing date and time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return List of LocalDateTime where index 0 is Date and index 1 is Time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If Date or Time is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected static List\u003cLocalDateTime\u003e getCustomDateTimeList(String dateTimeString) throws DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //dateTimeString should be given in \"dd/mm/yyyy hhmm\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //will use manual parser to check for invalid date time inputs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cLocalDateTime\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //results returns index 0 as date, index 1 as time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String[] tokens \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String dateString \u003d tokens[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String[] dateTokens \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (dateTokens.length !\u003d 3) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidDateTimeInputException(\"☹ OOPS!!! Invalid date format!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int year \u003d Integer.parseInt(dateTokens[2]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int month \u003d Integer.parseInt(dateTokens[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int day \u003d Integer.parseInt(dateTokens[0]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                LocalDateTime date \u003d LocalDateTime.of(year, month, day, 0, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                results.add(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeInvalidDateTimeInputException(\"☹ OOPS!!! Invalid date. Date do not exist!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String timeString \u003d tokens[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (timeString.length() !\u003d 4) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeInvalidDateTimeInputException(\"☹ OOPS!!! Invalid time format!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                int hr \u003d Integer.parseInt(timeString.substring(0, 2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                int min \u003d Integer.parseInt(timeString.substring(2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                results.add(LocalDateTime.of(LocalDate.now(), LocalTime.of(hr, min)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeInvalidDateTimeInputException(\"☹ OOPS!!! Invalid time. You can only input up to 23hr and 59min.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into an AddCommand."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return AddCommand with specific Task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyDescriptionException If description of task is empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyByException If user did not input deadline date time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyAtException If user did not input event date time."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeUnknownInputException If user input is unknown."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If date and time inputted is erroneous."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static Command add(String command) throws DukeEmptyDescriptionException,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyByException, DukeEmptyAtException, DukeUnknownInputException, DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Task toBeAdded;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String des;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String[] tokens;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                des \u003d command.substring(5);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                toBeAdded \u003d new Todo(des);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new AddCommand(toBeAdded);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                tokens \u003d command.split(\" /by \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                des \u003d tokens[0].substring(9);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                List\u003cLocalDateTime\u003e ldtList \u003d getCustomDateTimeList(tokens[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                LocalDate date \u003d ldtList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                LocalTime time \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (ldtList.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    time \u003d ldtList.get(1).toLocalTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                toBeAdded \u003d new Deadline(des, date, time);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new AddCommand(toBeAdded);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyByException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                tokens \u003d command.split(\" /at \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                des \u003d tokens[0].substring(6);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                List\u003cLocalDateTime\u003e ldtList \u003d getCustomDateTimeList(tokens[1]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                LocalDate date \u003d ldtList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                LocalTime time \u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (ldtList.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    time \u003d ldtList.get(1).toLocalTime();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                toBeAdded \u003d new Event(des, date, time);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new AddCommand(toBeAdded);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyAtException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeUnknownInputException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a DoneCommand."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return DoneCommand with specific index."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyIndexException If user did not input index."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static Command markAsDone(String command) throws DukeEmptyIndexException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            index \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new DoneCommand(index - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeEmptyIndexException(\"done\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a DeleteCommand."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return DeleteCommand with specific index."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyIndexException If user did not input index."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static Command delete(String command) throws DukeEmptyIndexException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            index \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new DeleteCommand(index - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeEmptyIndexException(\"delete\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a ListDateCommand."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return ListDateCommand with specific date."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If date and time inputted is erroneous."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static ListDateCommand listDate(String command) throws DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String dateString \u003d command.substring(5);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] dateToken \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int[] date \u003d Arrays.stream(dateToken).mapToInt((str) -\u003e Integer.parseInt(str)).toArray();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new ListDateCommand(LocalDate.of(date[2], date[1], date[0]));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidDateTimeInputException(\"☹ OOPS!!! Invalid date format!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidDateTimeInputException(\"☹ OOPS!!! Invalid date. Date to not exist!\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a FindCommand."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return FindCommand with specific keyword."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyKeywordException If no keyword was inputted."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static FindCommand find(String command) throws DukeEmptyKeywordException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] tokens \u003d command.split(\"find \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String keyword \u003d tokens[1];"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeEmptyKeywordException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input and checking the type of command."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the correct command after calling for correct parser."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Command corresponding to user input."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyIndexException If user did not input index."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyDescriptionException If user did not input description."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyAtException If user did not input event date time."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyByException If user did not input deadline date time."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If date and time inputted is erroneous."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "       public static Command parse(String command) throws DukeEmptyIndexException,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyDescriptionException, DukeEmptyAtException,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyByException, DukeInvalidDateTimeInputException,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyKeywordException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"list \")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return listDate(command);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return markAsDone(command);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return delete(command);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return find(command);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return add(command);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DukeUnknownInputException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new UnknownCommand();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 246
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Deals with reading and writing of Task List in the text form."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param filePath The filePath of the storage text file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Reads the text file and returns the list of tasks in the text."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The list of tasks in storage text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDataException If the Storage text file is corrupted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidStoragePathException If the Storage path is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If the Date Time in storage file is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeInvalidDataException, DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String next \u003d sc.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String[] tokens \u003d next.split(\" \\\\| \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (tokens.length \u003c 3) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String taskType \u003d tokens[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String isDone \u003d tokens[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String description \u003d tokens[2];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    task \u003d new Todo(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        List\u003cLocalDateTime\u003e ldtList \u003d Parser.getCustomDateTimeList(tokens[3]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        LocalDate date \u003d ldtList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        LocalTime time \u003d ldtList.size() \u003d\u003d 2"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                                ? ldtList.get(1).toLocalTime()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                                : null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        task \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        throw e;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    List\u003cLocalDateTime\u003e ldtList \u003d Parser.getCustomDateTimeList(tokens[3]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    LocalDate date \u003d ldtList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    LocalTime time \u003d ldtList.size() \u003d\u003d 2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                            ? ldtList.get(1).toLocalTime()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                            : null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    task \u003d new Event(description, date, time);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (isDone.equals(\"0\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            FileWriter writer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                writer.write(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (IOException ioException) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                System.out.println(ioException.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Writes and save the Storage text file with the list of tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param taskList The TaskList with list of tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws IOException If the filePath is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If the index exceeds list size."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void save(TaskList taskList) throws IOException, DukeInvalidIndexException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            TaskType type \u003d task.getTaskType();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String s \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    s \u003d String.format(\"T | %d | %s\", task.getIsDone() ? 1 : 0, task.getDescription());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    s \u003d String.format(\"D | %d | %s | %s\", deadline.getIsDone() ? 1 : 0,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                            deadline.getDescription(), deadline.getBy());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    s \u003d String.format(\"E | %d | %s | %s\", event.getIsDone() ? 1 : 0,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                            event.getDescription(), event.getAt());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (i !\u003d taskList.getSize() - 1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                s +\u003d \"\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            writer.write(s);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 141
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Contains the list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * The \u003ccode\u003eTaskList\u003c/code\u003e object handles operations done to the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor specified with a list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.list \u003d taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task The task to be added to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task that is added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task that is deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If index \u003c 0 or index \u003e\u003d list size."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task deleteTask(int index) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task toBeDeleted \u003d get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            this.list.remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return toBeDeleted;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Marks a task in the list as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task that has been marked as done."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If index \u003c 0 or index \u003e\u003d list size."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task markDone(int index) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task task \u003d get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representing the tasks in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the alternative String given if list is empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param list The list of tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param alternative String returned if list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representing the tasks in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static String getListAsStringFromList(List\u003cTask\u003e  list, String alternative) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i ++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            s +\u003d (i + 1) + \".\" + list.get(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                s +\u003d \u0027\\n\u0027 + INDENT;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (s.equals(\"\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return alternative;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns String representing the tasks in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representing the tasks in the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getListAsString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return getListAsStringFromList(this.list,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"There is nothing in the list!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the size of the list of tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return size of list of tasks."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the task at the specific index given."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task at the index."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If index \u003c 0 or index \u003e\u003d list size."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task get(int index) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return this.list.get(index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Return the String representing list of task on that date given."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param date The given date query."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The String representing the list of tasks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getTasksOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e tasksOnDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Deadline d \u003d (Deadline) t;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (d.getDate().isEqual(date)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    tasksOnDate.add(d);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Event e \u003d (Event) t;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (e.getDate().isEqual(date)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    tasksOnDate.add(e);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return getListAsStringFromList(tasksOnDate,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"There are no tasks on this date!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getTaskWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e tasksWithKeyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String description \u003d t.getDescription();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (description.contains(keyword)) tasksWithKeyword.add(t);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return getListAsStringFromList(tasksWithKeyword,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"No tasks with \" + keyword + \" was found\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 172
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * User interface which deals with user interactions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Also prints relevant error messages and responses."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    static final String SOCCAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \"                 .                         .                             \\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                ...                       ...                            \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"               /@@@\u0026*                   (@@@@@\u0026*                         \\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"              /@@@@@@@@\u0026*            /@@@@@@@@@@#                        \\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"             *\u0026@@@@@@@@@@@@*       /@@@@@@@@@@@@\u0026/                       \\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"             %\u0026@@@@@@@@@@@@@@%.  *@@@@@@@@@@@@@@@\u0026/                      \\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"            /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#                     \\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"           /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,                   \\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,                 \\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"        *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.               \\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"       #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,              \\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"      %@@@@@@@@@@@@*,#@@@@@@@@@@@@@@@@@@@%..,\u0026@@@@@@@@@@@@@/             \\n\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"     (@@@@@@@@@@@%    *@@@@@@@@@@@@@@@@@@    ,@@@@@@@@@@@@@\u0026             \\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"     @@@@@@@@@@@@@@@   \u0026@@@@@@@@@@@@@@@@@@\u0026.  %@@@@@@@@@@@@@(            \\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"    (@@@@@@@@@@@@(     #@@@@@@@@@@@@@@@@@.    /@@@@@@@@@@@@\u0026%            \\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"    *@\u0026\u0026\u0026\u0026\u0026@@@@@@(     /@@@@@@@@@@@@@@@@@.    *@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026(            \\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"     %\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@\u0026     (@@@@@@@@@@@@@@@@@*    #@@@\u0026@\u0026\u0026\u0026\u0026\u0026\u0026\u0026%             \\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"     .\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026,             \\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"       ,\u0026\u0026\u0026\u0026\u0026\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026(               \\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"         .(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026\u0026/                 \\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"             ,#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*.                    \\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                    ,/#@@@@@@@@@@@@@@@@@@@@@@#                           \\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                      #\u0026@@@@@@@@@@@@@@@@@@@\u0026\u0026\u0026\u0026.                         \\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                     ,\u0026@@@@@@@@@@@@@@@@@@@@@@@@@/                        \\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                     #@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                      \\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                    ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(                     \\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026.                   \\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                   /@@@@@@@@@@@@@@@@@@@@@@\u0026@@@@@@@@@@\u0026,                  \\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                   %@@@@@@@@@@@@@@@@@@@@@\u0026@@@@@@@@@@@@\u0026.                 \\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                   @@@@@@@@@@@@@@@@@@@@@%\u0026@@@@@@@@@@@@\u0026\u0026#*,.             \\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                  *@@@@@@@@@@@@@@@@@@@@@\u0026\u0026@@@@@@@@@@@\u0026\u0026*.,#\u0026\u0026@@@*        \\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                  ,@@@@@@@@@\u0026@@@@@@@@@@\u0026@@@@@@@@@@@@\u0026\u0026(       .(\u0026@@(     \\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                    ./#%\u0026\u0026%..,***////**(@@@@@@@@@\u0026\u0026%*            ,@@@*   \\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                                                    @@(  \\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                                       *%#*@#/@#(\u0026@\u0026.    \\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                                  /\u0026@@@%##/\u0026@@@@\u0026,       \\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                                @@@@@@#\u0026@@@@@@@@@        \\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                           .(@@\u0026#\u0026@\u0026\u0026\u0026\u0026\u0026%@@@@@@@*        \\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                           \u0026%\u0026\u0026\u0026%\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026@@#            \\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                            .*%@@@%@@%, ..               \\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"                                                  .                      \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints a String s in a chat window."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param s The String to be printed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void printWindow(String s) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(INDENT + s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the Bye message in a chat window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(INDENT + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.print(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the introduction message with SOCCAT logo."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Messages are printed in a chat window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void intro() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(SOCCAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m Soccat Duke\\n\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"    What do you meow?\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the task marked as done in a chat window."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task The task that is marked as done."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void showMarkDone(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        printWindow(\"Nice! I\u0027ve marked this task as done: \\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"      \" + task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the added task in a chat window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * It also tells the number of items in the list after addition."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param addedTask The task that is added."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param listSize The number of items in the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void showAdded(Task addedTask, int listSize) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        printWindow(\"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                INDENT + \"  \" + addedTask + \"\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                INDENT +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String.format(\"Now you have %d tasks in the in the list\", listSize));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the deleted task in a chat window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * It also tells the number of items in the list after deletion."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param deletedTask The task that is deleted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param listSize The number of items in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void showDeleted(Task deletedTask, int listSize) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        printWindow(\"Noted. I\u0027ve removed this task: \\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"      \" + deletedTask +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String.format(\"\\n     Now you have %d tasks in the list.\", listSize));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the loading error message in a chat window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        printWindow(\"Oops, error in loading the tasks! \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \"Please check the duke.txt file\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the tasks in the list in a chat window."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList object with the list of tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void showList(TaskList tasks) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        printWindow(tasks.getListAsString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the error message in a chat window."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param e The error in which message is printed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        printWindow(e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Takes in the user command input in String format."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * If no command is inputted, \"\" is returned."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String command user inputted."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 174
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an add task action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task The Task to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the corresponding action of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList to add the task to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            tasks.addTask(this.task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showAdded(this.task, tasks.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IOException | DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Bye message action."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of bye message on Ui."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return False because Duke should stop running."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 25
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an action corresponding to a user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the action to be taken."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList to add the task to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True if Duke should continue running."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    boolean execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 20
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a delete task action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final int index; //0 to tasks.getSize() - 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the Task to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the deleting of task from task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList to delete the task from."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task task \u003d tasks.deleteTask(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showDeleted(task, tasks.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 47
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a marking a task as done action."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the Task to be marked as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            tasks.markDone(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showMarkDone(tasks.get(index));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException | IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 43
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the command to Tasks that contains the keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param keyword The key word to be searched for."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs an action of searching the tasks by key word."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints out the list of task containing the keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui for Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage for Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because the program will continue running."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui.printWindow(tasks.getTaskWithKeyword(keyword));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the Listing of all Tasks action."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of list of Tasks in TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui.showList(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ListDateCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified Date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param date The date specified."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ListDateCommand(LocalDate date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of all the Task on the specified date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui.printWindow(tasks.getTasksOnDate(date));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 33
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an action dealing with unknown inputs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class UnknownCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of an unknown input error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList to add the task to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui.showError(new DukeUnknownInputException());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyAtException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when date is left empty for an Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyAtException extends DukeTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyAtException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"☹ OOPS!!! The event time cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyByException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when date is left empty for a Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyByException extends DukeTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyByException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"☹ OOPS!!! The deadline cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when description of a Task is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyDescriptionException extends DukeTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task String representation of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyDescriptionException(String task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(String.format(\"☹ OOPS!!! The description of %s cannot be empty.\", task));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when index is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Index is required for marking task as done or delete task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyIndexException extends DukeIndexException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param type The type of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyIndexException(String type) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(String.format(\"☹ OOPS!!! The index after %s cannot be empty.\", type));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyKeywordException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"☹ OOPS!!! Keyword cannot be empty.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown regarding indexes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeIndexException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown because of invalid Stage file data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInvalidDataException extends DukeStorageException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInvalidDataException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidDateTimeInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when the Date or Time input is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInvalidDateTimeInputException extends DukeTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInvalidDateTimeInputException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when the index is out of Task List range."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInvalidIndexException extends DukeIndexException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInvalidIndexException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"☹ OOPS!!! There is no such task.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidStoragePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when Storage path is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInvalidStoragePathException extends DukeStorageException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInvalidStoragePathException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"☹ OOPS!!! Invalid file path!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when dealing with Storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeStorageException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    DukeStorageException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when dealing with Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    DukeTaskException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when input by user is an unknown command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeUnknownInputException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that meows :-(\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Task with a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalDate byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalTime byTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param byDate The date of the deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param byTime The time of the deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Deadline(String description, LocalDate byDate, LocalTime byTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.byDate \u003d byDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.byTime \u003d byTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The date of the deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return byDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Return the String representation of the deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The deadline is in the format \"dd/MM/yyyy HHmm\"."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This is for saving purpose."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getBy() { //\"21/08/2020 1900\" eg"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d byTime \u003d\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \" \" + byTime.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return byDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) + time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Deadline task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The deadline is in the format \"MMM-dd-yyyy h.mma\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the Deadline task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d byTime \u003d\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \", \" + byTime.format(DateTimeFormatter.ofPattern(\"h.mma\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //special display of date and time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \" (by: \" + byDate.format(DateTimeFormatter.ofPattern(\"MMM-dd-yyyy\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the Task happening on a Date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalDate atDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalTime atTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param atDate The date of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param atTime The time of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Event(String description, LocalDate atDate, LocalTime atTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the date of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The date of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return atDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the occurrence of the event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The occurrence is in the format \"dd/MM/yyyy HHmm\"."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This is for saving purpose."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The String representation of the occurrence of the event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getAt() { //\"21/08/2020 1900\" eg"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d atTime \u003d\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \" \" + atTime.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return atDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) + time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Event task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The occurrence is in the format \"MMM-dd-yyyy h.mma\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The String representation of the occurrence of the event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d atTime \u003d\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        ? \"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \", \" + atTime.format(DateTimeFormatter.ofPattern(\"h.mma\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //special display of date and time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \" (at: \" + atDate.format(DateTimeFormatter.ofPattern(\"MMM-dd-yyyy\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public final TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param taskType The type of Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns a tick if the task is done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns a cross otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Tick if tasks is done, cross otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the isDone property to true."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the isDone property of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True if task is done, false otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the type of task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The type of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return taskType + \"[\" + getStatusIcon() +\"] \" + description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "//deadline task1 /by 21/8/2020 1900"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "//deadline task3 /by 24/8/2020 2000"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "//event task2 /at 21/8/2020 1800"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 79
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the type of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    TODO(\"[T]\"), DEADLINE(\"[D]\"), EVENT(\"[E]\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final String bracketedTaskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param bracketedTaskType The symbol for the Type of Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    TaskType(String bracketedTaskType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.bracketedTaskType \u003d bracketedTaskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Type of Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the Type of Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return bracketedTaskType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Task without Date and Time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(description, TaskType.TODO);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Todo task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the Todo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 24
    }
  },
  {
    "path": "src/main/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Task todo \u003d new Todo(\"task 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Task deadline \u003d new Deadline(\"task 2\", LocalDate.of(2020, 8, 24), LocalTime.of(8,24));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    Task event \u003d new Event(\"task 3\", LocalDate.of(2020, 9, 9), LocalTime.of(9, 9));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addTodo_validTodo_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(todo, taskList.addTask(todo));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addDeadline_validDeadline_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(deadline, taskList.addTask(deadline));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addEvent_validEvent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(event, taskList.addTask(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void deleteTask_validIndex_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(todo, tl.deleteTask(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void deleteTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(tl.deleteTask(1), todo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(\"☹ OOPS!!! There is no such task.\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void markDone_validIndex_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Task markDoneTodo \u003d new Todo(\"markDone test\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(markDoneTodo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        markDoneTodo.markAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(markDoneTodo, tl.markDone(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void markDone_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Task markDoneTodo \u003d new Todo(\"markDone test\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(markDoneTodo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        markDoneTodo.markAsDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(markDoneTodo, tl.markDone(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(\"☹ OOPS!!! There is no such task.\", e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsStringFromList_emptyList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"Alternative String\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                TaskList.getListAsStringFromList(list, \"Alternative String\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsStringFromList_validList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        list.add(todo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"1.\" + todo.toString(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                TaskList.getListAsStringFromList(list, \"Alternative String\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsStringFromList_validLongerList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        list.add(todo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedResult \u003d \"1.\" + todo.toString() + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + TaskList.INDENT + \"2.\" + deadline.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedResult, TaskList.getListAsStringFromList(list, \"Alternative\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsString_emptyTaskList_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"There is nothing in the list!\", tl.getListAsString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsString_validTaskList_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"1.\" + todo.toString(), tl.getListAsString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsString_validLongerTaskList_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(deadline);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"1.\" + todo.toString()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \"\\n\" + TaskList.INDENT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \"2.\" + deadline.toString(), tl.getListAsString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getSize_emptyTaskList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(0, tl.getSize());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getSize_validTaskList_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(deadline);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(event);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(3, tl.getSize());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void get_validIndex_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(todo, tl.get(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void get_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(todo, tl.get(0));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(\"☹ OOPS!!! There is no such task.\", e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getTaskOnDate_validDate_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(deadline);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedResult \u003d \"1.\" + deadline.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedResult,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                tl.getTasksOnDate(LocalDate.of(2020, 8, 24)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getTaskOnDate_emptyList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"There are no tasks on this date!\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                tl.getTasksOnDate(LocalDate.of(2020, 1, 1)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 175
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\Marcus\\Desktop\\NUS CS\\Year 2 - Sem 1\\CS2103T\\ip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 5,
      "-": 18
    }
  }
]
