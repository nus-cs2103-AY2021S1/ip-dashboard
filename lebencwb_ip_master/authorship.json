[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"lebencwb":23}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"Duke is a Command Line Input (CLI)-based interactive list management application"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"that runs on [Java 11 or higher](https://www.oracle.com/java/technologies/javase-downloads.html)."},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"![](Welcome.png)"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"### Create a task-list"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"Create a task-list where you can add, delete, update and view various tasks,"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"automatically storing the list at the location of your choice."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"When you are just starting out on a new task-list, and want a convenient way"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"to keep track of to-dos, deadlines and events."},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"#### `CREATE TASK \u003cfilepath\u003e`"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"Creates the task-list at the filepath specified by the user."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"`CREATE TASK data/tasks.txt`"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"A new task-list is created in the file named `tasks.txt` in the folder `/data`."},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"If the folder `/data` does not exist where the `.jar` file is located, then the"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"folder is first created and then the file is created in the folder."},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"![](Create_tasklist.png)"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"### Add a task"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"Add a new to-do, deadline or event to the task-list."},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"When you have a new task you want to add to the task-list."},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"#### `TODO`, `DEADLINE`, `EVENT`"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"`TODO read book`"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"`DEADLINE return book /by next Monday`"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"`EVENT project meeting /at 2020-09-21T06:18:00`"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"The respective tasks are added to the task-list."},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"![](Todo.png)"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"![](Deadline.png)"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"![](Event.png)"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"### Mark a task as done"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"Tick off a task that you have completed."},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"When you have completed a certain task on your task-list."},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":"#### `DONE \u003cindex\u003e`"},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":"`DONE 1`"},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":"The first task in the list is marked as done."},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":"![](Done.png)"},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"### Delete a task"},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":95,"author":{"gitId":"lebencwb"},"content":"Delete a task from the task-list."},{"lineNumber":96,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":97,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":98,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":99,"author":{"gitId":"lebencwb"},"content":"When you no longer want to keep track of a particular task, or simply want to"},{"lineNumber":100,"author":{"gitId":"lebencwb"},"content":"delete a wrong entry."},{"lineNumber":101,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":102,"author":{"gitId":"lebencwb"},"content":"#### `DELETE \u003cindex\u003e`"},{"lineNumber":103,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":104,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":105,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":106,"author":{"gitId":"lebencwb"},"content":"`DELETE 3`"},{"lineNumber":107,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":108,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":109,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":110,"author":{"gitId":"lebencwb"},"content":"The third task in the list is deleted."},{"lineNumber":111,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":112,"author":{"gitId":"lebencwb"},"content":"![](Delete.png)"},{"lineNumber":113,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":114,"author":{"gitId":"lebencwb"},"content":"### View all current tasks"},{"lineNumber":115,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":116,"author":{"gitId":"lebencwb"},"content":"Get a view of all the current tasks in your task-list, including whether they"},{"lineNumber":117,"author":{"gitId":"lebencwb"},"content":"are done or not."},{"lineNumber":118,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":119,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":120,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":121,"author":{"gitId":"lebencwb"},"content":"When you want to view all the tasks in your list, or verify the index of the"},{"lineNumber":122,"author":{"gitId":"lebencwb"},"content":"task you want to delete or edit."},{"lineNumber":123,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":124,"author":{"gitId":"lebencwb"},"content":"#### `LIST`"},{"lineNumber":125,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":126,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":127,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":128,"author":{"gitId":"lebencwb"},"content":"`LIST`"},{"lineNumber":129,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":130,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":132,"author":{"gitId":"lebencwb"},"content":"All the tasks in the task-list listed by rows."},{"lineNumber":133,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":134,"author":{"gitId":"lebencwb"},"content":"![](List.png)"},{"lineNumber":135,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":136,"author":{"gitId":"lebencwb"},"content":"### Search by keyword"},{"lineNumber":137,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":138,"author":{"gitId":"lebencwb"},"content":"Search for a task or multiple tasks containing a keyword."},{"lineNumber":139,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":140,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":141,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":142,"author":{"gitId":"lebencwb"},"content":"When you want to view specific related tasks that contain the same word instead"},{"lineNumber":143,"author":{"gitId":"lebencwb"},"content":"of all the tasks in your list."},{"lineNumber":144,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":145,"author":{"gitId":"lebencwb"},"content":"#### `FIND \u003ckeyword\u003e`"},{"lineNumber":146,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":147,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":148,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":149,"author":{"gitId":"lebencwb"},"content":"`FIND book`"},{"lineNumber":150,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":151,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":152,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":153,"author":{"gitId":"lebencwb"},"content":"All the tasks in the task-list containing the keyword `\"book\"`, listed by rows."},{"lineNumber":154,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":155,"author":{"gitId":"lebencwb"},"content":"![](Find.png)"},{"lineNumber":156,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":157,"author":{"gitId":"lebencwb"},"content":"### Close the application"},{"lineNumber":158,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":159,"author":{"gitId":"lebencwb"},"content":"Close the application using a command, and receive a greeting from Duke."},{"lineNumber":160,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":161,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":162,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":163,"author":{"gitId":"lebencwb"},"content":"When you are done with the current session and want to close the application."},{"lineNumber":164,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":165,"author":{"gitId":"lebencwb"},"content":"#### `BYE`"},{"lineNumber":166,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":167,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":168,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":169,"author":{"gitId":"lebencwb"},"content":"`BYE`"},{"lineNumber":170,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":171,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":172,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":173,"author":{"gitId":"lebencwb"},"content":"Duke replies with a greeting, and the application closes shortly after."},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"lebencwb"},"content":"![](Bye.png)"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"lebencwb"},"content":"### Load a task-list"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"lebencwb"},"content":"Load a task-list that was previously created."},{"lineNumber":180,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":181,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":182,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":183,"author":{"gitId":"lebencwb"},"content":"When you start a new session and want to resume the task-list from a previous"},{"lineNumber":184,"author":{"gitId":"lebencwb"},"content":"session, or when you are working with one list and want to swap to another list."},{"lineNumber":185,"author":{"gitId":"lebencwb"},"content":"(See `UNLOAD`)"},{"lineNumber":186,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":187,"author":{"gitId":"lebencwb"},"content":"#### `LOAD TASK \u003cfilepath\u003e`"},{"lineNumber":188,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":189,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":190,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":191,"author":{"gitId":"lebencwb"},"content":"`LOAD TASK data/tasks.txt`"},{"lineNumber":192,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":193,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":194,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":195,"author":{"gitId":"lebencwb"},"content":"The existing task-list stored in `data/tasks.txt` is loaded to the current session."},{"lineNumber":196,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":197,"author":{"gitId":"lebencwb"},"content":"![](Load.png)"},{"lineNumber":198,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":199,"author":{"gitId":"lebencwb"},"content":"### Unload the current list"},{"lineNumber":200,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":201,"author":{"gitId":"lebencwb"},"content":"Unload the list you are working with in the current session."},{"lineNumber":202,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":203,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":204,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":205,"author":{"gitId":"lebencwb"},"content":"When you want to move on to a different file without restarting the session."},{"lineNumber":206,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":207,"author":{"gitId":"lebencwb"},"content":"#### `UNLOAD`"},{"lineNumber":208,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":209,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":210,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":211,"author":{"gitId":"lebencwb"},"content":"`UNLOAD`"},{"lineNumber":212,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":213,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":214,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":215,"author":{"gitId":"lebencwb"},"content":"The current working list is unloaded from the session so that another list can"},{"lineNumber":216,"author":{"gitId":"lebencwb"},"content":"be loaded."},{"lineNumber":217,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":218,"author":{"gitId":"lebencwb"},"content":"![](Unload.png)"},{"lineNumber":219,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":220,"author":{"gitId":"lebencwb"},"content":"### Start a finance log"},{"lineNumber":221,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":222,"author":{"gitId":"lebencwb"},"content":"Create a finance log where you can add or delete categories, increase or decrease"},{"lineNumber":223,"author":{"gitId":"lebencwb"},"content":"the amount in each category, and view a summary sheet of the categories and their"},{"lineNumber":224,"author":{"gitId":"lebencwb"},"content":"totals, and automatically store this data at the location of your choice."},{"lineNumber":225,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":226,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":227,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":228,"author":{"gitId":"lebencwb"},"content":"When you want to keep track of your financial data, such as expenses."},{"lineNumber":229,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":230,"author":{"gitId":"lebencwb"},"content":"#### `CREATE FINANCE \u003cfilepath\u003e`"},{"lineNumber":231,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":232,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":233,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":234,"author":{"gitId":"lebencwb"},"content":"`CREATE FINANCE data/finances.txt`"},{"lineNumber":235,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":236,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":237,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":238,"author":{"gitId":"lebencwb"},"content":"A new finance log is created in the file named `finances.txt` in the folder"},{"lineNumber":239,"author":{"gitId":"lebencwb"},"content":"`/data`. If the folder `/data` does not exist where the `.jar` file is located,"},{"lineNumber":240,"author":{"gitId":"lebencwb"},"content":"then the folder is first created and then the file is created in the folder."},{"lineNumber":241,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":242,"author":{"gitId":"lebencwb"},"content":"![](Create_finance.png)"},{"lineNumber":243,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":244,"author":{"gitId":"lebencwb"},"content":"### Add a category"},{"lineNumber":245,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":246,"author":{"gitId":"lebencwb"},"content":"When you are just starting a new finance log, or want to add a new category to"},{"lineNumber":247,"author":{"gitId":"lebencwb"},"content":"aggregate your financial data."},{"lineNumber":248,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":249,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":250,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":251,"author":{"gitId":"lebencwb"},"content":"#### `NEW \u003ccategory_name\u003e`"},{"lineNumber":252,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":253,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":254,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":255,"author":{"gitId":"lebencwb"},"content":"`NEW Food`"},{"lineNumber":256,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":257,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":258,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":259,"author":{"gitId":"lebencwb"},"content":"The category `Food` is added to the finance log, with a starting amount of $0."},{"lineNumber":260,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":261,"author":{"gitId":"lebencwb"},"content":"![](New.png)"},{"lineNumber":262,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":263,"author":{"gitId":"lebencwb"},"content":"### Increase/Decrease the amount"},{"lineNumber":264,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":265,"author":{"gitId":"lebencwb"},"content":"Increase (or decrease) the amount in a particular category."},{"lineNumber":266,"author":{"gitId":"lebencwb"},"content":"(Note that the minimum amount in a category is $0.)"},{"lineNumber":267,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":268,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":269,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":270,"author":{"gitId":"lebencwb"},"content":"#### `ADD`, `REDUCE`"},{"lineNumber":271,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":272,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":273,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":274,"author":{"gitId":"lebencwb"},"content":"`ADD Food 4.50`"},{"lineNumber":275,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":276,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":277,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":278,"author":{"gitId":"lebencwb"},"content":"`REDUCE Allowance 10`"},{"lineNumber":279,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":280,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":281,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":282,"author":{"gitId":"lebencwb"},"content":"The amount in the `Food` category increases by $4.50, while the amount in"},{"lineNumber":283,"author":{"gitId":"lebencwb"},"content":"the `Allowance` category decreases to $0 (since the amount deducted exceeded"},{"lineNumber":284,"author":{"gitId":"lebencwb"},"content":"the base amount)."},{"lineNumber":285,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":286,"author":{"gitId":"lebencwb"},"content":"![](Add.png)"},{"lineNumber":287,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":288,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":289,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":290,"author":{"gitId":"lebencwb"},"content":"![](Reduce.png)"},{"lineNumber":291,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":292,"author":{"gitId":"lebencwb"},"content":"### Rename a category"},{"lineNumber":293,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":294,"author":{"gitId":"lebencwb"},"content":"Rename a particular category in the finance log."},{"lineNumber":295,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":296,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":297,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":298,"author":{"gitId":"lebencwb"},"content":"When you made a typo in the naming of a category, or maybe you want to broaden"},{"lineNumber":299,"author":{"gitId":"lebencwb"},"content":"or restrict the category (e.g. `Food` -\u003e `Lunch`)"},{"lineNumber":300,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":301,"author":{"gitId":"lebencwb"},"content":"#### `RENAME \u003ccategory_name\u003e \u003cnew_name\u003e`"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"lebencwb"},"content":"`RENAME Trnasport Transport`"},{"lineNumber":306,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":307,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":308,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":309,"author":{"gitId":"lebencwb"},"content":"`RENAME Food Lunch`"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"lebencwb"},"content":"The `Trnasport` category is changed to `Transport`, while the category"},{"lineNumber":314,"author":{"gitId":"lebencwb"},"content":"previously named `Food` is renamed `Lunch`."},{"lineNumber":315,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":316,"author":{"gitId":"lebencwb"},"content":"![](Rename1.png)"},{"lineNumber":317,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":318,"author":{"gitId":"lebencwb"},"content":"\u003cp\u003e\u003c/p\u003e"},{"lineNumber":319,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":320,"author":{"gitId":"lebencwb"},"content":"![](Rename2.png)"},{"lineNumber":321,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":322,"author":{"gitId":"lebencwb"},"content":"### Remove a category"},{"lineNumber":323,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":324,"author":{"gitId":"lebencwb"},"content":"Remove a particular category from the finance log."},{"lineNumber":325,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":326,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":327,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":328,"author":{"gitId":"lebencwb"},"content":"When you want to completely remove a category and any amount associated with it"},{"lineNumber":329,"author":{"gitId":"lebencwb"},"content":"from the finance log."},{"lineNumber":330,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":331,"author":{"gitId":"lebencwb"},"content":"#### `REMOVE \u003ccategory_name\u003e`"},{"lineNumber":332,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":333,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":334,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":335,"author":{"gitId":"lebencwb"},"content":"`REMOVE Transport`"},{"lineNumber":336,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":337,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":338,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":339,"author":{"gitId":"lebencwb"},"content":"The category `Transport` is completely removed from the finance log."},{"lineNumber":340,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":341,"author":{"gitId":"lebencwb"},"content":"![](Remove.png)"},{"lineNumber":342,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":343,"author":{"gitId":"lebencwb"},"content":"### View all finances"},{"lineNumber":344,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":345,"author":{"gitId":"lebencwb"},"content":"View a summary of the categories and their amounts."},{"lineNumber":346,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":347,"author":{"gitId":"lebencwb"},"content":"#### Usage"},{"lineNumber":348,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":349,"author":{"gitId":"lebencwb"},"content":"When you want to take a look at all the categories currently in the finance log"},{"lineNumber":350,"author":{"gitId":"lebencwb"},"content":"and see how much is in each category."},{"lineNumber":351,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":352,"author":{"gitId":"lebencwb"},"content":"#### `DISPLAY`"},{"lineNumber":353,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":354,"author":{"gitId":"lebencwb"},"content":"Example of usage:"},{"lineNumber":355,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":356,"author":{"gitId":"lebencwb"},"content":"`DISPLAY`"},{"lineNumber":357,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":358,"author":{"gitId":"lebencwb"},"content":"Expected outcome:"},{"lineNumber":359,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":360,"author":{"gitId":"lebencwb"},"content":"All the respective categories and their amounts are neatly presented in a table"},{"lineNumber":361,"author":{"gitId":"lebencwb"},"content":"format."},{"lineNumber":362,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":363,"author":{"gitId":"lebencwb"},"content":"![](Display.png)"},{"lineNumber":364,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":365,"author":{"gitId":"lebencwb"},"content":"**All command words are case-insensitive but are presented in uppercase to make them more distinct.*"},{"lineNumber":366,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":367,"author":{"gitId":"lebencwb"},"content":"#### References"},{"lineNumber":368,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":369,"author":{"gitId":"lebencwb"},"content":"+ Code-base for JavaFX referenced from the [_JavaFX tutorial_ @SE-EDU/guides](https://se-education.org/guides/tutorials/javaFx.html)"}],"authorContributionMap":{"-":22,"lebencwb":347}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":" * An example of a custom control using FXML."},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":" * containing text from the speaker."},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"public class DialogBox extends HBox {"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    private Label dialog \u003d new Label();"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    private ImageView displayPicture \u003d new ImageView();"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    private DialogBox(String text, Image img, boolean isUser) {"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"        String fmxlPath \u003d \"/view/DialogBox.fxml\";"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        if (!isUser) {"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"            fmxlPath \u003d \"/view/DialogBox2.fxml\";"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(fmxlPath));"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"        DialogBox db \u003d new DialogBox(text, img, true);"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"        db.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"        return db;"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"        DialogBox db \u003d new DialogBox(text, img, false);"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"        db.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"        return db;"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":53}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":" * A chat-bot with the ability to perform certain list management actions commanded by the user."},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    /** The user interface object for interacting with the user. */"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    /** The storage object for loading or storing a Duke-list in the form of a text file */"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new Duke object ready to start a new session or resume a previous one."},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    public Duke() {"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"        ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"        storage \u003d new Storage();"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     * Responds to the user input, if it can be processed. Otherwise, alerts the user to the error"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"     * that occurred."},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"     * @param input The input from the user."},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"     * @return The response, or the alert to the error that occurred."},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    String getResponse(String input) {"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"            command.execute(ui, storage);"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"            return ui.getMessage();"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"            return ui.addErrorPrefix(e.getMessage());"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"}"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":""}],"authorContributionMap":{"-":1,"lebencwb":40}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":" * Base class of exceptions for Duke."},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new DukeException."},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"     * @param message A custom message tagging the DukeException, detailing the error."},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    protected DukeException(String message) {"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":16}},{"path":"src/main/java/duke/DukeList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.command.UserInputException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":" * A base class of lists that Duke is designed to support."},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":" * @param \u003cT\u003e The type of entries that can be stored in the list."},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"public class DukeList\u003cT\u003e {"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    /** The list of entries contained by the Duke-list. */"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    protected final ArrayList\u003cT\u003e entries \u003d new ArrayList\u003cT\u003e();"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new Duke-list object."},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    protected DukeList() {}"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     * Gets the number of entries in the Duke-list."},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * @return The number of entries currently in the Duke-list."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public int getNumEntries() {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        return entries.size();"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    /** Returns the entries in the Duke-list as an array of string objects. */"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    public String[] getEntries() {"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"        int numEntries \u003d entries.size();"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"        String[] entryStrings \u003d new String[numEntries];"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"        for (int i \u003d 0; i \u003c numEntries; i++) {"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"            entryStrings[i] \u003d entries.get(i).toString();"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"        return entryStrings;"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"     * Adds an entry to the current Duke-list."},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"     * @param entry The entry to be added to the Duke-list."},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"    public void addEntry(T entry) throws UserInputException {"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"        if (entries.contains(entry)) {"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.DUPLICATE_ENTRY;"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"        entries.add(entry);"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":52}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"import java.util.Timer;"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"import java.util.TimerTask;"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/RobotUser.png\"));"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/RobotDuke.png\"));"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"     * Initializes the chat-bot application and welcomes the user."},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"    public void initialize() {"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"                DialogBox.getDukeDialog(Ui.getWelcomeMessage(), dukeImage));"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"        duke \u003d d;"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"                DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"        userInput.clear();"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"        if (response.equals(Ui.MESSAGE_GOODBYE)) {"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"            Timer timer \u003d new Timer();"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"            TimerTask timerTask \u003d new TimerTask() {"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"                public void run() {"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"                    Platform.exit();"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"            };"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"            timer.schedule(timerTask, 1500);"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":69}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.command.CommandType;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import duke.command.EditCommand;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import duke.command.FileCommand;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"import duke.command.FileException;"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"import duke.command.FinanceCommand;"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"import duke.command.QueryCommand;"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"import duke.command.UserInputException;"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"import duke.financial.Category;"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"import duke.task.ToDo;"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"import duke.task.Deadline;"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"import duke.task.Event;"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"import java.util.Scanner;"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":" * A non-instantiable class with static methods to parse strings into processable information."},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"public class Parser {"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"     * Sole constructor. (Not instantiable.)"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    private Parser() {}"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"     * Parses a specified string and converts it into a Command to be executed."},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"     * @param string the String from the user input."},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"     * @return the Command parsed from the string."},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the string deviates from any of the acceptable formats."},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"    public static Command parse(String string) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"        Scanner parsingScanner \u003d new Scanner(string);"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"        if (!parsingScanner.hasNext()) {"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"        String commandString \u003d parsingScanner.next();"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"        Command command; // Has to be declared beforehand for correct scope"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"        switch (commandString.toLowerCase()) {"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"        case \"bye\":"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"            command \u003d new ExitCommand(CommandType.BYE);"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"        case \"list\":"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"            command \u003d new ListCommand(CommandType.LIST);"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"        case \"load\":"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseFileCommand(CommandType.LOAD, parsingScanner);"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"        case \"create\":"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseFileCommand(CommandType.CREATE, parsingScanner);"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"        case \"find\":"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseQueryCommand(CommandType.FIND, parsingScanner);"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"        case \"done\":"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseEditCommand(CommandType.DONE, parsingScanner);"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"        case \"delete\":"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseEditCommand(CommandType.DELETE, parsingScanner);"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"        case \"todo\":"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseAddCommand(CommandType.TODO, parsingScanner);"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"        case \"deadline\":"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseAddCommand(CommandType.DEADLINE, parsingScanner);"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"        case \"event\":"},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseAddCommand(CommandType.EVENT, parsingScanner);"},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":"        case \"new\":"},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseFinanceCommand(CommandType.NEW, parsingScanner);"},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":"        case \"remove\":"},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseFinanceCommand(CommandType.REMOVE, parsingScanner);"},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":"        case \"add\":"},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseFinanceCommand(CommandType.ADD, parsingScanner);"},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":"        case \"reduce\":"},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseFinanceCommand(CommandType.REDUCE, parsingScanner);"},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":"        case \"rename\":"},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":"            command \u003d parseFinanceCommand(CommandType.RENAME, parsingScanner);"},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"        case \"display\":"},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":"            command \u003d new ListCommand(CommandType.DISPLAY);"},{"lineNumber":95,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"lebencwb"},"content":"        case \"unload\":"},{"lineNumber":97,"author":{"gitId":"lebencwb"},"content":"            command \u003d new FileCommand(CommandType.UNLOAD);"},{"lineNumber":98,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":100,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":101,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"lebencwb"},"content":"        parsingScanner.close();"},{"lineNumber":103,"author":{"gitId":"lebencwb"},"content":"        return command;"},{"lineNumber":104,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":106,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"lebencwb"},"content":"     * Returns a FileCommand from parsing the input in the parsing scanner."},{"lineNumber":108,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the FileCommand."},{"lineNumber":110,"author":{"gitId":"lebencwb"},"content":"     * @param parsingScanner The scanner containing the input to be parsed."},{"lineNumber":111,"author":{"gitId":"lebencwb"},"content":"     * @return The appropriate FileCommand."},{"lineNumber":112,"author":{"gitId":"lebencwb"},"content":"     * @throws FileException If the parsing scanner is empty, or if the user input deviates from the"},{"lineNumber":113,"author":{"gitId":"lebencwb"},"content":"     * accepted formats."},{"lineNumber":114,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"lebencwb"},"content":"    private static FileCommand parseFileCommand(CommandType commandType, Scanner parsingScanner)"},{"lineNumber":116,"author":{"gitId":"lebencwb"},"content":"            throws FileException {"},{"lineNumber":117,"author":{"gitId":"lebencwb"},"content":"        if (!parsingScanner.hasNext()) {"},{"lineNumber":118,"author":{"gitId":"lebencwb"},"content":"            throw FileException.INVALID_FILE_SPECIFICATION;"},{"lineNumber":119,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"lebencwb"},"content":"        String fileType \u003d parsingScanner.next().toLowerCase();"},{"lineNumber":121,"author":{"gitId":"lebencwb"},"content":"        boolean isTask \u003d fileType.equals(\"task\");"},{"lineNumber":122,"author":{"gitId":"lebencwb"},"content":"        boolean isFinance \u003d fileType.equals(\"finance\");"},{"lineNumber":123,"author":{"gitId":"lebencwb"},"content":"        if (!isTask \u0026 !isFinance) {"},{"lineNumber":124,"author":{"gitId":"lebencwb"},"content":"            throw FileException.INVALID_FILE_SPECIFICATION;"},{"lineNumber":125,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"lebencwb"},"content":"        if (!parsingScanner.hasNext()) {"},{"lineNumber":127,"author":{"gitId":"lebencwb"},"content":"            throw FileException.INVALID_FILE_SPECIFICATION;"},{"lineNumber":128,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"lebencwb"},"content":"        String filepath \u003d parsingScanner.nextLine().trim();"},{"lineNumber":130,"author":{"gitId":"lebencwb"},"content":"        return new FileCommand(commandType, fileType, filepath);"},{"lineNumber":131,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":133,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"lebencwb"},"content":"     * Returns a QueryCommand from parsing the input in the parsing scanner."},{"lineNumber":135,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the QueryCommand."},{"lineNumber":137,"author":{"gitId":"lebencwb"},"content":"     * @param parsingScanner The scanner containing the input to be parsed."},{"lineNumber":138,"author":{"gitId":"lebencwb"},"content":"     * @return The appropriate QueryCommand."},{"lineNumber":139,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If the parsing scanner is empty."},{"lineNumber":140,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"lebencwb"},"content":"    private static QueryCommand parseQueryCommand(CommandType commandType, Scanner parsingScanner)"},{"lineNumber":142,"author":{"gitId":"lebencwb"},"content":"            throws UserInputException {"},{"lineNumber":143,"author":{"gitId":"lebencwb"},"content":"        if (!parsingScanner.hasNext()) {"},{"lineNumber":144,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.EMPTY_QUERY;"},{"lineNumber":145,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"lebencwb"},"content":"        return new QueryCommand(commandType, parsingScanner.nextLine().trim().toLowerCase());"},{"lineNumber":147,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":149,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"lebencwb"},"content":"     * Returns an EditCommand from parsing the input in the parsing scanner."},{"lineNumber":151,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the EditCommand."},{"lineNumber":153,"author":{"gitId":"lebencwb"},"content":"     * @param parsingScanner The scanner containing the input to be parsed."},{"lineNumber":154,"author":{"gitId":"lebencwb"},"content":"     * @return The appropriate EditCommand."},{"lineNumber":155,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the parsing scanner is empty, or if the user input deviates from the"},{"lineNumber":156,"author":{"gitId":"lebencwb"},"content":"     * accepted formats."},{"lineNumber":157,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"lebencwb"},"content":"    private static EditCommand parseEditCommand(CommandType commandType, Scanner parsingScanner)"},{"lineNumber":159,"author":{"gitId":"lebencwb"},"content":"            throws DukeException {"},{"lineNumber":160,"author":{"gitId":"lebencwb"},"content":"        if (!parsingScanner.hasNext()) {"},{"lineNumber":161,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_TASK_INDEX;"},{"lineNumber":162,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":164,"author":{"gitId":"lebencwb"},"content":"            int index \u003d Integer.parseInt(parsingScanner.next());"},{"lineNumber":165,"author":{"gitId":"lebencwb"},"content":"            return new EditCommand(commandType, index);"},{"lineNumber":166,"author":{"gitId":"lebencwb"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":167,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_TASK_INDEX;"},{"lineNumber":168,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":171,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"lebencwb"},"content":"     * Returns an AddCommand from parsing the input in the parsing scanner."},{"lineNumber":173,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the AddCommand."},{"lineNumber":175,"author":{"gitId":"lebencwb"},"content":"     * @param parsingScanner The scanner containing the input to be parsed."},{"lineNumber":176,"author":{"gitId":"lebencwb"},"content":"     * @return The appropriate AddCommand."},{"lineNumber":177,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the parsing scanner is empty, or if the user input deviates from"},{"lineNumber":178,"author":{"gitId":"lebencwb"},"content":"     * the acceptable formats."},{"lineNumber":179,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"lebencwb"},"content":"    private static AddCommand parseAddCommand(CommandType commandType, Scanner parsingScanner)"},{"lineNumber":181,"author":{"gitId":"lebencwb"},"content":"            throws DukeException {"},{"lineNumber":182,"author":{"gitId":"lebencwb"},"content":"        if (!parsingScanner.hasNext()) {"},{"lineNumber":183,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_TASK_DESCRIPTION;"},{"lineNumber":184,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"lebencwb"},"content":"        String line \u003d parsingScanner.nextLine().trim();"},{"lineNumber":186,"author":{"gitId":"lebencwb"},"content":"        if (commandType.equals(CommandType.TODO)) {"},{"lineNumber":187,"author":{"gitId":"lebencwb"},"content":"            return new AddCommand(commandType, line);"},{"lineNumber":188,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"lebencwb"},"content":"        if (commandType.equals(CommandType.DEADLINE)) {"},{"lineNumber":190,"author":{"gitId":"lebencwb"},"content":"            return splitAndParseAddCommand(commandType, line, \"( /by )\","},{"lineNumber":191,"author":{"gitId":"lebencwb"},"content":"                    UserInputException.INVALID_DEADLINE_FORMAT);"},{"lineNumber":192,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"lebencwb"},"content":"        if (commandType.equals(CommandType.EVENT)) {"},{"lineNumber":194,"author":{"gitId":"lebencwb"},"content":"            return splitAndParseAddCommand(commandType, line, \"( /at )\","},{"lineNumber":195,"author":{"gitId":"lebencwb"},"content":"                    UserInputException.INVALID_EVENT_FORMAT);"},{"lineNumber":196,"author":{"gitId":"lebencwb"},"content":"        } else {"},{"lineNumber":197,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":198,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":201,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"lebencwb"},"content":"     * Returns the specific AddCommand after splitting the line according to the regular expression."},{"lineNumber":203,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the AddCommand."},{"lineNumber":205,"author":{"gitId":"lebencwb"},"content":"     * @param line The line to be parsed and split."},{"lineNumber":206,"author":{"gitId":"lebencwb"},"content":"     * @param regex The regular expression used for splitting the line."},{"lineNumber":207,"author":{"gitId":"lebencwb"},"content":"     * @param exception The DukeException to be thrown if the parsing failed."},{"lineNumber":208,"author":{"gitId":"lebencwb"},"content":"     * @return The appropriate AddCommand."},{"lineNumber":209,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the line does not contain the regular expression."},{"lineNumber":210,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"lebencwb"},"content":"    private static AddCommand splitAndParseAddCommand("},{"lineNumber":212,"author":{"gitId":"lebencwb"},"content":"            CommandType commandType, String line, String regex, DukeException exception) throws DukeException {"},{"lineNumber":213,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":214,"author":{"gitId":"lebencwb"},"content":"            String[] details \u003d line.split(regex, 2);"},{"lineNumber":215,"author":{"gitId":"lebencwb"},"content":"            return new AddCommand(commandType, details[0], details[1]);"},{"lineNumber":216,"author":{"gitId":"lebencwb"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":217,"author":{"gitId":"lebencwb"},"content":"            throw exception;"},{"lineNumber":218,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":221,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"lebencwb"},"content":"     * Returns a FinanceCommand from parsing the input in the parsing scanner."},{"lineNumber":223,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":224,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the FinanceCommand."},{"lineNumber":225,"author":{"gitId":"lebencwb"},"content":"     * @param scanner The scanner containing the input to be parsed."},{"lineNumber":226,"author":{"gitId":"lebencwb"},"content":"     * @return The appropriate FinanceCommand."},{"lineNumber":227,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the parsing scanner is empty, or if the user input deviates from the"},{"lineNumber":228,"author":{"gitId":"lebencwb"},"content":"     * accepted formats."},{"lineNumber":229,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":230,"author":{"gitId":"lebencwb"},"content":"    private static FinanceCommand parseFinanceCommand(CommandType commandType, Scanner scanner) throws DukeException {"},{"lineNumber":231,"author":{"gitId":"lebencwb"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":232,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.EMPTY_CATEGORY;"},{"lineNumber":233,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"lebencwb"},"content":"        String name \u003d scanner.next();"},{"lineNumber":235,"author":{"gitId":"lebencwb"},"content":"        FinanceCommand financeCommand;"},{"lineNumber":236,"author":{"gitId":"lebencwb"},"content":"        switch (commandType) {"},{"lineNumber":237,"author":{"gitId":"lebencwb"},"content":"        case NEW:"},{"lineNumber":238,"author":{"gitId":"lebencwb"},"content":"            financeCommand \u003d new FinanceCommand(CommandType.NEW, name);"},{"lineNumber":239,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":240,"author":{"gitId":"lebencwb"},"content":"        case REMOVE:"},{"lineNumber":241,"author":{"gitId":"lebencwb"},"content":"            financeCommand \u003d new FinanceCommand(CommandType.REMOVE, name);"},{"lineNumber":242,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":243,"author":{"gitId":"lebencwb"},"content":"        case ADD:"},{"lineNumber":244,"author":{"gitId":"lebencwb"},"content":"            if (!scanner.hasNextDouble()) {"},{"lineNumber":245,"author":{"gitId":"lebencwb"},"content":"                throw UserInputException.INVALID_AMOUNT;"},{"lineNumber":246,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":247,"author":{"gitId":"lebencwb"},"content":"            financeCommand \u003d new FinanceCommand(CommandType.ADD, name, scanner.nextDouble());"},{"lineNumber":248,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":249,"author":{"gitId":"lebencwb"},"content":"        case REDUCE:"},{"lineNumber":250,"author":{"gitId":"lebencwb"},"content":"            if (!scanner.hasNextDouble()) {"},{"lineNumber":251,"author":{"gitId":"lebencwb"},"content":"                throw UserInputException.INVALID_AMOUNT;"},{"lineNumber":252,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":253,"author":{"gitId":"lebencwb"},"content":"            financeCommand \u003d new FinanceCommand(CommandType.REDUCE, name, scanner.nextDouble());"},{"lineNumber":254,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":255,"author":{"gitId":"lebencwb"},"content":"        case RENAME:"},{"lineNumber":256,"author":{"gitId":"lebencwb"},"content":"            if (!scanner.hasNext()) {"},{"lineNumber":257,"author":{"gitId":"lebencwb"},"content":"                throw UserInputException.EMPTY_CATEGORY;"},{"lineNumber":258,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":259,"author":{"gitId":"lebencwb"},"content":"            financeCommand \u003d new FinanceCommand(CommandType.RENAME, name, scanner.next());"},{"lineNumber":260,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":261,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":262,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":263,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":264,"author":{"gitId":"lebencwb"},"content":"        return financeCommand;"},{"lineNumber":265,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":267,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":268,"author":{"gitId":"lebencwb"},"content":"     * Parses a specified line from a file and converts it into a task."},{"lineNumber":269,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":270,"author":{"gitId":"lebencwb"},"content":"     * @param line The line to be parsed."},{"lineNumber":271,"author":{"gitId":"lebencwb"},"content":"     * @return The task parsed from the line."},{"lineNumber":272,"author":{"gitId":"lebencwb"},"content":"     * @throws FileException If the line deviates from any of the acceptable formats"},{"lineNumber":273,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":274,"author":{"gitId":"lebencwb"},"content":"    public static Task parseTaskFromFile(String line) throws FileException {"},{"lineNumber":275,"author":{"gitId":"lebencwb"},"content":"        assert !line.isEmpty();"},{"lineNumber":276,"author":{"gitId":"lebencwb"},"content":"        Task task; // Has to be declared beforehand for correct scope"},{"lineNumber":277,"author":{"gitId":"lebencwb"},"content":"        Scanner parsingScanner \u003d new Scanner(line);"},{"lineNumber":278,"author":{"gitId":"lebencwb"},"content":"        String type; // Has to be declared beforehand for correct scope"},{"lineNumber":279,"author":{"gitId":"lebencwb"},"content":"        String description;"},{"lineNumber":280,"author":{"gitId":"lebencwb"},"content":"        int isDoneInteger; // Has to be declared beforehand for correct scope"},{"lineNumber":281,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":282,"author":{"gitId":"lebencwb"},"content":"            type \u003d parsingScanner.next();"},{"lineNumber":283,"author":{"gitId":"lebencwb"},"content":"            parsingScanner.next();"},{"lineNumber":284,"author":{"gitId":"lebencwb"},"content":"            isDoneInteger \u003d parsingScanner.nextInt();"},{"lineNumber":285,"author":{"gitId":"lebencwb"},"content":"            parsingScanner.next();"},{"lineNumber":286,"author":{"gitId":"lebencwb"},"content":"            description \u003d parsingScanner.nextLine().trim();"},{"lineNumber":287,"author":{"gitId":"lebencwb"},"content":"            parsingScanner.close();"},{"lineNumber":288,"author":{"gitId":"lebencwb"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":289,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_PARSING_FAILURE;"},{"lineNumber":290,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"lebencwb"},"content":"        switch (type) {"},{"lineNumber":292,"author":{"gitId":"lebencwb"},"content":"        case \"T\":"},{"lineNumber":293,"author":{"gitId":"lebencwb"},"content":"            task \u003d new ToDo(description);"},{"lineNumber":294,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":295,"author":{"gitId":"lebencwb"},"content":"        case \"D\":"},{"lineNumber":296,"author":{"gitId":"lebencwb"},"content":"            String[] details \u003d description.split(\"( by )\", 2);"},{"lineNumber":297,"author":{"gitId":"lebencwb"},"content":"            task \u003d new Deadline(details[0], details[1]);"},{"lineNumber":298,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":299,"author":{"gitId":"lebencwb"},"content":"        case \"E\":"},{"lineNumber":300,"author":{"gitId":"lebencwb"},"content":"            details \u003d description.split(\"( at )\", 2);"},{"lineNumber":301,"author":{"gitId":"lebencwb"},"content":"            task \u003d new Event(details[0], details[1]);"},{"lineNumber":302,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":303,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":304,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_PARSING_FAILURE;"},{"lineNumber":305,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":306,"author":{"gitId":"lebencwb"},"content":"        if (isDoneInteger \u003d\u003d 1) {"},{"lineNumber":307,"author":{"gitId":"lebencwb"},"content":"            task.markAsDone();"},{"lineNumber":308,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"lebencwb"},"content":"        return task;"},{"lineNumber":310,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":312,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":313,"author":{"gitId":"lebencwb"},"content":"     * Parses a specified line from a file and converts it into a category."},{"lineNumber":314,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":315,"author":{"gitId":"lebencwb"},"content":"     * @param line The line to be parsed."},{"lineNumber":316,"author":{"gitId":"lebencwb"},"content":"     * @return The category parsed from the line."},{"lineNumber":317,"author":{"gitId":"lebencwb"},"content":"     * @throws FileException If the line from the file is incorrectly formatted."},{"lineNumber":318,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":319,"author":{"gitId":"lebencwb"},"content":"    public static Category parseCategoryFromFile(String line) throws FileException, UserInputException {"},{"lineNumber":320,"author":{"gitId":"lebencwb"},"content":"        assert (!line.isEmpty());"},{"lineNumber":321,"author":{"gitId":"lebencwb"},"content":"        Scanner parsingScanner \u003d new Scanner(line);"},{"lineNumber":322,"author":{"gitId":"lebencwb"},"content":"        String name \u003d parsingScanner.next();"},{"lineNumber":323,"author":{"gitId":"lebencwb"},"content":"        Category category \u003d new Category(name);"},{"lineNumber":324,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":325,"author":{"gitId":"lebencwb"},"content":"            parsingScanner.next();"},{"lineNumber":326,"author":{"gitId":"lebencwb"},"content":"            category.addAmount(parsingScanner.nextDouble());"},{"lineNumber":327,"author":{"gitId":"lebencwb"},"content":"            return category;"},{"lineNumber":328,"author":{"gitId":"lebencwb"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":329,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_PARSING_FAILURE;"},{"lineNumber":330,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":331,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":332}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.command.FileException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.financial.FinanceList;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"import java.nio.file.Files;"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":" * A file-reader and writer responsible for retrieving a list of entries from an existing"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":" * text file in the specified filepath, or otherwise creates that file. It can also edit"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":" * the text file by adding, deleting or replacing a line."},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * Absolute or relative filepath of the source of the file to be retrieved or the"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     * destination of the file to be written."},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"    private String filepath;"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    /** Absolute or relative filepath of the parent of the source file. */"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    private String parentFilepath;"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    /** List of tasks being managed. */"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    private TaskList tasks;"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    /** List of financial records being managed. */"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"    private FinanceList finances;"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    /** Boolean indicator of whether there is a file currently loaded. */"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"    private boolean isLoaded;"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new Storage object."},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    public Storage() {"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"        isLoaded \u003d false;"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"     * Creates and returns a File at the specified filepath, and initializes the relevant fields of the storage."},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"     * @param filepath The destination filepath for creating the file."},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the file could not be created due to an IO error."},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    public void makeNewFile(String filepath, String fileType) throws DukeException {"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"        if (isLoaded) {"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_ALREADY_LOADED;"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"            this.filepath \u003d filepath;"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"            parentFilepath \u003d Path.of(filepath).getParent().toString();"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"            File parentFolder \u003d new File(parentFilepath);"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"            if (!parentFolder.exists()) {"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"                parentFolder.mkdir();"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"            File taskFile \u003d new File(filepath);"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"            boolean isNewFile \u003d taskFile.createNewFile();"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"            if (!isNewFile) {"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"                throw FileException.FILE_ALREADY_EXISTS;"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"            if (fileType.equals(\"task\")) {"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"                tasks \u003d new TaskList();"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"            } else if (fileType.equals(\"finance\")) {"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"                finances \u003d new FinanceList();"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"            } else {"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"                throw FileException.INVALID_FILE_SPECIFICATION;"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"            isLoaded \u003d true;"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_NO_ACCESS;"},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"     * Loads a list of entries from the source file, if the file exists and there is no file currently loaded."},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If there is already a file currently loaded, or if an error occurred when trying"},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":"     * to read the file."},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":"    public void loadFile(String filepath, String fileType) throws DukeException {"},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":"        if (isLoaded) {"},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_ALREADY_LOADED;"},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":"            File file \u003d initialize(filepath);"},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":"            load(file, fileType);"},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":"            isLoaded \u003d true;"},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":"        } catch (IOException e) {"},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_NOT_FOUND;"},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":97,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"lebencwb"},"content":"     * Initializes the basic fields of the storage (the filepath and its parent directory)."},{"lineNumber":99,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"lebencwb"},"content":"     * @param filepath The filepath of the source file."},{"lineNumber":101,"author":{"gitId":"lebencwb"},"content":"     * @return The file at the filepath."},{"lineNumber":102,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"lebencwb"},"content":"    private File initialize(String filepath) {"},{"lineNumber":104,"author":{"gitId":"lebencwb"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":105,"author":{"gitId":"lebencwb"},"content":"        parentFilepath \u003d Path.of(filepath).getParent().toString();"},{"lineNumber":106,"author":{"gitId":"lebencwb"},"content":"        return new File(filepath);"},{"lineNumber":107,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":109,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"lebencwb"},"content":"     * Loads either the task-list or the finance-list, depending on the type of the file (task or finance)."},{"lineNumber":111,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"lebencwb"},"content":"     * @param file The source file."},{"lineNumber":113,"author":{"gitId":"lebencwb"},"content":"     * @param fileType The type of the file (task or finance)."},{"lineNumber":114,"author":{"gitId":"lebencwb"},"content":"     * @throws IOException If an IO error occurred while trying to read the file."},{"lineNumber":115,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the specified file type is not recognized."},{"lineNumber":116,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"lebencwb"},"content":"    private void load(File file, String fileType) throws IOException, DukeException {"},{"lineNumber":118,"author":{"gitId":"lebencwb"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":119,"author":{"gitId":"lebencwb"},"content":"        switch (fileType) {"},{"lineNumber":120,"author":{"gitId":"lebencwb"},"content":"        case \"task\":"},{"lineNumber":121,"author":{"gitId":"lebencwb"},"content":"            loadTasks(scanner);"},{"lineNumber":122,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":123,"author":{"gitId":"lebencwb"},"content":"        case \"finance\":"},{"lineNumber":124,"author":{"gitId":"lebencwb"},"content":"            loadFinances(scanner);"},{"lineNumber":125,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":126,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":127,"author":{"gitId":"lebencwb"},"content":"            throw FileException.INVALID_FILE_SPECIFICATION;"},{"lineNumber":128,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":131,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"lebencwb"},"content":"     * Initializes the task-list and loads it based on input from scanning and parsing a file."},{"lineNumber":133,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"lebencwb"},"content":"     * @param scanner The file scanner."},{"lineNumber":135,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the input from the scanner cannot be parsed properly."},{"lineNumber":136,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"lebencwb"},"content":"    private void loadTasks(Scanner scanner) throws DukeException {"},{"lineNumber":138,"author":{"gitId":"lebencwb"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":139,"author":{"gitId":"lebencwb"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":140,"author":{"gitId":"lebencwb"},"content":"            tasks.addEntry(Parser.parseTaskFromFile(scanner.nextLine()));"},{"lineNumber":141,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":144,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"lebencwb"},"content":"     * Initializes the finance-list and loads it based on input from scanning and parsing a file."},{"lineNumber":146,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"lebencwb"},"content":"     * @param scanner The file scanner."},{"lineNumber":148,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the input from the scanner cannot be parsed properly."},{"lineNumber":149,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"lebencwb"},"content":"    private void loadFinances(Scanner scanner) throws DukeException {"},{"lineNumber":151,"author":{"gitId":"lebencwb"},"content":"        finances \u003d new FinanceList();"},{"lineNumber":152,"author":{"gitId":"lebencwb"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":153,"author":{"gitId":"lebencwb"},"content":"            finances.addEntry(Parser.parseCategoryFromFile(scanner.nextLine().trim()));"},{"lineNumber":154,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":157,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"lebencwb"},"content":"     * Gets the task-list."},{"lineNumber":159,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"lebencwb"},"content":"     * @return The task-list."},{"lineNumber":161,"author":{"gitId":"lebencwb"},"content":"     * @throws FileException If there is no file currently loaded, or if the file currently loaded is of the"},{"lineNumber":162,"author":{"gitId":"lebencwb"},"content":"     * wrong type."},{"lineNumber":163,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"lebencwb"},"content":"    public TaskList getTasks() throws FileException {"},{"lineNumber":165,"author":{"gitId":"lebencwb"},"content":"        if (!isLoaded) {"},{"lineNumber":166,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_NOT_LOADED;"},{"lineNumber":167,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"lebencwb"},"content":"        if (tasks \u003d\u003d null) {"},{"lineNumber":169,"author":{"gitId":"lebencwb"},"content":"            throw FileException.WRONG_FILE_TYPE;"},{"lineNumber":170,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"lebencwb"},"content":"        return tasks;"},{"lineNumber":172,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":174,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"lebencwb"},"content":"     * Gets the finance-list."},{"lineNumber":176,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"lebencwb"},"content":"     * @return The finance-list."},{"lineNumber":178,"author":{"gitId":"lebencwb"},"content":"     * @throws FileException If there is no file currently loaded, or if the file currently loaded is of the"},{"lineNumber":179,"author":{"gitId":"lebencwb"},"content":"     * wrong type."},{"lineNumber":180,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"lebencwb"},"content":"    public FinanceList getFinances() throws FileException {"},{"lineNumber":182,"author":{"gitId":"lebencwb"},"content":"        if (!isLoaded) {"},{"lineNumber":183,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_NOT_LOADED;"},{"lineNumber":184,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"lebencwb"},"content":"        if (finances \u003d\u003d null) {"},{"lineNumber":186,"author":{"gitId":"lebencwb"},"content":"            throw FileException.WRONG_FILE_TYPE;"},{"lineNumber":187,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"lebencwb"},"content":"        return finances;"},{"lineNumber":189,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":191,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"lebencwb"},"content":"     * Appends a line of text to the destination file specified by the filepath."},{"lineNumber":193,"author":{"gitId":"lebencwb"},"content":"     * \u003cp\u003e"},{"lineNumber":194,"author":{"gitId":"lebencwb"},"content":"     * If an I/O error occurs, shows an error message."},{"lineNumber":195,"author":{"gitId":"lebencwb"},"content":"     * @param line A line of text to be appended to the destination file."},{"lineNumber":196,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"lebencwb"},"content":"    public void addLine(String line) throws DukeException {"},{"lineNumber":198,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":199,"author":{"gitId":"lebencwb"},"content":"            FileWriter fileWriter \u003d new FileWriter(filepath, true);"},{"lineNumber":200,"author":{"gitId":"lebencwb"},"content":"            fileWriter.write(line + System.lineSeparator());"},{"lineNumber":201,"author":{"gitId":"lebencwb"},"content":"            fileWriter.close();"},{"lineNumber":202,"author":{"gitId":"lebencwb"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":203,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_NOT_FOUND;"},{"lineNumber":204,"author":{"gitId":"lebencwb"},"content":"        } catch (IOException e) {"},{"lineNumber":205,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_NO_ACCESS;"},{"lineNumber":206,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":209,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"lebencwb"},"content":"     * Deletes a line of text at the specified index from the destination file specified by"},{"lineNumber":211,"author":{"gitId":"lebencwb"},"content":"     * the filepath."},{"lineNumber":212,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":213,"author":{"gitId":"lebencwb"},"content":"     * \u003cp\u003eIf the index falls outside the range of the number of lines in the file, no lines are"},{"lineNumber":214,"author":{"gitId":"lebencwb"},"content":"     * deleted, and no error is raised.\u003c/p\u003e"},{"lineNumber":215,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":216,"author":{"gitId":"lebencwb"},"content":"     * @param index The line number to be deleted."},{"lineNumber":217,"author":{"gitId":"lebencwb"},"content":"     * @throws FileException If an IO error occurred while accessing, reading or writing to the file."},{"lineNumber":218,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"lebencwb"},"content":"    public void deleteLine(int index) throws FileException {"},{"lineNumber":220,"author":{"gitId":"lebencwb"},"content":"        replaceLine(index, \"\");"},{"lineNumber":221,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":223,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"lebencwb"},"content":"     * Replaces a line of text at the specified index with a specified line of text in the"},{"lineNumber":225,"author":{"gitId":"lebencwb"},"content":"     * destination file specified by the filepath."},{"lineNumber":226,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":227,"author":{"gitId":"lebencwb"},"content":"     * \u003cp\u003eIf the index falls outside the range of the number of lines in the file, no lines are"},{"lineNumber":228,"author":{"gitId":"lebencwb"},"content":"     * replaced, and no error is raised.\u003c/p\u003e"},{"lineNumber":229,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":230,"author":{"gitId":"lebencwb"},"content":"     * \u003cp\u003eIf the replacing text is empty, deletes the line at the index instead of replacing it.\u003c/p\u003e"},{"lineNumber":231,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":232,"author":{"gitId":"lebencwb"},"content":"     * @param index The line number to be replaced."},{"lineNumber":233,"author":{"gitId":"lebencwb"},"content":"     * @param line The line of text to replace the previous one."},{"lineNumber":234,"author":{"gitId":"lebencwb"},"content":"     * @throws FileException If an IO error occurred while accessing, reading or writing to the file."},{"lineNumber":235,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"lebencwb"},"content":"    public void replaceLine(int index, String line) throws FileException {"},{"lineNumber":237,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":238,"author":{"gitId":"lebencwb"},"content":"            String tempFilepath \u003d parentFilepath + \"/temp.txt\";"},{"lineNumber":239,"author":{"gitId":"lebencwb"},"content":"            Files.copy(Path.of(filepath), Path.of((tempFilepath)));"},{"lineNumber":240,"author":{"gitId":"lebencwb"},"content":"            FileWriter fileWriter \u003d new FileWriter(filepath);"},{"lineNumber":241,"author":{"gitId":"lebencwb"},"content":"            File copy \u003d new File(tempFilepath);"},{"lineNumber":242,"author":{"gitId":"lebencwb"},"content":"            Scanner scanner \u003d new Scanner(copy);"},{"lineNumber":243,"author":{"gitId":"lebencwb"},"content":"            int lineNumber \u003d 1;"},{"lineNumber":244,"author":{"gitId":"lebencwb"},"content":"            while (scanner.hasNext()) {"},{"lineNumber":245,"author":{"gitId":"lebencwb"},"content":"                if (lineNumber !\u003d index) {"},{"lineNumber":246,"author":{"gitId":"lebencwb"},"content":"                    fileWriter.write(scanner.nextLine() + System.lineSeparator());"},{"lineNumber":247,"author":{"gitId":"lebencwb"},"content":"                    lineNumber++;"},{"lineNumber":248,"author":{"gitId":"lebencwb"},"content":"                    continue;"},{"lineNumber":249,"author":{"gitId":"lebencwb"},"content":"                }"},{"lineNumber":250,"author":{"gitId":"lebencwb"},"content":"                if (!line.isEmpty()) {"},{"lineNumber":251,"author":{"gitId":"lebencwb"},"content":"                    fileWriter.write(line + System.lineSeparator());"},{"lineNumber":252,"author":{"gitId":"lebencwb"},"content":"                }"},{"lineNumber":253,"author":{"gitId":"lebencwb"},"content":"                scanner.nextLine();"},{"lineNumber":254,"author":{"gitId":"lebencwb"},"content":"                lineNumber++;"},{"lineNumber":255,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":256,"author":{"gitId":"lebencwb"},"content":"            fileWriter.close();"},{"lineNumber":257,"author":{"gitId":"lebencwb"},"content":"            scanner.close();"},{"lineNumber":258,"author":{"gitId":"lebencwb"},"content":"            Files.delete(Path.of(tempFilepath));"},{"lineNumber":259,"author":{"gitId":"lebencwb"},"content":"        } catch (IOException e) {"},{"lineNumber":260,"author":{"gitId":"lebencwb"},"content":"            throw FileException.FILE_NO_ACCESS;"},{"lineNumber":261,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":264,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":265,"author":{"gitId":"lebencwb"},"content":"     * Resets the storage so that it is ready to work with a new file."},{"lineNumber":266,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":267,"author":{"gitId":"lebencwb"},"content":"     * \u003cp\u003eAfter resetting, no other commands from the user will work until they create"},{"lineNumber":268,"author":{"gitId":"lebencwb"},"content":"     * or load another file.\u003c/p\u003e"},{"lineNumber":269,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":270,"author":{"gitId":"lebencwb"},"content":"    public void reset() {"},{"lineNumber":271,"author":{"gitId":"lebencwb"},"content":"        this.filepath \u003d null;"},{"lineNumber":272,"author":{"gitId":"lebencwb"},"content":"        this.parentFilepath \u003d null;"},{"lineNumber":273,"author":{"gitId":"lebencwb"},"content":"        this.tasks \u003d null;"},{"lineNumber":274,"author":{"gitId":"lebencwb"},"content":"        this.finances \u003d null;"},{"lineNumber":275,"author":{"gitId":"lebencwb"},"content":"        this.isLoaded \u003d false;"},{"lineNumber":276,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":277}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":" * A user interface with standard messages used in interacting with the user."},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"    /** Standard messages as part of the UI\u0027s design. */"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"    static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, your list manager!\\n\""},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"            + \"Before we get started, let me know if you would like to:\\n\""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"            + \"    i)  LOAD   \u003cfiletype\u003e \u003cfilepath\u003e : fetch a list you\\n\""},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"            + \"        have made before, or\\n\""},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"            + \"   ii)  CREATE \u003cfiletype\u003e \u003cfilepath\u003e : create a new list\\n\""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"            + \"        from scratch.\";"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_TASK_ADDED \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_TASK_DELETED \u003d \"Noted. I\u0027ve removed this task:\";"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_TASKS_CURRENT \u003d \"Now you have %d task(s) in the list.\";"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_TASK_DONE \u003d \"Nice! I\u0027ve marked this as done:\";"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_LIST \u003d \"Here are the entries in your list:\";"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_NO_ENTRIES \u003d \"There are no entries in your list.\";"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_TASKS_FOUND \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_TASKS_NOT_FOUND \u003d \"Hmm...I did not manage to find any tasks containing \";"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_FILE_LOADED \u003d \"Got it. I have successfully loaded your list from \";"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_FILE_CREATED \u003d \"Congratulations! You now have a new list at \";"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_CATEGORY_ADDED \u003d \"Got it. I\u0027ve added this category:\";"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_CATEGORY_DELETED \u003d \"Noted. I\u0027ve removed this category:\";"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_AMOUNT_CHANGED \u003d \"Got it. I\u0027ve updated your finance record:\";"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_CATEGORY_RENAMED \u003d \"Done. I\u0027ve renamed this category:\";"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_FILE_UNLOADED \u003d \"Okay! I\u0027ve unloaded the current file.\";"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    private static final String MESSAGE_TAG \u003d \"What can I do for you next?\";"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"    private static final String ERROR_PREFIX \u003d \"\\u2639 OOPS!!! \";"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    private static final String CHANGE_FORMAT \u003d \"%-15s:    %.02f -\u003e %.02f\";"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"    /** The message to be passed to the user. */"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"    private String outputMessage;"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"    /** Constructs a new user interface object that interacts with the user input. */"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"    public Ui() {}"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"     * Gets the message to be passed to the user."},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"     * @return The current message."},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"    public String getMessage() {"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"        return outputMessage;"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"     * Concatenates a sequence of lines, appending a linebreak after each line."},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"     * @param lines The lines to be concatenated."},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"     * @return A string of the concatenated lines."},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"    private static String concatenateLines(String... lines) {"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"        boolean isFirst \u003d true;"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"        for (String s : lines) {"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"            if (!isFirst) {"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"                stringBuilder.append(\u0027\\n\u0027);"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"            } else {"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"                isFirst \u003d false;"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"            stringBuilder.append(s);"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"        return stringBuilder.toString();"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"     * Concatenates a sequence of lines, numbering them in increasing sequence."},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"     * \u003cp\u003eIncludes options to indicate whether there is a header (or a footer) to"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"     * skip when numbering them.\u003c/p\u003e"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"     * @param hasHeader The boolean indicator whether to skip the first line in numbering."},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"     * @param hasFooter The boolean indicator whether to skip the last line in numbering."},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":"     * @param lines The lines to be concatenated."},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":"     * @return A string of the numbered and concatenated lines."},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":"    private static String numberAndConcatenateLines(boolean hasHeader, boolean hasFooter, String... lines) {"},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":"        int start \u003d 0;"},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":"        int end \u003d lines.length;"},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":"        int number \u003d 1;"},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":"        if (hasHeader) {"},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":"            assert(lines.length \u003e 0);"},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":"            stringBuilder.append(lines[0]);"},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":"            stringBuilder.append(\u0027\\n\u0027);"},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":"            start++;"},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"        if (hasFooter) {"},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":"            assert end - start \u003e 0;"},{"lineNumber":95,"author":{"gitId":"lebencwb"},"content":"            end--;"},{"lineNumber":96,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":98,"author":{"gitId":"lebencwb"},"content":"        for (int i \u003d start; i \u003c end; i++) {"},{"lineNumber":99,"author":{"gitId":"lebencwb"},"content":"            stringBuilder.append(String.format(\"%d. %s\\n\", number++, lines[i]));"},{"lineNumber":100,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":102,"author":{"gitId":"lebencwb"},"content":"        if (hasFooter) {"},{"lineNumber":103,"author":{"gitId":"lebencwb"},"content":"            stringBuilder.append(lines[lines.length - 1]);"},{"lineNumber":104,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"lebencwb"},"content":"        return stringBuilder.toString();"},{"lineNumber":106,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":108,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"lebencwb"},"content":"     * Gets the standard welcome message."},{"lineNumber":110,"author":{"gitId":"lebencwb"},"content":"     * @return The standard welcome message."},{"lineNumber":111,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"lebencwb"},"content":"    public static String getWelcomeMessage() {"},{"lineNumber":113,"author":{"gitId":"lebencwb"},"content":"        return MESSAGE_WELCOME;"},{"lineNumber":114,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":116,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to be the standard goodbye message."},{"lineNumber":118,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"lebencwb"},"content":"    public void goodbye() {"},{"lineNumber":120,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d MESSAGE_GOODBYE;"},{"lineNumber":121,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":123,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"lebencwb"},"content":"     * Prepends a standard error prefix to a specified error message."},{"lineNumber":125,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"lebencwb"},"content":"     * @param errorMessage The main error message."},{"lineNumber":127,"author":{"gitId":"lebencwb"},"content":"     * @return The error message with the standard error prefix."},{"lineNumber":128,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"lebencwb"},"content":"    public String addErrorPrefix(String errorMessage) {"},{"lineNumber":130,"author":{"gitId":"lebencwb"},"content":"        return ERROR_PREFIX + errorMessage;"},{"lineNumber":131,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":133,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"lebencwb"},"content":"     * Concatenates the entries as a numbered list starting from 1, and sets it as the output message."},{"lineNumber":135,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"lebencwb"},"content":"     * @param entries The entries to be numbered and listed."},{"lineNumber":137,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"lebencwb"},"content":"    public void listNumberedEntries(String... entries) {"},{"lineNumber":139,"author":{"gitId":"lebencwb"},"content":"        assert entries.length \u003e 0;"},{"lineNumber":140,"author":{"gitId":"lebencwb"},"content":"        String[] lines \u003d new String[entries.length + 1];"},{"lineNumber":141,"author":{"gitId":"lebencwb"},"content":"        lines[0] \u003d MESSAGE_LIST;"},{"lineNumber":142,"author":{"gitId":"lebencwb"},"content":"        System.arraycopy(entries, 0, lines, 1, entries.length);"},{"lineNumber":143,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d numberAndConcatenateLines(true, false, lines);"},{"lineNumber":144,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":146,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to be the standard message for when the task-list is empty."},{"lineNumber":148,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"lebencwb"},"content":"    public void setNoEntriesMessage() {"},{"lineNumber":150,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d MESSAGE_NO_ENTRIES;"},{"lineNumber":151,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":153,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"lebencwb"},"content":"     * Concatenates the tasks found matching the query as a numbered list starting from 1, and sets it as the"},{"lineNumber":155,"author":{"gitId":"lebencwb"},"content":"     * output message."},{"lineNumber":156,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"lebencwb"},"content":"     * @param finds The tasks found matching the query."},{"lineNumber":158,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"lebencwb"},"content":"    public void listNumberedFoundTasks(String... finds) {"},{"lineNumber":160,"author":{"gitId":"lebencwb"},"content":"        assert finds.length \u003e 0;"},{"lineNumber":161,"author":{"gitId":"lebencwb"},"content":"        String[] lines \u003d new String[finds.length + 1];"},{"lineNumber":162,"author":{"gitId":"lebencwb"},"content":"        lines[0] \u003d MESSAGE_TASKS_FOUND;"},{"lineNumber":163,"author":{"gitId":"lebencwb"},"content":"        System.arraycopy(finds, 0, lines, 1, finds.length);"},{"lineNumber":164,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d numberAndConcatenateLines(true, false, lines);"},{"lineNumber":165,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":167,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to inform the user that the search query returned no matching tasks."},{"lineNumber":169,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"lebencwb"},"content":"     * @param searchQuery The keyword used for searching the tasks."},{"lineNumber":171,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"lebencwb"},"content":"    public void setNoFoundTasksMessage(String searchQuery) {"},{"lineNumber":173,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d MESSAGE_TASKS_NOT_FOUND + searchQuery;"},{"lineNumber":174,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":176,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show that the file at the specified filepath was successfully loaded."},{"lineNumber":178,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"lebencwb"},"content":"     * @param filepath The specified filepath where the file was loaded from."},{"lineNumber":180,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"lebencwb"},"content":"    public void showLoadingSuccess(String filepath) {"},{"lineNumber":182,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_FILE_LOADED, filepath, MESSAGE_TAG);"},{"lineNumber":183,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":185,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show that the file was successfully created at the specified filepath."},{"lineNumber":187,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"lebencwb"},"content":"     * @param filepath The specified filepath where the file was created."},{"lineNumber":189,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"lebencwb"},"content":"    public void showMakeFileSuccess(String filepath) {"},{"lineNumber":191,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_FILE_CREATED, filepath, MESSAGE_TAG);"},{"lineNumber":192,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":194,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to update the user that the task was successfully added to the task-list."},{"lineNumber":196,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":197,"author":{"gitId":"lebencwb"},"content":"     * @param task The task that was added."},{"lineNumber":198,"author":{"gitId":"lebencwb"},"content":"     * @param numTasks The current number of tasks in the task-list."},{"lineNumber":199,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"lebencwb"},"content":"    public void showAddedTask(String task, int numTasks) {"},{"lineNumber":201,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines("},{"lineNumber":202,"author":{"gitId":"lebencwb"},"content":"                MESSAGE_TASK_ADDED,"},{"lineNumber":203,"author":{"gitId":"lebencwb"},"content":"                \" \" + task,"},{"lineNumber":204,"author":{"gitId":"lebencwb"},"content":"                String.format(MESSAGE_TASKS_CURRENT, numTasks));"},{"lineNumber":205,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":207,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show that the task was successfully marked as done."},{"lineNumber":209,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"lebencwb"},"content":"     * @param task The task that was marked as done."},{"lineNumber":211,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"lebencwb"},"content":"    public void showDoneTask(String task) {"},{"lineNumber":213,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_TASK_DONE, \"  \" + task);"},{"lineNumber":214,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":216,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":217,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show that the task was successfully deleted from the task-list."},{"lineNumber":218,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":219,"author":{"gitId":"lebencwb"},"content":"     * @param task The task that was deleted."},{"lineNumber":220,"author":{"gitId":"lebencwb"},"content":"     * @param numTasks The current number of tasks in the task-list."},{"lineNumber":221,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"lebencwb"},"content":"    public void showDeletedTask(String task, int numTasks) {"},{"lineNumber":223,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_TASK_DELETED,"},{"lineNumber":224,"author":{"gitId":"lebencwb"},"content":"                \"  \" + task,"},{"lineNumber":225,"author":{"gitId":"lebencwb"},"content":"                String.format(MESSAGE_TASKS_CURRENT, numTasks));"},{"lineNumber":226,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":227,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":229,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show that the specified category has been added."},{"lineNumber":231,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":232,"author":{"gitId":"lebencwb"},"content":"     * @param name The name of the added category."},{"lineNumber":233,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":234,"author":{"gitId":"lebencwb"},"content":"    public void showAddedCategory(String name) {"},{"lineNumber":235,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_CATEGORY_ADDED, name);"},{"lineNumber":236,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":238,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show that the specified category has been removed."},{"lineNumber":240,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":241,"author":{"gitId":"lebencwb"},"content":"     * @param name The name of the removed category."},{"lineNumber":242,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":243,"author":{"gitId":"lebencwb"},"content":"    public void showRemovedCategory(String name) {"},{"lineNumber":244,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_CATEGORY_DELETED, name);"},{"lineNumber":245,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":247,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show the change in amount within the category."},{"lineNumber":249,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":250,"author":{"gitId":"lebencwb"},"content":"     * @param name The name of the category."},{"lineNumber":251,"author":{"gitId":"lebencwb"},"content":"     * @param previousAmount The previous amount within the category."},{"lineNumber":252,"author":{"gitId":"lebencwb"},"content":"     * @param newAmount The new amount within the category."},{"lineNumber":253,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":254,"author":{"gitId":"lebencwb"},"content":"    public void showChangedAmount(String name, double previousAmount, double newAmount) {"},{"lineNumber":255,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_AMOUNT_CHANGED,"},{"lineNumber":256,"author":{"gitId":"lebencwb"},"content":"                String.format(CHANGE_FORMAT, name, previousAmount, newAmount));"},{"lineNumber":257,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":259,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":260,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show the change in name of the category."},{"lineNumber":261,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":262,"author":{"gitId":"lebencwb"},"content":"     * @param oldName The previous name of the category."},{"lineNumber":263,"author":{"gitId":"lebencwb"},"content":"     * @param newName The new name of the category."},{"lineNumber":264,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":265,"author":{"gitId":"lebencwb"},"content":"    public void showRenamedCategory(String oldName, String newName) {"},{"lineNumber":266,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_CATEGORY_RENAMED, String.format(\"%s -\u003e %s\", oldName, newName));"},{"lineNumber":267,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":269,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"lebencwb"},"content":"     * Sets the output message to show that the current file has been unloaded."},{"lineNumber":271,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"lebencwb"},"content":"    public void showUnloaded() {"},{"lineNumber":273,"author":{"gitId":"lebencwb"},"content":"        outputMessage \u003d concatenateLines(MESSAGE_FILE_UNLOADED, MESSAGE_TAG);"},{"lineNumber":274,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":275}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":" * A command dealing with adding an entry to a Duke-list."},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    private CommandType commandType;"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    private String[] details;"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new AddCommand object of the specified CommandType containing the accompanying details."},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the AddCommand"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"     * @param details The accompanying details needed for the execution of the command."},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    public AddCommand(CommandType commandType, String... details) {"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"        this.details \u003d details;"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    public void execute(Ui ui, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"        switch (commandType) {"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"        case TODO:"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"            assert details.length \u003d\u003d 1;"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"            TaskList tasks \u003d storage.getTasks();"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"            ToDo toDo \u003d new ToDo(details[0]);"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"            tasks.addEntry(toDo);"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"            storage.addLine(toDo.toFileString());"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"            ui.showAddedTask(toDo.toString(), tasks.getNumEntries());"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"        case DEADLINE:"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"            assert details.length \u003d\u003d 2;"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"            tasks \u003d storage.getTasks();"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"            Deadline deadline \u003d new Deadline(details[0], details[1]);"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"            tasks.addEntry(deadline);"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"            storage.addLine(deadline.toFileString());"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"            ui.showAddedTask(deadline.toString(), tasks.getNumEntries());"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"        case EVENT:"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"            assert details.length \u003d\u003d 2;"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"            tasks \u003d storage.getTasks();"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"            Event event \u003d new Event(details[0], details[1]);"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"            tasks.addEntry(event);"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"            storage.addLine(event.toFileString());"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"            ui.showAddedTask(event.toString(), tasks.getNumEntries());"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"        };"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"    public boolean isExit() {"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"        return false;"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"        return commandType.toString() + \" \" + Arrays.toString(details);"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":73}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":" * An abstract class forming the skeleton of more specific commands."},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"     * Executes the command, propagating changes to the task-list, user interface and storage"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"     * where applicable."},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"     * @param ui The user interface."},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"     * @param storage The storage."},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If thrown by any of the processes involved in the execution of the command."},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    public abstract void execute(Ui ui, Storage storage) throws DukeException;"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    /** Indicates if the command should prompt the application to exit."},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     * @return true, if the command is an ExitCommand; false otherwise."},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"    public abstract boolean isExit();"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":27}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":" * A standard set of command types."},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"public enum CommandType {"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"    BYE(\"bye\"),"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"    LIST(\"list\"),"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"    DONE(\"done\"),"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    DELETE(\"delete\"),"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    TODO(\"todo\"),"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    DEADLINE(\"deadline\"),"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    EVENT(\"event\"),"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    FIND(\"find\"),"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    LOAD(\"load\"),"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    CREATE(\"create\"),"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    UNLOAD(\"unload\"),"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    NEW(\"new\"),"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    REMOVE(\"remove\"),"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    ADD(\"add\"),"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    REDUCE(\"reduce\"),"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    RENAME(\"rename\"),"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    DISPLAY(\"display\");"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    private final String label;"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    /** Constructs the enums with a custom label. */"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    CommandType(String label) {"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"        this.label \u003d label;"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":31}},{"path":"src/main/java/duke/command/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":" * A command dealing with editing or deleting an entry from a Duke-list."},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"public class EditCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    /** The Type of the EditCommand. */"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    private CommandType commandType;"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    /** The index associated with the command. */"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    private int index;"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new EditCommand object of the specified CommandType with the index where the command is executed."},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the EditCommand."},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * @param index The index associated with the command."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public EditCommand(CommandType commandType, int index) {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"        this.index \u003d index;"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    public void execute(Ui ui, Storage storage) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"        TaskList tasks \u003d storage.getTasks();"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"        switch (this.commandType) {"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"        case DONE:"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"            Task doneTask \u003d tasks.markTaskAsDone(index);"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"            ui.showDoneTask(doneTask.toString());"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"            storage.replaceLine(index, doneTask.toFileString());"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"        case DELETE:"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"            Task deletedTask \u003d tasks.deleteTask(index);"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"            ui.showDeletedTask(deletedTask.toString(), tasks.getNumEntries());"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"            storage.deleteLine(index);"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"    public boolean isExit() {"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"        return false;"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"        return commandType.toString() + \" \" + index;"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":58}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":" * A command that signals the application to close."},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    private CommandType commandType;"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new ExitCommand of the specified CommandType."},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the ExitCommand."},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    public ExitCommand(CommandType commandType) {"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    public void execute(Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"        ui.goodbye();"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"        return true;"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"        return commandType.toString();"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":35}},{"path":"src/main/java/duke/command/FileCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":" * A command dealing with loading or unloading an existing Duke-list, or creating a new Duke-list."},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"public class FileCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    /** The type of the FileCommand. */"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    private CommandType commandType;"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    /** The type of the file associated with the FileCommand. */"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    private String fileType;"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    /** The filepath of the source (or destination) file. */"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    private String filepath;"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new FileCommand object of the specified CommandType."},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     * @param commandType"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    public FileCommand(CommandType commandType) {"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new FileCommand object of the specified CommandType with the specified filepath."},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the FileCommand."},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"     * @param filepath The filepath where the concerned file is located."},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    public FileCommand(CommandType commandType, String fileType, String filepath) {"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"        this.fileType \u003d fileType;"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"    public void execute(Ui ui, Storage storage) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"        switch (commandType) {"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"        case LOAD:"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"            storage.loadFile(filepath, fileType);"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"            ui.showLoadingSuccess(filepath);"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"        case CREATE:"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"            storage.makeNewFile(filepath, fileType);"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"            ui.showMakeFileSuccess(filepath);"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"        case UNLOAD:"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"            storage.reset();"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"            ui.showUnloaded();"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"    public boolean isExit() {"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"        return false;"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":63}},{"path":"src/main/java/duke/command/FileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":" * A class of exceptions arising from file-related errors/restrictions."},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"public class FileException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when a line in the specified file cannot be parsed. */"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    public static final FileException FILE_PARSING_FAILURE \u003d new FileException("},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, an error occurred while trying to parse the file.\");"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when an I/O error occurs while trying to load or create a file at the"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"     * specified filepath."},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    public static final FileException FILE_NOT_FOUND \u003d new FileException("},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, the file does not seem to exist.\\n\""},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"                    + \"Try: CREATE [TASK/FINANCE] [filepath].\");"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when there is an existing file in the filepath where the new file is to be created."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public static final FileException FILE_ALREADY_EXISTS \u003d new FileException("},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, that filepath already has an existing file.\\n\""},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"                    + \"Would you like to load that file, or create a file in a different filepath?\");"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when an I/O error occurs while trying to write to a file at the"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"     * specified filepath."},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    public static final FileException FILE_NO_ACCESS \u003d new FileException("},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, I cannot seem to access the file\");"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when the user commands Duke to load/create a file but does not specify the filepath."},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    public static final FileException INVALID_FILE_SPECIFICATION \u003d new FileException("},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, please follow this format to specify the file and its type:\\n\""},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"                    + \"    [CREATE/LOAD] [TASK/FINANCE] [filepath]\");"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when the user tries to load/create another file when there is already a file"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"     * currently loaded."},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"    public static final FileException FILE_ALREADY_LOADED \u003d new FileException("},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"            \"There is currently a file that is already loaded.\\n\""},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"                    + \"If you would like to load/create a new file, \""},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"                    + \"please UNLOAD the current file first.\");"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when the user tries to perform some operations without loading a file first."},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"    public static final FileException FILE_NOT_LOADED \u003d new FileException("},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, no files has been loaded yet. You need to either CREATE or LOAD a file first.\");"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when the user tries to perform operations that are incompatible with the"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"     * type of the file that is currently loaded."},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"    public static final FileException WRONG_FILE_TYPE \u003d new FileException("},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, the current file is of the wrong file type (task/finance). Please UNLOAD the\""},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"                    + \"current file and then CREATE or LOAD another file of the desired file type.\");"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"    /** Constructs a new FileException. For instantiating static members only. */"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"    private FileException(String message) {"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"        super(message);"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":70}},{"path":"src/main/java/duke/command/FinanceCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import duke.financial.Category;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"import duke.financial.FinanceList;"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":" * A command dealing with tasks related to managing a finance-list."},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"public class FinanceCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    /** The type of the FinanceCommand. */"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    private CommandType commandType;"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    /** The name of the category involved. */"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    private String categoryName;"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    /** The new name for a category. */"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    private String newName;"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    /** The amount to be added or subtracted from a category. */"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    private double amount;"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new FinanceCommand with a specified amount."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the FinanceCommand."},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"     * @param categoryName The name of the category involved."},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"     * @param amount The amount to be added or subtracted from the category involved."},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    public FinanceCommand(CommandType commandType, String categoryName, double amount) {"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"        this.categoryName \u003d categoryName;"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"        this.amount \u003d amount;"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new FinanceCommand with zero to two category names."},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the FinanceCommand."},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"     * @param names The variable arguments used by the command."},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"    public FinanceCommand(CommandType commandType, String... names) {"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"        assert names.length \u003e 0;"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"        categoryName \u003d names[0];"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"        if (commandType.equals(CommandType.RENAME)) {"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"            assert names.length \u003d\u003d 2;"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"            newName \u003d names[1];"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    public void execute(Ui ui, Storage storage) throws DukeException {"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"        FinanceList finances \u003d storage.getFinances();"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"        switch (commandType) {"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"        case NEW:"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"            Category category \u003d new Category(categoryName);"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"            finances.addEntry(category);"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"            storage.addLine(category.toString());"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"            ui.showAddedCategory(category.toString());"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"        case REMOVE:"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"            int index \u003d finances.indexOf(categoryName);"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"            category \u003d finances.removeCategory(categoryName);"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"            storage.deleteLine(index + 1);"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"            ui.showRemovedCategory(category.toString());"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"        case ADD:"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"            index \u003d finances.indexOf(categoryName);"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"            category \u003d finances.addToCategory(categoryName, amount);"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"            storage.replaceLine(index + 1, category.toString());"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"            ui.showChangedAmount(categoryName, category.getPreviousAmount(), category.getTotalAmount());"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"        case REDUCE:"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"            index \u003d finances.indexOf(categoryName);"},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"            category \u003d finances.reduceFromCategory(categoryName, amount);"},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"            storage.replaceLine(index + 1, category.toString());"},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":"            ui.showChangedAmount(categoryName, category.getPreviousAmount(), category.getTotalAmount());"},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"        case RENAME:"},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":"            index \u003d finances.indexOf(categoryName);"},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":"            category \u003d finances.renameCategory(categoryName, newName);"},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":"            storage.replaceLine(index + 1, category.toString());"},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":"            ui.showRenamedCategory(categoryName, newName);"},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_COMMAND;"},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":"    public boolean isExit() {"},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":"        return false;"},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":94}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeList;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":" * A command dealing with listing entries from the Duke-list."},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    /** The type of the ListCommand. */"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    private CommandType commandType;"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new ListCommand object of the specified CommandType."},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the ListCommand."},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    public ListCommand(CommandType commandType) {"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public void execute(Ui ui, Storage storage) throws FileException {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        DukeList\u003c?\u003e entries;"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"        if (commandType.equals(CommandType.LIST)) {"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"            entries \u003d storage.getTasks();"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"            entries \u003d storage.getFinances();"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"        String[] lines \u003d entries.getEntries();"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"        if (lines.length \u003e 0) {"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"            ui.listNumberedEntries(lines);"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"            ui.setNoEntriesMessage();"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"    public boolean isExit() {"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"        return false;"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"        return commandType.toString();"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"}"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":""}],"authorContributionMap":{"lebencwb":50}},{"path":"src/main/java/duke/command/QueryCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":" * A command dealing with search queries on the tasks in the task-list."},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"public class QueryCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    /** The type of the QueryCommand. */"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    private CommandType commandType;"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    /** The keyword to be used for searching. */"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    private String searchQuery;"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new QueryCommand of the specified CommandType containing the keyword for searching."},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     * @param commandType The type of the QueryCommand."},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * @param searchQuery The keyword to be used for searching."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public QueryCommand(CommandType commandType, String searchQuery) {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"        this.searchQuery \u003d searchQuery;"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    public void execute(Ui ui, Storage storage) throws FileException {"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"        TaskList tasks \u003d storage.getTasks();"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"        String[] lines \u003d tasks.getEntries();"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"        ArrayList\u003cString\u003e finds \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"        for (String line : lines) {"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"            if (line.toLowerCase().contains(searchQuery)) {"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"                finds.add(line);"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"        if (!finds.isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"            ui.listNumberedFoundTasks(finds.toArray(new String[1]));"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"            ui.setNoFoundTasksMessage(searchQuery);"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    public boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"        return false;"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"        return commandType.toString();"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":57}},{"path":"src/main/java/duke/command/UserInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":" * A class of exceptions arising from unaccepted user inputs."},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"public class UserInputException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user input is not recognized by the parser. */"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException INVALID_COMMAND \u003d new UserInputException("},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"            \"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user inputs an empty search query. */"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException EMPTY_QUERY \u003d new UserInputException("},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"            \"I\u0027m sorry, what was it you wanted me to find?\");"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     * An exception thrown when user inputs an empty or wrongly formatted task index."},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException INVALID_TASK_INDEX \u003d new UserInputException("},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, that is not a valid task.\");"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user inputs an empty task. */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException INVALID_TASK_DESCRIPTION \u003d new UserInputException("},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, the description of a task cannot be empty.\");"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user inputs a deadline with an incorrect format. */"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException INVALID_DEADLINE_FORMAT \u003d new UserInputException("},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, the description of a Deadline must be in this format:\\n\""},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"                    + \"    deadline [task name] /by [deadline]\");"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user inputs an event with an incorrect format. */"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException INVALID_EVENT_FORMAT \u003d new UserInputException("},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, the description of an Event must be in this format:\\n\""},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"                    + \"    event [task name] /at [time]\");"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user input is missing the category. */"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException EMPTY_CATEGORY \u003d new UserInputException("},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, you did not enter a category.\");"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user input on the amount is missing, negative or improperly formatted. */"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException INVALID_AMOUNT \u003d new UserInputException("},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, to add/reduce the amount you have to specify a positive double.\\n\""},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"                    + \"    e.g. ADD Meals 4.50\\n\""},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"                    + \"    or   REDUCE TRANSPORT 0.05.\");"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user tries to access a category that does not exist in the finance-list. */"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException NO_SUCH_CATEGORY \u003d new UserInputException("},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"            \"Sorry, that category does not exist yet.\");"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    /** An exception thrown when user tries to add an entry that already exist in the list. */"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"    public static final UserInputException DUPLICATE_ENTRY \u003d new UserInputException("},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"            \"That entry already exists in the list.\");"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"    /** Constructs a new UserInputException. */"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"    private UserInputException(String message) {"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"        super(message);"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":61}},{"path":"src/main/java/duke/financial/Category.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.financial;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.command.UserInputException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":" * A category for managing/tracking finances."},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"public class Category {"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"    /** The name of the category. */"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    private String name;"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    /** The total amount of money in the category. */"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    private double totalAmount;"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    /** The previous amount of money in the category. */"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    private double previousAmount;"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new category object with total amount starting at 0."},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     * @param name The name to be used for identifying the category."},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"    public Category(String name) {"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"        this.name \u003d name;"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"        totalAmount \u003d 0;"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"        previousAmount \u003d 0;"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"     * Adds a specified non-negative amount to the current total."},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"     * @param amount The amount to be added to the total."},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If the amount specified is negative."},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    public void addAmount(double amount) throws UserInputException {"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"        if (amount \u003c 0) {"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_AMOUNT;"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"        update();"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"        totalAmount +\u003d amount;"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"     * Subtracts a specified non-negative amount from the current total."},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"     * If the total were to go negative, sets it to 0 instead."},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"     * @param amount The amount to be subtracted from the total."},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If the amount specified is negative."},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    public void reduceAmount(double amount) throws UserInputException {"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"        if (amount \u003c 0) {"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_AMOUNT;"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"        update();"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"        if (amount \u003e totalAmount) {"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"            totalAmount \u003d 0;"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"            return;"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"        totalAmount -\u003d amount;"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"     * Renames the category with a new specified name."},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"     * @param newName The new name for the category."},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"    public void rename(String newName) {"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"        name \u003d newName;"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"    /** Updates the previous amount to be the total amount. (For tracking purposes.)*/"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"    private void update() {"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"        previousAmount \u003d totalAmount;"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"     * Gets the previous amount in the category."},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":"     * @return The previous amount in the category."},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":"    public double getPreviousAmount() {"},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":"        return previousAmount;"},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":"     * Gets the current total amount in the category."},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":"     * @return The current amount in the category."},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":"    public double getTotalAmount() {"},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":"        return totalAmount;"},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":"    public boolean equals(Object o) {"},{"lineNumber":95,"author":{"gitId":"lebencwb"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":96,"author":{"gitId":"lebencwb"},"content":"            return true;"},{"lineNumber":97,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":99,"author":{"gitId":"lebencwb"},"content":"        if (!(o instanceof Category)) {"},{"lineNumber":100,"author":{"gitId":"lebencwb"},"content":"            return false;"},{"lineNumber":101,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":103,"author":{"gitId":"lebencwb"},"content":"        Category c \u003d (Category) o;"},{"lineNumber":104,"author":{"gitId":"lebencwb"},"content":"        return name.equalsIgnoreCase(c.name);"},{"lineNumber":105,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":107,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":109,"author":{"gitId":"lebencwb"},"content":"        return String.format(\"%-15s:    %.02f\", name, totalAmount);"},{"lineNumber":110,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":111}},{"path":"src/main/java/duke/financial/FinanceList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.financial;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeList;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.command.UserInputException;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":" * A finance-list for storing or tracking changes in amount within categories."},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"public class FinanceList extends DukeList\u003cCategory\u003e {"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new finance-list with no categories."},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    public FinanceList() {}"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"     * Adds a specified amount to the total in a given category in the finance-list."},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     * @param name The name corresponding to the category."},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     * @param amount The amount to be added to the category."},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     * @return The category after it has been updated."},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If there is no matching category in the finance-list, or if"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * the amount specified is negative."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public Category addToCategory(String name, double amount) throws UserInputException {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        Category category \u003d getCategory(name);"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"        category.addAmount(amount);"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"        return category;"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"     * Subtracts a specified amount from the total in a given category in the finance-list."},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"     * @param name The name corresponding to the category."},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"     * @param amount The amount to be subtracted from the category."},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"     * @return The category after it has been updated."},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If there is no matching category in the finance-list, or if"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"     * the amount specified is negative."},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"    public Category reduceFromCategory(String name, double amount) throws UserInputException {"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"        Category category \u003d getCategory(name);"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"        category.reduceAmount(amount);"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"        return category;"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"     * Renames a given category in the finance-list to a new name."},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"     * @param name The name corresponding to the category."},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"     * @param newName The new name to be given to the category."},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"     * @return The category after it has been renamed."},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If there is no matching category in the finance-list."},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"    public Category renameCategory(String name, String newName) throws UserInputException {"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"        Category category \u003d getCategory(name);"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"        category.rename(newName);"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"        return category;"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"     * Gets the category corresponding to the specified name, if it exists within the finance-list."},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"     * @param name The name corresponding to the category."},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"     * @return The category from the finance-list identified by the specified name."},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If there is no matching category in the finance-list."},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"    public Category getCategory(String name) throws UserInputException {"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"        int index \u003d indexOf(name);"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"        return entries.get(index);"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"     * Gets the index of the category within the finance-list (index starts from 0)."},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"     * @param name The name corresponding to the category."},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"     * @return The index of the category."},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If there is no matching category in the finance-list."},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"    public int indexOf(String name) throws UserInputException {"},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":"        Category category \u003d new Category(name);"},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":"        int index \u003d entries.indexOf(category);"},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":"        if (index \u003c 0) {"},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.NO_SUCH_CATEGORY;"},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":"        return index;"},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":"     * Removes and returns the category from the finance-list."},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":"     * @param name The name corresponding to the category."},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":"     * @return The removed category."},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"     * @throws UserInputException If there is no matching category in the finance-list."},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"lebencwb"},"content":"    public Category removeCategory(String name) throws UserInputException {"},{"lineNumber":96,"author":{"gitId":"lebencwb"},"content":"        int index \u003d indexOf(name);"},{"lineNumber":97,"author":{"gitId":"lebencwb"},"content":"        return entries.remove(index);"},{"lineNumber":98,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":100,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitId":"lebencwb"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":103,"author":{"gitId":"lebencwb"},"content":"        boolean isFirst \u003d true;"},{"lineNumber":104,"author":{"gitId":"lebencwb"},"content":"        for (Category c : entries) {"},{"lineNumber":105,"author":{"gitId":"lebencwb"},"content":"            if (isFirst) {"},{"lineNumber":106,"author":{"gitId":"lebencwb"},"content":"                isFirst \u003d false;"},{"lineNumber":107,"author":{"gitId":"lebencwb"},"content":"            } else {"},{"lineNumber":108,"author":{"gitId":"lebencwb"},"content":"                stringBuilder.append(\"\\n\");"},{"lineNumber":109,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"lebencwb"},"content":"            stringBuilder.append(c.toString());"},{"lineNumber":111,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"lebencwb"},"content":"        return stringBuilder.toString();"},{"lineNumber":113,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":114}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":" * An extension of the Task class with an additional field specifying the deadline of the task."},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    /** The deadline of the task. */"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    protected String by;"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    /** The deadline of the task parsed as a LocalDate. */"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    protected LocalDateTime deadline;"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new Deadline object."},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     * @param description {@inheritDoc}"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     * @param by The deadline of the task"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"        this.by \u003d by;"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"            deadline \u003d LocalDateTime.parse(by).truncatedTo(ChronoUnit.MINUTES);"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"            try {"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"                deadline \u003d LocalDate.parse(by).atTime(23, 59);"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"            } catch (DateTimeParseException e1) {"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"                // Do nothing, since there is no deterministic way to convert all possible"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"                // strings into a LocalDateTime object meaningfully without adding more"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"                // prohibitions to the user input."},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"     * Converts the deadline to the format \"%B %d %Y HH:MM\", such as JANUARY 1 2000 12:34, if available."},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"     * @return The deadline in the desired format if parsable; the original string otherwise."},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"    public String getBy() {"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"        if (deadline \u003d\u003d null) {"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"            return by;"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"        return String.format(\"%s %02d %d %02d:%02d\","},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"                deadline.getMonth().toString(),"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"                deadline.getDayOfMonth(),"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"                deadline.getYear(),"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"                deadline.getHour(),"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"                deadline.getMinute());"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getBy() + \")\";"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"    public String getType() {"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"        return \"D\";"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"    public String toFileString() {"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"        int stat \u003d 0;"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"        if (isDone) {"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"            stat \u003d 1;"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"        return String.format(\"%s | %d | %s by %s\", getType(), stat, description, getBy());"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":74}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":" * An extension of the Task class with an additional field specifying when the event"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":" * is to happen."},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    /** The date/time of the task or event. */"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    protected String at;"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    /** The date of the task or event parsed as a LocalDate. */"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    protected LocalDateTime eventTime;"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new Event object."},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     * @param description {@inheritDoc}"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * @param at The date/time of the task or event."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public Event(String description, String at) {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"        this.at \u003d at;"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"            eventTime \u003d LocalDateTime.parse(at).truncatedTo(ChronoUnit.MINUTES);"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"            try {"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"                eventTime \u003d LocalDate.parse(at).atTime(0, 1);"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"            } catch (DateTimeParseException e1) {"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"                // Do nothing, since there is no deterministic way to convert all possible"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"                // strings into a LocalDateTime object meaningfully without adding more"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"                // prohibitions to the user input."},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"     * Converts the event time to the format \"%B %d %Y HH:MM\", such as JANUARY 1 2000 12:34, if available."},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"     * @return The event time in the desired format if parsable; the original string otherwise."},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"    public String getAt() {"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"        if (eventTime \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"            return at;"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"        return String.format(\"%s %02d %d %02d:%02d\","},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"                eventTime.getMonth().toString(),"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"                eventTime.getDayOfMonth(),"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"                eventTime.getYear(),"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"                eventTime.getHour(),"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"                eventTime.getMinute());"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getAt() + \")\";"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"    public String getType() {"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"        return \"E\";"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"    public String toFileString() {"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"        int stat \u003d 0;"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"        if (isDone) {"},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"            stat \u003d 1;"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"        return String.format(\"%s | %d | %s at %s\", getType(), stat, description, getAt());"},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":76}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":" * A generic task that contains a description and can be either done or not done."},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"    /** Symbols used to indicate whether the task is done or not. */"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"    private static final String SYMBOL_TICK \u003d \"\\u2713\";"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    private static final String SYMBOL_CROSS \u003d \"\\u2718\";"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    /** A description of the task. */"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    protected String description;"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    /** A boolean indicating whether the task is done or not. */"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    protected boolean isDone;"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     * Constructs a generic task with a description and defaults to be not done."},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     * (For invocation by subclass constructors.)"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     * @param description The task description"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    protected Task(String description) {"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        this.isDone \u003d false;"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    /** Marks the task as done. */"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    public void markAsDone() {"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"        isDone \u003d true;"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"     * Gets the icon symbolizing whether the task is done or not done."},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"     * @return A symbol as a String"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"    public String getStatusIcon() {"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"        if (isDone) {"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"            return SYMBOL_TICK;"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"            return SYMBOL_CROSS;"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"     * Gets the type of the task represented by a unique identifier."},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"     * @return The type of the task as its unique identifier"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    public abstract String getType();"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"     * Returns the String representation of the task customized for being written to a file."},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"     * @return The task as a string formatted for being written to the file"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"    public String toFileString() {"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"        int stat \u003d 0;"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"        if (isDone) {"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"            stat \u003d 1;"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"        return String.format(\"%s | %d | %s\", getType(), stat, description);"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":71}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"import duke.DukeList;"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import duke.command.UserInputException;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":" * A task-list maintaining the state of the tasks."},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"public class TaskList extends DukeList\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new TaskList object with an empty task-list."},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    public TaskList() {}"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"     * Marks the task at the specified index of the task-list as done."},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"     * @param index The index specifying the position in the task-list to mark the task as done (starts at 1)."},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"     * @return The task that has been marked as done."},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the index is out of bounds, either less than 1 or bigger than the size of"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"     * the task-list."},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public Task markTaskAsDone(int index) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"            Task task \u003d entries.get(index - 1);"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"            task.markAsDone();"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"            return task;"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_TASK_INDEX;"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"     * Deletes the entry at the specified index of the task-list."},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"     * @param index The index specifying the position in the task-list to delete the entry (starts at 1)."},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"     * @return The deleted entry."},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"     * @throws DukeException If the index is out of bounds (either less than 1 or bigger than the size of"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"     * the task-list."},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"    public Task deleteTask(int index) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"            return entries.remove(index - 1);"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"            throw UserInputException.INVALID_TASK_INDEX;"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":51}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":" * An extension of the Task class of the type ToDo."},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"     * Constructs a new ToDo object."},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"     * @param description {@inheritDoc}"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"    public String getType() {"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"        return \"T\";"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":26}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.geometry.Rectangle2D?\u003e"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.effect.Shadow?\u003e"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.paint.RadialGradient?\u003e"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.paint.Stop?\u003e"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.shape.Rectangle?\u003e"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    \u003cchildren\u003e"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"      \u003cStackPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"400.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"         \u003cchildren\u003e"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"              \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" ellipsisString\u003d\"\" graphicTextGap\u003d\"0.0\" opacity\u003d\"0.8\" style\u003d\"-fx-background-color: #33adff; -fx-font-family: monospace; -fx-background-radius: 10;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"               \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"               \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"               \u003cfont\u003e"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"                  \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"11.5\" /\u003e"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"               \u003c/font\u003e"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"            \u003c/Label\u003e"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"         \u003c/children\u003e"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"      \u003c/StackPane\u003e"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"      \u003cStackPane\u003e"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"         \u003cchildren\u003e"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"            \u003cRectangle arcHeight\u003d\"20.0\" arcWidth\u003d\"20.0\" height\u003d\"110.0\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" width\u003d\"110.0\"\u003e"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"               \u003cfill\u003e"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"                  \u003cRadialGradient centerX\u003d\"0.5\" centerY\u003d\"0.5\" radius\u003d\"0.6976744186046512\"\u003e"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"                     \u003cstops\u003e"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"                        \u003cStop color\u003d\"#4f4f5900\" /\u003e"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"                        \u003cStop color\u003d\"AQUA\" offset\u003d\"1.0\" /\u003e"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"                     \u003c/stops\u003e"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"                  \u003c/RadialGradient\u003e"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"               \u003c/fill\u003e"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"                \u003ceffect\u003e"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"                    \u003cShadow color\u003d\"AQUA\" /\u003e"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"                \u003c/effect\u003e"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"            \u003c/Rectangle\u003e"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"              \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"               \u003cviewport\u003e"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"                  \u003cRectangle2D /\u003e"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"               \u003c/viewport\u003e"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"            \u003c/ImageView\u003e"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"         \u003c/children\u003e"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"      \u003c/StackPane\u003e"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"    \u003c/children\u003e"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"    \u003cpadding\u003e"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"    \u003c/padding\u003e"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"lebencwb":58}},{"path":"src/main/resources/view/DialogBox2.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.geometry.Rectangle2D?\u003e"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.effect.Shadow?\u003e"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.paint.RadialGradient?\u003e"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.paint.Stop?\u003e"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.shape.Rectangle?\u003e"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"    \u003cchildren\u003e"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"      \u003cStackPane\u003e"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"         \u003cchildren\u003e"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"            \u003cRectangle arcHeight\u003d\"20.0\" arcWidth\u003d\"20.0\" height\u003d\"110.0\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" width\u003d\"110.0\"\u003e"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"               \u003ceffect\u003e"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"                  \u003cShadow color\u003d\"#ffb31a\" /\u003e"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"               \u003c/effect\u003e"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":"               \u003cfill\u003e"},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"                  \u003cRadialGradient centerX\u003d\"0.5\" centerY\u003d\"0.5\" radius\u003d\"0.6976744186046512\"\u003e"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"                     \u003cstops\u003e"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"                        \u003cStop color\u003d\"#ff6a0000\" /\u003e"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"                        \u003cStop color\u003d\"#ffc51cbf\" offset\u003d\"0.3557293518189358\" /\u003e"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":"                        \u003cStop color\u003d\"#ffb31a\" offset\u003d\"1.0\" /\u003e"},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"                     \u003c/stops\u003e"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"                  \u003c/RadialGradient\u003e"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"               \u003c/fill\u003e"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"            \u003c/Rectangle\u003e"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":"              \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"               \u003cviewport\u003e"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"                  \u003cRectangle2D /\u003e"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"               \u003c/viewport\u003e"},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"            \u003c/ImageView\u003e"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"         \u003c/children\u003e"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"      \u003c/StackPane\u003e"},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"      \u003cStackPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"400.0\"\u003e"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"         \u003cchildren\u003e"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":"              \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" ellipsisString\u003d\"\" graphicTextGap\u003d\"0.0\" opacity\u003d\"0.8\" style\u003d\"-fx-background-color: #ff8800; -fx-background-radius: 10;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"               \u003cpadding\u003e"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"               \u003c/padding\u003e"},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"               \u003cfont\u003e"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"                  \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"11.5\" /\u003e"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":"               \u003c/font\u003e"},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"            \u003c/Label\u003e"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"         \u003c/children\u003e"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"      \u003c/StackPane\u003e"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"    \u003c/children\u003e"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"    \u003cpadding\u003e"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"    \u003c/padding\u003e"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"lebencwb":59}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #2b3a46; -fx-border-color: #2b3a46;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter text here\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"540.0\" style\u003d\"-fx-background: #2b3a46; -fx-border-color: #2b3a46;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"lebencwb":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"public class ParserTest {"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"    public void parse_bye_bye() throws Exception {"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"BYE\", Parser.parse(\"bye\").toString());"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":14,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"lebencwb"},"content":"    public void parse_list_list() throws Exception {"},{"lineNumber":16,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"LIST\", Parser.parse(\"list\").toString());"},{"lineNumber":17,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"lebencwb"},"content":"    public void parse_done1_done1() throws Exception {"},{"lineNumber":21,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"DONE 1\", Parser.parse(\"done 1\").toString());"},{"lineNumber":22,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":24,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"lebencwb"},"content":"    public void parse_delete2_delete2() throws Exception {"},{"lineNumber":26,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"DELETE 2\", Parser.parse(\"delete 2\").toString());"},{"lineNumber":27,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":29,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"lebencwb"},"content":"    public void parse_todo_todo() throws Exception {"},{"lineNumber":31,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"TODO [read book]\", Parser.parse(\"todo read book\").toString());"},{"lineNumber":32,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":34,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"lebencwb"},"content":"    public void parse_deadline_deadline() throws Exception {"},{"lineNumber":36,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"DEADLINE [return book, 6th June 2020]\","},{"lineNumber":37,"author":{"gitId":"lebencwb"},"content":"                Parser.parse(\"deadline return book /by 6th June 2020\").toString());"},{"lineNumber":38,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":40,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"lebencwb"},"content":"    public void parse_event_event() throws Exception {"},{"lineNumber":42,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"EVENT [meeting, time]\","},{"lineNumber":43,"author":{"gitId":"lebencwb"},"content":"                Parser.parse(\"event meeting /at time\").toString());"},{"lineNumber":44,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":46,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"lebencwb"},"content":"    public void parse_caseInsensitive_success() throws Exception {"},{"lineNumber":48,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"DEADLINE [case, insensitive]\","},{"lineNumber":49,"author":{"gitId":"lebencwb"},"content":"                Parser.parse(\"dEaDlInE case /by insensitive\").toString());"},{"lineNumber":50,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":52,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"lebencwb"},"content":"    public void parse_doneBadInteger_exceptionThrown() {"},{"lineNumber":54,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"DONE 3\", Parser.parse(\"done three\").toString());"},{"lineNumber":56,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":57,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":58,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, that is not a valid task.\", e.getMessage());"},{"lineNumber":59,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":62,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"lebencwb"},"content":"    public void parse_deleteNoNextScannerToken_exceptionThrown() {"},{"lineNumber":64,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"DELETE\", Parser.parse(\"delete\").toString());"},{"lineNumber":66,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":67,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":68,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, that is not a valid task.\", e.getMessage());"},{"lineNumber":69,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":72,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"lebencwb"},"content":"    public void parse_todoNoNextScannerToken_exceptionThrown() {"},{"lineNumber":74,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"TODO\", Parser.parse(\"todo\").toString());"},{"lineNumber":76,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":77,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":78,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, the description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":79,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":82,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"lebencwb"},"content":"    public void parse_deadlineNoNextScannerToken_exceptionThrown() {"},{"lineNumber":84,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"DEADLINE\", Parser.parse(\"deadline\").toString());"},{"lineNumber":86,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":87,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":88,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, the description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":89,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":92,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"lebencwb"},"content":"    public void parse_deadlineNoBySubstring_exceptionThrown() {"},{"lineNumber":94,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"DEADLINE [do this, tonight]\","},{"lineNumber":96,"author":{"gitId":"lebencwb"},"content":"                    Parser.parse(\"deadline do this tonight\").toString());"},{"lineNumber":97,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":98,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":99,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, the description of a Deadline must be in this format:\\n\" +"},{"lineNumber":100,"author":{"gitId":"lebencwb"},"content":"                    \"\\tdeadline [task name] /by [deadline]\", e.getMessage());"},{"lineNumber":101,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":104,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"lebencwb"},"content":"    public void parse_deadlineWrongBySubstring_exceptionThrown() {"},{"lineNumber":106,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"DEADLINE [do this, tonight]\","},{"lineNumber":108,"author":{"gitId":"lebencwb"},"content":"                    Parser.parse(\"deadline do this by tonight\").toString());"},{"lineNumber":109,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":110,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":111,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, the description of a Deadline must be in this format:\\n\" +"},{"lineNumber":112,"author":{"gitId":"lebencwb"},"content":"                    \"\\tdeadline [task name] /by [deadline]\", e.getMessage());"},{"lineNumber":113,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":116,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"lebencwb"},"content":"    public void parse_deadlineFakeBySubstring_success() throws Exception {"},{"lineNumber":118,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"DEADLINE [swing by Mom\u0027s, tomorrow]\","},{"lineNumber":119,"author":{"gitId":"lebencwb"},"content":"                Parser.parse(\"deadline swing by Mom\u0027s /by tomorrow\").toString());"},{"lineNumber":120,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":122,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"lebencwb"},"content":"    public void parse_eventNoNextScannerToken_exceptionThrown() {"},{"lineNumber":124,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":125,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"EVENT\", Parser.parse(\"event\").toString());"},{"lineNumber":126,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":127,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":128,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, the description of a task cannot be empty.\", e.getMessage());"},{"lineNumber":129,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":132,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"lebencwb"},"content":"    public void parse_eventNoAtSubstring_exceptionThrown() {"},{"lineNumber":134,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":135,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"EVENT [do this, 6pm]\","},{"lineNumber":136,"author":{"gitId":"lebencwb"},"content":"                    Parser.parse(\"event do this 6pm\").toString());"},{"lineNumber":137,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":138,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":139,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, the description of an Event must be in this format:\\n\" +"},{"lineNumber":140,"author":{"gitId":"lebencwb"},"content":"                    \"\\tevent [task name] /at [time]\", e.getMessage());"},{"lineNumber":141,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":144,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"lebencwb"},"content":"    public void parse_eventWrongAtSubstring_exceptionThrown() {"},{"lineNumber":146,"author":{"gitId":"lebencwb"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"EVENT [do this, 6pm]\","},{"lineNumber":148,"author":{"gitId":"lebencwb"},"content":"                    Parser.parse(\"event do this at 6pm\").toString());"},{"lineNumber":149,"author":{"gitId":"lebencwb"},"content":"            fail();"},{"lineNumber":150,"author":{"gitId":"lebencwb"},"content":"        } catch (Exception e) {"},{"lineNumber":151,"author":{"gitId":"lebencwb"},"content":"            assertEquals(\"Sorry, the description of an Event must be in this format:\\n\" +"},{"lineNumber":152,"author":{"gitId":"lebencwb"},"content":"                    \"\\tevent [task name] /at [time]\", e.getMessage());"},{"lineNumber":153,"author":{"gitId":"lebencwb"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"lebencwb"},"content":""},{"lineNumber":156,"author":{"gitId":"lebencwb"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"lebencwb"},"content":"    public void parse_eventFakeAtSubstring_success() throws Exception {"},{"lineNumber":158,"author":{"gitId":"lebencwb"},"content":"        assertEquals(\"EVENT [stay at home, all times]\","},{"lineNumber":159,"author":{"gitId":"lebencwb"},"content":"                Parser.parse(\"event stay at home /at all times\").toString());"},{"lineNumber":160,"author":{"gitId":"lebencwb"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"lebencwb"},"content":"}"}],"authorContributionMap":{"lebencwb":161}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lebencwb"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"lebencwb"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"lebencwb"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"lebencwb"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"lebencwb"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":6,"author":{"gitId":"lebencwb"},"content":"todo join sports club"},{"lineNumber":7,"author":{"gitId":"lebencwb"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"todo borrow book"},{"lineNumber":9,"author":{"gitId":"lebencwb"},"content":"list"},{"lineNumber":10,"author":{"gitId":"lebencwb"},"content":"delete 3"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"find book"},{"lineNumber":12,"author":{"gitId":"lebencwb"},"content":"bye"}],"authorContributionMap":{"lebencwb":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"lebencwb"},"content":"rmdir /s /q data"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"lebencwb"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"lebencwb"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"lebencwb":3}}]
