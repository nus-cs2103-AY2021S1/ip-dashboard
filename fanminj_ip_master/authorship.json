[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "D|0|return book|Jun 06 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "E|0|project meeting|Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "T|1|join sports club"
      }
    ],
    "authorContributionMap": {
      "fanminj": 4
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String arguments;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected final static String ADD_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected final static String DELETE_MESSAGE \u003d \"Noted. I\u0027ve removed this task: \\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Command(String arguments) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        throw new DukeException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 20
    }
  },
  {
    "path": "src/main/java/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final String responseToUser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    CommandResult(String responseToUser) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.responseToUser \u003d responseToUser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 7
    }
  },
  {
    "path": "src/main/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void testCommandExecution() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String expected \u003d new CommandResult(\"Bye. Hope to see you again soon!\").responseToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String actual \u003d new ExitCommand(\"bye\").execute(new TaskList(), new Storage()).responseToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void unknownCommand_executeUnknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            new Command(\"test\").execute(new TaskList(), new Storage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \"This method is to be implemented by child classes\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                e.getMessage()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 24
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    static final String TYPE \u003d \"deadline\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Deadline(String description, String by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(description, TYPE);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 19
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final static String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DeadlineCommand(String arguments) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private static String formatDate(String date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        DateTimeFormatter pattern \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return localDate.format(pattern);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] s \u003d this.arguments.split(\" /by \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String desc \u003d s[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String by \u003d formatDate(s[1]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d this.ADD_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 33
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final static String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DeleteCommand(String arguments) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d Integer.parseInt(arguments) - 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d tasks.removeTask(index);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d this.DELETE_MESSAGE + task.toString() + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 22
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final static String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DoneCommand(String arguments) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int index \u003d Integer.parseInt(arguments) - 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d task.markAsDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 20
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.tasks \u003d storage.loadFile();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            String fullCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                Command command \u003d Parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                CommandResult commandResult \u003d command.execute(this.tasks, this.storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                this.ui.showResponse(commandResult);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                if (command.isExit()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 39,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    static final String TYPE \u003d \"event\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Event(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(description, TYPE);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 20
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final static String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    EventCommand(String arguments) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] s \u003d this.arguments.split(\" /at \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String desc \u003d s[0];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String at \u003d s[1];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d new Event(desc, at);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d this.ADD_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 24
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final static String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ExitCommand(String arguments) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 14
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final static String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ListCommand(String arguments) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d tasks.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 13
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public static Command parseCommand(String userInput)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        throws DukeException{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String[] input \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String commandWord \u003d input[0];"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String arguments \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        HashSet\u003cString\u003e commandsWithArgs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(DeadlineCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(DoneCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(EventCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        commandsWithArgs.add(ToDoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (commandsWithArgs.contains(commandWord)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            if (input.length \u003e 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                arguments \u003d input[1];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String message \u003d String.format(\"OOPS! \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        + \"The description of a %s cannot be empty.\", commandWord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DeadlineCommand(arguments);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DeleteCommand(arguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new DoneCommand(arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new EventCommand(arguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ExitCommand(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ListCommand(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        case ToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return new ToDoCommand(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DukeException(\"OOPS! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 46
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected final static String SRC \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected final static Path PATH \u003d Paths.get(SRC, \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected boolean hasDirectory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Storage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.hasDirectory \u003d Files.exists(PATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean hasDir() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.hasDirectory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (this.hasDirectory) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                FileWriter fw \u003d new FileWriter(this.PATH.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String newText \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                for (Task t : tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    char type \u003d t.getType().toUpperCase().charAt(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    if (type \u003d\u003d \u0027T\u0027 || type \u003d\u003d \u0027D\u0027 || type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        int doneStatus \u003d t.getDoneStatus() ? 1 : 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        String description \u003d t.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        String timing \u003d t.getTiming();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        newText +\u003d String.format(\"%c|%d|%s\", type, doneStatus, description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        if (timing.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                            newText +\u003d \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                            newText +\u003d String.format(\"|%s%n\", timing);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fw.write(newText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            throw new DukeException(\"duke.txt not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    private TaskList loadTasks(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String data \u003d sc.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String[] arr \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String task \u003d arr[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String doneStatus \u003d arr[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                boolean isDone \u003d doneStatus.equals(\"1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String description \u003d arr[2];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                String timing \u003d arr.length \u003d\u003d 4 ? arr[3] : \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                switch (task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t \u003d new ToDo(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t \u003d new Event(description, timing);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t \u003d new Deadline(description, timing);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    throw new DukeException(\"OOPS!!! I\u0027m sorry, \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                        +\"but I don\u0027t recognise the command from the text file.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                tasks.addTask(t);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public TaskList loadFile() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        if (this.hasDirectory) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                return loadTasks(this.PATH.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                File file \u003d new File(this.PATH.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                this.hasDirectory \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                return new TaskList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 123
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    Task(String description, String type) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.format(\"%s%n  %s%n\", message, this.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 42
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks.remove(index);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String replyNumTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \"Now you have %d %s in the list.%n\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                getSize(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                getSize() \u003c\u003d 1 ? \"task\" : \"tasks\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        int size \u003d this.tasks.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String response \u003d size \u003c\u003d 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            ? \"Here is the task in your list:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            : \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            response +\u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                \"%d. %s%n\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                i + 1,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                this.tasks.get(i).toString()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 55
    }
  },
  {
    "path": "src/main/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void testMarkTaskAsDone() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String expected \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"  [D][✓] return book (by: tmr)\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String actual \u003d new Deadline(\"return book\", \"tmr\").markAsDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void testPrintingOfTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String expected \u003d \"[T][✘] read book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String actual \u003d new ToDo(\"read book\").toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 20
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    static final String TYPE \u003d \"todo\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(description, TYPE);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 12
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public final static String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    ToDoCommand(String arguments) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public CommandResult execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        Task task \u003d new ToDo(arguments);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d this.ADD_MESSAGE + \"  \" + task.toString()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"\\n\" + tasks.replyNumTasks();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 21
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "                + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void showExitMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        String message \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fanminj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    public void showResponse(CommandResult result) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fanminj"
        },
        "content": "        System.out.println(result.responseToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fanminj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fanminj": 16
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fanminj"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fanminj"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fanminj"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fanminj"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fanminj"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fanminj"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "fanminj": 6
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fanminj"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "fanminj": 1,
      "-": 37
    }
  }
]
