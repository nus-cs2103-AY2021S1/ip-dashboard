[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.Operation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.parser.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the main driver class of Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private CommandParser commandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void initialiseDuke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.ui.showStartMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskStorage \u003d TaskStorage.createTaskStorage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d this.taskStorage.loadTaskList(this.ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Drives the execution of \u003ccode\u003eDuke\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * It handles any exceptions thrown by printing them onto the User Interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void runDuke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        initialiseDuke();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.ui.showBlankLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String command \u003d this.ui.readUserInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.ui.showDivider();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Operation operation \u003d this.commandParser.parse(command, this.taskList, this.taskStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                String status \u003d operation.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                this.ui.showStatus(status);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                isExit \u003d operation.isExit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            } catch (DukeException exception) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                this.ui.showStatus(exception.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.ui.showDivider();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        duke.runDuke();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 53,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(\"Apologies. \" + msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 12
    }
  },
  {
    "path": "src/main/java/duke/operation/AddDeadlineOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the operation that adds Deadline objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AddDeadlineOperation extends AddOperation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param dateTime the datetime when the Deadline occurs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that Deadline is to be added into."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AddDeadlineOperation(String description, LocalDateTime dateTime, TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted Deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Deadline createTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Deadline.createDeadline(this.description, this.dateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/main/java/duke/operation/AddEventOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the operation that adds Event objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AddEventOperation extends AddOperation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the time when the Event occurs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that Event is to be added into."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AddEventOperation(String description, LocalDateTime time, TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated Event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted Event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Event createTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Event.createEvent(this.description, this.time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/main/java/duke/operation/AddOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Abstract class representing the operations that add various types of Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public abstract class AddOperation extends Operation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that Task is to be added into."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    AddOperation(String description, TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an ExitOperation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract Task createTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Adds the Task into the TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String specifying the Task that been added and the total number of Tasks in TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task newTask \u003d createTask();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList.addTask(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"I have added the task:\\n\" + newTask + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + String.format(\"You now have %d tasks.\", this.taskList.getCurrCapacity());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 49
    }
  },
  {
    "path": "src/main/java/duke/operation/AddTodoOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents operation that adds Todo objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AddTodoOperation extends AddOperation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Todo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that Todo is to be added into."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AddTodoOperation(String description, TaskList taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, taskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated Todo."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted Todo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Todo createTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Todo.createTodo(this.description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 28
    }
  },
  {
    "path": "src/main/java/duke/operation/DeleteOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that deletes a Task from the TaskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DeleteOperation extends Operation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList taskList the TaskList containing the Task that is to be removed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the associated index of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DeleteOperation(TaskList taskList, int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an ExitOperation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Removes the given Task from the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String indicating the task that has been removed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task removed \u003d this.taskList.removeTask(this.index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + removed + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + String.format(\"You now have %d tasks in the list\", this.taskList.getCurrCapacity());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 43
    }
  },
  {
    "path": "src/main/java/duke/operation/DoneOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that changes a specified Task into completed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DoneOperation extends Operation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList containing the Task that is to be changed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the associated index of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DoneOperation(TaskList taskList, int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an ExitOperation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the Done Operation by converting the specified Task into completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String indicating the Task has been completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task completed \u003d this.taskList.completeTask(this.index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"You have completed this task:\\n\" + completed;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 41
    }
  },
  {
    "path": "src/main/java/duke/operation/ExitOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that exits from Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ExitOperation extends Operation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskStorage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param storage the TaskStorage object that allows the taskList to be saved into a text file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that is to be saved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public ExitOperation(TaskStorage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is an Exit Operation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Saves the tasks in TaskList into a text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a goodbye message and an indication if the tasks cannot be saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String status \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.storage.saveToDisk(this.taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            status +\u003d \"The list of tasks cannot be saved.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return status + \"Goodbye. Hope to see you again soon.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 47
    }
  },
  {
    "path": "src/main/java/duke/operation/FindOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that finds Tasks in TaskList associated with a search word."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class FindOperation extends Operation {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String searchWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that is to be searched on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param searchWord the String that TaskList is to be search with."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public FindOperation(TaskList taskList, String searchWord) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.searchWord \u003d searchWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an ExitOperation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the Find Operation by retrieving all Tasks in TaskList containing the search word."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String containing all Tasks found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskList foundTasks \u003d this.taskList.findString(searchWord);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (foundTasks.getCurrCapacity() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return String.format(\"I have found no tasks that match: %s\", this.searchWord);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"Here are the tasks I have found:\\n\" + foundTasks.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 42
    }
  },
  {
    "path": "src/main/java/duke/operation/ListOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that lists all the Tasks in TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ListOperation extends Operation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that is to be printed on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public ListOperation(TaskList taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an ExitOperation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the List Operation by retrieving all Tasks in TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String containing all Tasks stored in TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"Here are your tasks:\\n\" + this.taskList.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 36
    }
  },
  {
    "path": "src/main/java/duke/operation/Operation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the series of operations that are to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public abstract class Operation {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks is the Operation is an ExitOperation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if the Operation is an Exit Operation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the series of operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String containing the status of the execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract String execute();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 18
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.Operation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddDeadlineOperation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddEventOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddTodoOperation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.DeleteOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.DoneOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.ExitOperation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.ListOperation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.FindOperation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Utils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The class that converts commands passed into Duke into Operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private ExitOperation createExitOp(TaskStorage storage, TaskList list) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new ExitOperation(storage, list);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private ListOperation createListOp(TaskList list) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new ListOperation(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private DoneOperation createDoneOp(String[] commands, TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.DONE.isLengthSmaller(commands.length)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure a number is passed after a done command\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (Utils.hasInteger(commands, 1)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure a number is passed after a done command.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int index \u003d Integer.parseInt(commands[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!list.isValidIndex(index)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"The index you have passed in cannot be found in the list of tasks.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new DoneOperation(list, index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private AddTodoOperation createTodoOp(String[] commands, TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.TODO.isLengthSmaller(commands.length)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure there is description for a todo item.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d Utils.concatenate(commands, 1, commands.length);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AddTodoOperation(description, list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private AddDeadlineOperation createDeadlineOp("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String[] commands, TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.DEADLINE.isLengthSmaller(commands.length)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure there is a description and a datetime for a deadline command.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int splitIndex \u003d Utils.getIndexOf(commands, Deadline.DEADLINE_BREAK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (splitIndex \u003d\u003d Utils.INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure an indication of \u0027/by\u0027 after a deadline command.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d Utils.concatenate(commands, 1, splitIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String datetime \u003d Utils.concatenate(commands, splitIndex + 1, commands.length);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Datetime.parseDateTimeString(datetime, Deadline.DATE_FORMAT_INPUT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AddDeadlineOperation(description, parsedDateTime, list);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private AddEventOperation createEventOp(String[] commands, TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.EVENT.isLengthSmaller(commands.length)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure there is a description and a time for an event command.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int splitIndex \u003d Utils.getIndexOf(commands, Event.EVENT_BREAK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (splitIndex \u003d\u003d Utils.INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure an indication of \u0027/at\u0027 after an event command.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d Utils.concatenate(commands, 1, splitIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String time \u003d Utils.concatenate(commands, splitIndex + 1, commands.length);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime parsedTime \u003d Datetime.parseTimeString(time, Event.TIME_FORMAT_INPUT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AddEventOperation(description, parsedTime, list);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private DeleteOperation createDeleteOp(String[] commands, TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.DELETE.isLengthSmaller(commands.length)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure a number is passed after a delete command.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (Utils.hasInteger(commands, 1)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure a number is passed after a delete command.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int index \u003d Integer.parseInt(commands[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!list.isValidIndex(index)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"The index you have passed in cannot be found in the list of tasks.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new DeleteOperation(list, index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private FindOperation createFindOp(String[] commands, TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.FIND.isLengthSmaller(commands.length)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"Ensure a keyword is entered so that I can perform a search with it.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String searchWord \u003d Utils.concatenate(commands, 1, commands.length);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new FindOperation(list, searchWord);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses the String given into an Operation object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param commandString the String that has been input by the user into Duke."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param list the TaskList to be operated on."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskStorage the TaskStorage object to be operated on, if the operation requires"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                    a save of the TaskList."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the parsed Operation object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeException if the command cannot be recognised or is erroneous."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Operation parse(String commandString, TaskList list, TaskStorage taskStorage)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] commands \u003d commandString.split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.BYE.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createExitOp(taskStorage, list);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (CommandType.LIST.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createListOp(list);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (CommandType.DONE.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDoneOp(commands, list);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (CommandType.TODO.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createTodoOp(commands, list);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (CommandType.DEADLINE.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDeadlineOp(commands, list);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (CommandType.EVENT.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createEventOp(commands, list);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (CommandType.DELETE.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDeleteOp(commands, list);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (CommandType.FIND.getCommand().equals(commands[0])) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createFindOp(commands, list);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"This command is not recognised unfortunately.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 139
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the various commands that Duke supports."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    BYE(\"bye\", 1),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    LIST(\"list\", 1),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    DONE(\"done\", 2),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    TODO(\"todo\", 2),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    DEADLINE(\"deadline\", 4),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    EVENT(\"event\", 4),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    DELETE(\"delete\", 2),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    FIND(\"find\", 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int commandLength;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param command the String of the actual command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param commandLength the minimum number of parameters needed for the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                      This includes the commandType."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    CommandType(String command, int commandLength) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.commandLength \u003d commandLength;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the command type."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String of the command type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the given length is smaller than the commandLength."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * If such, it also means that the command is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if the given length is greater than or equal to the commandLength."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isLengthSmaller(int length) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.commandLength \u003e length;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 46
    }
  },
  {
    "path": "src/main/java/duke/parser/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents an object that parses lines in a saved storage text file into actual Task objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * This object also parses Task objects into Strings that will be saved into the storage text file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String IS_COMPLETED \u003d \"1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String NOT_COMPLETED \u003d \"0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DELIMITER \u003d \";\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts a Task to a String that will be saved onto the Storage text file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param task the task that is to be converted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the String representing the Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String convertTaskToStorage(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String symbol \u003d task.getTaskSymbol();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String completed \u003d task.isTaskCompleted()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ? DELIMITER + IS_COMPLETED"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                : DELIMITER + NOT_COMPLETED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d DELIMITER + task.getTaskDescription();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String datetime \u003d task.getTaskDatetime().map(d -\u003e DELIMITER + d).orElse(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return symbol + completed + description + datetime + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Todo createTodo(String[] storageTask, String storageTaskString) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (storageTask.length \u003c 3) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears this todo: \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isCompleted \u003d storageTask[1].equals(IS_COMPLETED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Todo(storageTask[2], isCompleted);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Deadline createDeadline(String[] storageTask, String storageTaskString) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (storageTask.length \u003c 4) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears this deadline: \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(msg);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isCompleted \u003d storageTask[1].equals(IS_COMPLETED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime dateTime \u003d Datetime.parseDateTimeString(storageTask[3], Deadline.DATE_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Deadline(storageTask[2], isCompleted, dateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Event createEvent(String[] storageTask, String storageTaskString) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (storageTask.length \u003c 4) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears this event: \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(msg);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isCompleted \u003d storageTask[1].equals(IS_COMPLETED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime time \u003d Datetime.parseTimeString(storageTask[3], Event.TIME_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Event(storageTask[2], isCompleted, time);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts a String from the storage text file into its associated Task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param storageTaskString the String that is to be converted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the associated Task from the given String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeException if this does not recognise the format of the String being parsed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task convertStorageToTask(String storageTaskString) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] storageTask \u003d storageTaskString.split(DELIMITER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        switch(storageTask[0]) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case Todo.TODO_SYMBOL:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createTodo(storageTask, storageTaskString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case Deadline.DEADLINE_SYMBOL:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDeadline(storageTask, storageTaskString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case Event.EVENT_SYMBOL:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createEvent(storageTask, storageTaskString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String err \u003d String.format(\"It appears this line \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(err);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 85
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.parser.StorageParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Class that loads and converts the TaskList in Duke with a text file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final StorageParser storageParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"src/main/java/duke/storage/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DEFAULT_FILENAME \u003d \"taskstorage.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private TaskStorage(File file) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.storageParser \u003d new StorageParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a TaskStorage object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The path to the file used is pre determined by default."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * If the path directory does not exist, the file will then be saved into the root of the directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a preconfigured TaskStorage object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static TaskStorage createTaskStorage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        File f \u003d new File(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        File actualFile \u003d f.exists()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ? new File(DEFAULT_FILEPATH + DEFAULT_FILENAME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                : new File(DEFAULT_FILENAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new TaskStorage(actualFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Loads the TaskList from the text file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param ui the user interface object to print out any errors when reading in the text file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the initialised TaskList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public TaskList loadTaskList(Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            s \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (IOException ignore) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Task task \u003d this.storageParser.convertStorageToTask(s.nextLine());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                taskList.addTask(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            } catch (DukeException exception) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ui.showStatus(exception.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void writeToFile(String text) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.file.getAbsolutePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        fw.write(text);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Saves the TaskList into the text file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the TaskList that is to be saved."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeException if the text file cannot be written onto."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void saveToDisk(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String storageTask \u003d this.storageParser.convertTaskToStorage(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.append(storageTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            writeToFile(sb.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(\"There were some problems when writing to the file. \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    + exception.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 92
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents Deadline objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Inherits from the abstract Task class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Datetime datetime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DEADLINE_SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DATE_FORMAT_INPUT \u003d \"dd-MM-yyyy HHmm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DATE_FORMAT_OUTPUT \u003d \"MMM dd yyyy hh:mm a\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DEADLINE_BREAK \u003d \"/by\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted the completion status of the Deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the LocalDateTime the Deadline task is to be completed by."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Deadline(String description, boolean isCompleted, LocalDateTime datetime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.datetime \u003d new Datetime(datetime, DATE_FORMAT_INPUT, DATE_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a Deadline object that is not completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the LocalDateTime the Deadline task is to be completed by."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted Deadline object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Deadline createDeadline(String description , LocalDateTime datetime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Deadline(description, false, datetime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the Deadline object to a String,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String representing the Deadline object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringDateTime \u003d this.datetime.getOutputDatetimeString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String byDatetime \u003d String.format(\"(by: %s)\", stringDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"[\" + DEADLINE_SYMBOL + \"]\" + toStringSuffix() + \" \" + byDatetime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the other Object is equivalent to the Deadline object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param other the object to be compared to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if both objects are equal."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof Deadline) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherDeadline);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the symbol of Deadline."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the String symbol of Deadline."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return DEADLINE_SYMBOL;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the Datetime String of Deadline."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an Optional object containing the formatted String."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringDateTime \u003d this.datetime.getOutputDatetimeString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.of(stringDateTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents Event objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Inherits from the abstract Task class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Datetime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String EVENT_SYMBOL \u003d \"E\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TIME_FORMAT_INPUT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TIME_FORMAT_OUTPUT \u003d \"hh:mm a\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String EVENT_BREAK \u003d \"/at\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted the completion status of the Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the LocalDateTime the Event task is to be completed by."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Event(String description, boolean isCompleted, LocalDateTime time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.time \u003d new Datetime(time, TIME_FORMAT_INPUT, TIME_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a Event object that is not completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the LocalDateTime the Event task is to be completed by."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted Event object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Event createEvent(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Event(description, false, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the Event object to a String,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String representing the Event object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringTime \u003d this.time.getOutputDatetimeString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String atTime \u003d String.format(\"(at: %s)\", stringTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"[\" + EVENT_SYMBOL + \"]\" + toStringSuffix() + \" \" + atTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the other Object is equivalent to the Event object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param other the object to be compared to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if both objects are equal."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof Event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherEvent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the symbol of Event."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the String symbol of Event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return EVENT_SYMBOL;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the Datetime String of Event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an Optional object containing the formatted String."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringTime \u003d this.time.getOutputDatetimeString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.of(stringTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the Task object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected static String TICK \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected static String CROSS \u003d \"\\u2717\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method of Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted indicates if the Task has been completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    Task(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the Task object to a String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Indicates the completion status of the Task and its description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String representing the Task object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toStringSuffix() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String symbol \u003d this.isCompleted ? TICK : CROSS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return String.format(\"[%s] %s\", symbol, this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected boolean isEqual(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.description.equals(task.getTaskDescription()) \u0026\u0026"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                this.isCompleted \u003d\u003d task.isTaskCompleted();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Changes the completion status of Task to completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * This is a mutable operation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the description of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the String of the Task description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the completion status of the Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if the Task is completed and false if not."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isTaskCompleted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the task symbol of the subtype of Task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the task symbol String."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract String getTaskSymbol();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the formatted String of the Datetime object of the Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an Optional object containing the formatted Datetime String."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract Optional\u003cString\u003e getTaskDatetime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 75
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the list of Tasks that Duke stores in."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Initialise a new ArrayList of Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Implements the Iterable interface in order for TaskList to be iterable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the iterator form of TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.taskList.iterator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the number of Tasks that are being stored currently."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the number of Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int getCurrCapacity() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the given index is within the capacity of TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the value to be checked on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if the index is within the capacity."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return index \u003c\u003d this.taskList.size() \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Adds the given task into TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param task the task that is to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the task that has been added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Changes the specified Task in TaskList to completed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the index of the Task that is to be changed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the Task that has been completed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task completeTask(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task task \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        task.completeTask();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Removes a specified Task from TaskList."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the index of the Task that is to be deleted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the Task that has been removed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the TaskList to a representative String."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * This string contains all details of Tasks stored in TaskList."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the string representing TaskList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String taskLine \u003d String.format(\"%d. %s\", i + 1, this.taskList.get(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.append(taskLine);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.deleteCharAt(sb.length() - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Finds all Tasks containing the specified search word."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param searchWord the String that is to be search with."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a TaskList containing all Tasks that are found."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public TaskList findString(String searchWord) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskList foundTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            if (task.getTaskDescription().contains(searchWord)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                foundTasks.addTask(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 109
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents Todo objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Inherits from the abstract Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TODO_SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Todo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted the completion status of the Todo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Todo(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a Todo object that is not completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the Todo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted Todo object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Todo createTodo(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Todo(description, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the Todo object to a String,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a String representing the Todo object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"[\" + TODO_SYMBOL + \"]\" + toStringSuffix();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the other Object is equivalent to the Todo object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param other the object to be compared to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if both objects are equal."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof Todo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Todo otherTodo \u003d (Todo) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherTodo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the symbol of Todo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the String symbol of Todo."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return TODO_SYMBOL;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the Datetime of Todo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Since Todo does not have a datetime attribute, it will be empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an empty Optional object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 73
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DIVIDER \u003d \"---------------------------------------------------------\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showBlankLine() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showStartMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d \"Greetings, what may I do for you?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(LOGO + message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showDivider() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showStatus(String msg) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 38
    }
  },
  {
    "path": "src/main/java/duke/utils/Datetime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents a DateTime object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * This class also supports the formatting and construction of LocalDateTime objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Datetime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final LocalDateTime datetime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final DateTimeFormatter inputFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final DateTimeFormatter outputFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the actual LocalDateTime object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param inputPattern the String format that the LocalDateTime object is originally read in as."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param outputPattern the String format the LocalDateTime object is to be printed out as."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Datetime(LocalDateTime datetime, String inputPattern, String outputPattern) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.inputFormatter \u003d DateTimeFormatter.ofPattern(inputPattern);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.outputFormatter \u003d DateTimeFormatter.ofPattern(outputPattern);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the datetime attribute to the format specified by outputFormatter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the formatted date time String."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getOutputDatetimeString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.outputFormatter.format(this.datetime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses the datetime String, with its pattern to a LocalDateTime object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the String that is to be parsed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param pattern the specified format of the datetime String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the parsed LocalDateTime object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeException if the datetime String does not match the pattern String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static LocalDateTime parseDateTimeString(String datetime, String pattern)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(pattern);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return LocalDateTime.parse(datetime, dtf);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"Ensure the datetime passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(msg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses the time String into a LocalDateTime object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The time is converted into a LocalTime object first, and then converted into a LocalDateTime object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * with the date of today."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the String that is to be parsed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param pattern the specified format of the time String."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the parsed LocalDateTime object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeException if the time String does not match the pattern String."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static LocalDateTime parseTimeString(String time, String pattern) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(pattern);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LocalTime localTime \u003d LocalTime.parse(time, dtf);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return LocalDateTime.of(LocalDate.now(), localTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"Ensure the time passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeException(msg);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 77
    }
  },
  {
    "path": "src/main/java/duke/utils/Utils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The utilities class for Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public final class Utils {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Concatenates the String elements of the array with specified indexes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * A whitespace is inserted in between all elements of the String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param arr the array of Strings that is to be concatenated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param start the starting index of the desired String."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param end the last index the desired String is to end with."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the concatenated String."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static String concatenate(String[] arr, int start, int end) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String prefix \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d start; i \u003c end; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            builder.append(prefix);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            builder.append(arr[i]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            prefix \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int INDEX_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the index of a specified String within the array."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The method returns -1 if the specified String cannot be found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param arr the array that is to be searched on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param target the String that is to be searched for."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the index position of the target String in the array."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static int getIndexOf(String[] arr, String target) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Arrays.asList(arr).indexOf(target);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the given String element of the array can be parsed into an Integer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param command the array that contains the String that can be parsed into an Integer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the index of the element that is to be checked."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return true if the specified element can be parsed into an Integer."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static boolean hasInteger(String[] command, int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (command.length - 1 \u003c\u003d index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return command[index].matches(\"\\\\d+\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 53
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static LocalDateTime getLocalDate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return LocalDateTime.of(2020, 12, 12, 6, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Deadline DEADLINE_ONE \u003d new Deadline(\"test\", false, getLocalDate());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Deadline DEADLINE_TWO \u003d new Deadline(\"test 2\", true, getLocalDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateDeadline() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Deadline.createDeadline(\"test\", getLocalDate()), DEADLINE_ONE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(DEADLINE_ONE.toString(), \"[D][\\u2717] test (by: Dec 12 2020 06:00 am)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(DEADLINE_TWO.toString(), \"[D][\\u2713] test 2 (by: Dec 12 2020 06:00 am)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetTaskDatetime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(DEADLINE_ONE.getTaskDatetime(), Optional.of(\"Dec 12 2020 06:00 am\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static LocalDateTime getLocalDate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return LocalDateTime.of(2020, 12, 12, 6, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Event EVENT_ONE \u003d new Event(\"test\", false, getLocalDate());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Event EVENT_TWO \u003d new Event(\"test 2\", true, getLocalDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateEvent() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Event.createEvent(\"test\", getLocalDate()), EVENT_ONE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(EVENT_ONE.toString(), \"[E][\\u2717] test (at: 06:00 am)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(EVENT_TWO.toString(), \"[E][\\u2713] test 2 (at: 06:00 am)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetTaskDatetime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(EVENT_ONE.getTaskDatetime(), Optional.of(\"06:00 am\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_ONE \u003d new TaskStub(\"task 1\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_TWO \u003d new TaskStub(\"task 2\", false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_TWO_COMPLETE \u003d new TaskStub(\"task 2\", true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_THREE \u003d new TaskStub(\"task 3\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testTaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.addTask(TASK_ONE), TASK_ONE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.addTask(TASK_TWO), TASK_TWO);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.completeTask(2), TASK_TWO_COMPLETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.addTask(TASK_THREE), TASK_THREE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.removeTask(1), TASK_ONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 35
    }
  },
  {
    "path": "src/test/java/duke/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    TaskStub(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof TaskStub) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            TaskStub otherTaskStub \u003d (TaskStub) other;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherTaskStub);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"TS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 30
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Todo TODO_ONE \u003d new Todo(\"test\", false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Todo TODO_TWO \u003d new Todo(\"test 2\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateTodo() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Todo.createTodo(\"test\"), TODO_ONE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(TODO_ONE.toString(), \"[T][\\u2717] test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(TODO_TWO.toString(), \"[T][\\u2713] test 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetTaskDatetime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(TODO_ONE.getTaskDatetime(), Optional.empty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 28
    }
  },
  {
    "path": "src/test/java/duke/utils/DatetimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DatetimeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseDateTimeString_correctFormat_success() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime actual \u003d LocalDateTime.of(2019, 2, 19, 6, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Datetime.parseDateTimeString(\"2019-19-02 0600\", \"yyyy-dd-MM HHmm\"), actual);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseDateTimeString_wrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String pattern \u003d \"yyyy dd MM\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LocalDateTime actual \u003d LocalDateTime.of(2019, 2, 19, 19, 20);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(Datetime.parseDateTimeString(\"2019-19-02\", pattern), actual);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String expected \u003d String.format("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \"Apologies. Ensure the datetime passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(expected, exception.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTimeString_correctFormat_success() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalTime time \u003d LocalTime.of(6, 54);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime actual \u003d LocalDateTime.of(LocalDate.now(), time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Datetime.parseTimeString(\"0654\", \"HHmm\"), actual);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTimeString_wrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String pattern \u003d \"HH mm\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalTime time \u003d LocalTime.of(18, 8);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime actual \u003d LocalDateTime.of(LocalDate.now(), time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(Datetime.parseDateTimeString(\"18-08\", pattern), actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String expected \u003d String.format("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \"Apologies. Ensure the datetime passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(expected, exception.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 55
    }
  },
  {
    "path": "src/test/java/duke/utils/UtilsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testConcatenate() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] arr \u003d new String[]{\"This\", \"is\", \",\" ,\"a\", \"test\", \"case\", \".\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.concatenate(arr, 0, 7), \"This is , a test case .\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.concatenate(arr, 1, 6), \"is , a test case\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.concatenate(arr, 2, 3), \",\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.concatenate(arr, 1, 1), \"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetIndexOf() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] arr \u003d new String[]{\"This\", \"has\", \"/some\", \"*special*\", \"strings\", \".\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.getIndexOf(arr, \"This\"), 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.getIndexOf(arr, \"/some\"), 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.getIndexOf(arr, \"*special*\"), 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.getIndexOf(arr, \".\"), 5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.getIndexOf(arr, \"does not exist\"), Utils.INDEX_NOT_FOUND);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testHasInteger() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Utils.hasInteger(new String[]{\"done\", \"2\"}, 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Utils.hasInteger(new String[]{\"done\", \"2\", \"extra\"}, 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Utils.hasInteger(new String[]{\"done\", \"extra\", \"2\"}, 2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(!Utils.hasInteger(new String[]{\"done\", \"2.2\"}, 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(!Utils.hasInteger(new String[]{\"done\", \"2.2\"}, 0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(!Utils.hasInteger(new String[]{\"done\"}, 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "event project meeting /at 1300"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "deadline return book /by 12-12-2012 1200"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "find book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "find does not exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "not a command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "event no datetime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "deadline no date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "event project meeting /at 12.00 am"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "deadline return book /by 12 Dec 2012 1200"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 22
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*/*.java ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 4,
      "-": 36
    }
  }
]
