[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    archiveBaseName \u003d \"launcher\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 23,
      "-": 44
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "munharsha": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "munharsha": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "munharsha": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "munharsha": 11
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "T | 1 | wank"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "T | 0 | wank"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "E | 0 | project meeting | 01-01-2020 12:30"
      }
    ],
    "authorContributionMap": {
      "munharsha": 3
    }
  },
  {
    "path": "data/dukeInvalid.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "rubbish"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "hehhee"
      }
    ],
    "authorContributionMap": {
      "munharsha": 2
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public abstract String execute(TaskList taskList, UI ui) throws DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a deadline reminder."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected LocalDateTime localDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param by          The due date of this deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException If date is not in the right format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Deadline(String description, String by) throws DateTimeParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.localDate \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Deadline object information in the format to be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, by);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Deadline information in a string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + localDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 46
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyDeadlineException, DukeEmptyDeadlineTimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (command.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyDeadlineException(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String deadliner \u003d Parser.stringBuilder(command.split(\" \"), 1, command.split(\" \").length - 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] deadlinerparts \u003d deadliner.split(\" /by \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (deadlinerparts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyDeadlineTimeException(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Deadline deadlineTask \u003d new Deadline(deadlinerparts[0], deadlinerparts[1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.addTask(deadlineTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printTaskAdd(deadlineTask, tasklist.numOfTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyDeadlineException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyDeadlineTimeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 30
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DeleteCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeDeleteException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int deleteTask \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (deleteTask + 1 \u003e tasklist.numOfTasks() || deleteTask \u003c 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeDeleteException(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printDeleteMessage(tasklist.getTask(deleteTask), tasklist.numOfTasks() - 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.deleteTask(deleteTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeDeleteException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 23
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 59
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DoneCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeInvalidDoneNumException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int doneTask \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (doneTask + 1 \u003e tasklist.numOfTasks() || doneTask \u003c 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeInvalidDoneNumException(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d tasklist.markAsDone(doneTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeInvalidDoneNumException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 23
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Main class where Duke program is run."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs the duke object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.tasks \u003d storage.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ui.printFormattedMessage(\"OOPS!!! File Loading error!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Runs the duke program and will terminate upon input \"bye\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeUnknownInputException      If users inputs invalid input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyToDoException         If todo is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyEventException        If event is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyDeadlineException     If deadline is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeInvalidDoneNumException    If done number entered is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyDeadlineTimeException If the deadline time is empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyEventTimeException    If the event time is empty."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeDeleteException            If there are any other exceptions."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException         If there is time passed in the wrong format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (Parser.isList(input)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                ListCommand list \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d list.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isDone(input)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                DoneCommand done \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d done.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isToDo(input)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                ToDoCommand todo \u003d new ToDoCommand(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d todo.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isDeadline(input)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                DeadlineCommand deadline \u003d new DeadlineCommand(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d deadline.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isEvent(input)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                EventCommand event \u003d new EventCommand(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d event.execute(this.tasks, ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isDelete(input)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                DeleteCommand delete \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d delete.execute(this.tasks, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else if (Parser.isFind(input)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                FindCommand find \u003d new FindCommand(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d find.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeUnknownInputException(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeUnknownInputException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyDeadlineException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeInvalidDoneNumException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyDeadlineTimeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeDeleteException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyFindException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyEventTimeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyEventException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyToDoException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyTaskListException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeNoMatchesExcpetion e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeTimeParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (Parser.isBye(input)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printByeMessage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        storage.save(storage.convertArrayToSaveFormat(this.tasks));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 99,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid delete command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeDeleteException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeDeleteException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeDeleteException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The invalid delete number.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeEmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyDeadlineException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyDeadlineException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyDeadlineTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty deadline Time"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyDeadlineTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyDeadlineTimeException with a relevant detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyDeadlineTimeException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a deadline time cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 13
    }
  },
  {
    "path": "src/main/java/DukeEmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyEventException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyEventException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 14
    }
  },
  {
    "path": "src/main/java/DukeEmptyEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty time for an event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyEventTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventTimeException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyEventTimeException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a event time cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeEmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty find."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyFindException with a relevant detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyFindException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! Empty find body!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 13
    }
  },
  {
    "path": "src/main/java/DukeEmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyTaskListException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventTimeException with a relevant detail message."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyTaskListException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! There are no tasks entered!.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 10
    }
  },
  {
    "path": "src/main/java/DukeEmptyToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty ToDo reminder."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyToDoException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyToDoException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyToDoException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid duke command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeInvalidDoneNumException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid done number."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeInvalidDoneNumException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeInvalidDoneNumException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeInvalidDoneNumException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The invalid done number.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 16
    }
  },
  {
    "path": "src/main/java/DukeNoMatchesExcpetion.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that there is no matches with what the user has keyed in."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeNoMatchesExcpetion extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeNoMatchesException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeNoMatchesExcpetion(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! No matches found!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeTimeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid duke command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public DukeTimeParseException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! The invalid date format has \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"been keyed in. PLease enter in dd-MM-yyyy HH:mm format\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 16
    }
  },
  {
    "path": "src/main/java/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeUnknownInputException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeUnknownInputException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 16
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents an event reminder."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The time/date of the event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The time/date of the event in terms of LocalDateTimeObject."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected LocalDateTime localTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs an Event object with the specified description and date and/or time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param at          The date/time of this event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException Throws if there is a wrong format of date/time passed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Event(String description, String at) throws DateTimeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.localTime \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for saving."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for saving."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, at);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + localTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 52
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    EventCommand(String command) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyEventTimeException, DukeEmptyEventException,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            DukeTimeParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (this.command.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyEventException(this.command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String eventer \u003d Parser.stringBuilder(command.split(\" \"), 1, command.split(\" \").length - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] eventParts \u003d eventer.split(\" /at \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (eventParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyEventTimeException(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Event eventTask \u003d new Event(eventParts[0], eventParts[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.addTask(eventTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printTaskAdd(eventTask, tasklist.numOfTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyEventTimeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyEventException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new DukeTimeParseException(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 39
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    FindCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyFindException, DukeNoMatchesExcpetion {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String[] findParts \u003d command.split(\" \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (findParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyFindException(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message \u003d ui.printKeywordTasks(findParts[1], tasklist.getTasks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyFindException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeNoMatchesExcpetion e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 25
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ListCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyTaskListException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (tasklist.numOfTasks() \u003c 1) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyTaskListException(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printListOfTasks(tasklist.getTasks());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyTaskListException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 21
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void endDuke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 34
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(\"Welcome to Duke!\", dukeImage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String response \u003d duke.run(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Main.endDuke();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 53
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a parser that parses the different user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"bye\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"bye\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isBye(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.equals(TaskElement.BYE.label);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"list\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"list\"."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isList(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.equals(TaskElement.LIST.label);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command done present."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"done\"."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDone(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DONE.label);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command Todo present."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"Todo\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isToDo(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.TODO.label);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command deadline present."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"deadline\"."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDeadline(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DEADLINE.label);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command event present."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"event\"."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isEvent(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.EVENT.label);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Checks the input if there is command delete present."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"delete\"."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDelete(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DELETE.label);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"done\"."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"done\"."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDone(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DONE.label);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"todo\"."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"todo\"."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseToDo(String input) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.TODO.label);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"deadline\"."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"deadline\"."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDeadline(String input) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DEADLINE.label);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"event\"."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"event\"."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseEvent(String input) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.EVENT.label);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"delete\"."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"delete\"."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDelete(String input) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DELETE.label);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Builds up a string ."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param arr   Array of the strings seperated."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param start Starting Index."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param end   Ending Index."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Returns the string that is built."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static String stringBuilder(String[] arr, int start, int end) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String store \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (i \u003d\u003d end) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                store +\u003d arr[i];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                store +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"find\"."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"find\"."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isFind(String input) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.FIND.label);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 161
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a strorage systems that stores the input information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The default relative path to the saving file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String DEFAULT_PATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Stores the path object with the default path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs the storage class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Storage() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        path \u003d Paths.get(DEFAULT_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        File file \u003d new File(DEFAULT_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Tasklist of the tasks that are present in the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Tasklist of the previous tasks that have been stored."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList load() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return convertTextToTask(Files.readAllLines(path));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Tasklist of the tasks that are present in the storage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param tasklist Contains the list of all the tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Arraylist that will be coverted from a tasklist object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ArrayList\u003cString\u003e convertArrayToSaveFormat(TaskList tasklist) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (Task tasks : tasklist.getTasks()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            strings.add(tasks.writeSaveFormat());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Converts a list of strings to tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param lines lines of strings that represents the tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Tasklist generated from the list of strings that have been given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList convertTextToTask(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                String[] currLine \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                Task currTask \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (currLine[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new ToDo(currLine[2]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } else if (currLine[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new Deadline(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } else if (currLine[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new Event(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (currLine[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask.markAsDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                tasks.addTask(currTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Saves the list of strings into the folder"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param strings Strings of the different tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void save(ArrayList\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Files.write(path, strings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 114
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents an Task reminder."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The description of the task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * If teh task is done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Marks if the task is done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return UI.printMarkAsDone(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the string format for saving."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String format fro saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String store \u003d \"D |\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            store +\u003d \" 1 |\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            store +\u003d \" 0 |\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        store +\u003d \" \" + this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean containsKeyword(String substring) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.description.contains(substring);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "munharsha": 63
    }
  },
  {
    "path": "src/main/java/TaskElement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public enum TaskElement {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    FIND(\"find\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final String label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TaskElement(String label) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 17
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String markAsDone(int value) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d this.tasks.get(value).markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void deleteTask(int value) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.tasks.remove(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public int numOfTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Task getTask(int value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks.get(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 45
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 17
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ToDoCommand(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String execute(TaskList tasklist, UI ui) throws DukeEmptyToDoException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (command.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeEmptyToDoException(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String tasker \u003d Parser.stringBuilder(command.split(\" \"), 1, command.split(\" \").length - 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ToDo todoTask \u003d new ToDo(tasker);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            tasklist.addTask(todoTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d ui.printTaskAdd(todoTask, tasklist.numOfTasks());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeEmptyToDoException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 24
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void printFormattedMessage(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printByeMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printTaskAdd(Task task, int sizeStore) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\"  + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"Now you have \" + String.valueOf(sizeStore) + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printDeleteMessage(Task task, int sizeStore) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"Now you have \" + String.valueOf(sizeStore) + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printListOfTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        int sizeStore \u003d tasks.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (int i \u003d 1; i \u003c sizeStore + 1; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message +\u003d String.valueOf(i) + \".\" + tasks.get(i - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static String printMarkAsDone(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String printKeywordTasks(String substring, ArrayList\u003cTask\u003e stringStore) throws DukeNoMatchesExcpetion {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String message \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            ArrayList\u003cTask\u003e keywordTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (int i \u003d 0; i \u003c stringStore.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (stringStore.get(i).containsKeyword(substring)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    keywordTasks.add(stringStore.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (keywordTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeNoMatchesExcpetion(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int sizeStore \u003d keywordTasks.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (int i \u003d 1; i \u003c sizeStore + 1; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                message +\u003d String.valueOf(i) + \".\" + keywordTasks.get(i - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeNoMatchesExcpetion e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 62
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "munharsha": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "munharsha": 19
    }
  },
  {
    "path": "src/test/UITest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "class UITest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final InputStream ORIGINAL_IN \u003d System.in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final String LINE \u003d \" ____________________________________________________________\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.setIn(ORIGINAL_IN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testShowGreeting() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printGreeting();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d \"Hello from\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                logo +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\nHello! I\u0027m Duke\\nWhat can I do for you?\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testPrintTaskAdd(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printTaskAdd(new ToDo(\"Read Book\"), 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Task toDo \u003d new ToDo(\"Read Book\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d LINE +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Got it. I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                toDo.toString() +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Now you have \" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                String.valueOf(1) +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \" tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testPrintDeleteMessage(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printDeleteMessage(new ToDo(\"Read Book\"), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Task toDo \u003d new ToDo(\"Read Book\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d LINE +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Noted. I\u0027ve removed this task:\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                toDo.toString() +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Now you have \" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                String.valueOf(1) +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \" tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testByeMessage(){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printByeMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d LINE +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Bye. Hope to see you again soon!\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 101
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "blah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book /by 23-02-2020 00:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book /by 123456789"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting /at 01-01-2020 12:30"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting /at hello"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    rm help.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "munharsha": 4,
      "-": 36
    }
  }
]
