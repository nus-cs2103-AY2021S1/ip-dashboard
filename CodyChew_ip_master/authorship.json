[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _                    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   |  _ \\ _   _| | _____  ______ ______ ______  ___  _____"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   | | | | | | | |/ / _ \\|  __  |__  __|___   |/ _ \\|  _  \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   | |_| | |_| |   \u003c  __/| |  | |__||__ /   /_\u003c  __/|     /"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|| |  | |______|______|\\___||_|\\__\\ "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 6,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * The Dukenizer program implements a Task Manager application. It performs task manipulations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * based on user commands. It consists of a TaskList object to store your tasks, a Ui object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * to handle user interactions and a Storage object to save and retrieve tasks in a list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/** Constructs a Duke object from a specified filePath. If a valid .txt file containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * a TaskList is found, it will be loaded. Otherwise, a new TaskList object is created"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * to store the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param filePath Relative filepath from project source."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//initialize User interface"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//Initialize Storage location"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tstorage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//Initialize TaskList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\ttasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\ttasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tstorage.writeToFile(storage.getPath().toString(), \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/** Main program loop until termination when \"bye\" is called by the user. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//print greeting message"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printGreeting();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tboolean isExit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\twhile (!isExit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tString fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tui.printDivider();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tCommand c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tc.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tisExit \u003d c.isExit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tui.showError(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} finally {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tui.printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tSystem.out.println();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tnew Duke(\"DukenizerTaskList.txt\").run();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 76,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a user command. Consists of an execute method where the command manipulates"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * the TaskList object, Ui object and Storage object to achieve the desired outcome. Each"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Command will extend from this abstract class and have their own execute and isExit method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Command to add a new Deadline object to the TaskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate String by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Constructor takes in a String description and a String time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param description String description of the Deadline Task Object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param by String due time of the Deadline Task Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic DeadlineCommand(String description, String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Creates a new Deadline Task and adds it into the TaskList. The Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * is updated with the latest Task and the Ui Object will print out a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * relevant message to notify the user on this addition."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTask deadline \u003d new Deadline(this.description, this.by);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.add(deadline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//print output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printTaskAdded(tasks, deadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//update storage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tstorage.saveListToHardDisk(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns false to indicate that the Command does not exit the program."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Exit program indicator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Command to delete an existing object in the TaskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate final String markItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Constructor takes in a String value of the instruction to be further processed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param secondArg String argument to specify the Task to delete."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic DeleteCommand(String secondArg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tmarkItem \u003d secondArg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  Processes the String attribute markItem to make sure that a valid Task number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  is given. The Task will be deleted from the TaskList if it is valid. Otherwise a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  DukeException will be thrown. The Storage is updated with this deletion and the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  Ui Object will print out a relevant message to notify the user on this deletion"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  or exception."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @throws DukeException If number is not a valid item number in the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//check if second argument is integer \u0026 valid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif ((Integer.parseInt(this.markItem) \u003c 1) || (Integer.parseInt(this.markItem) \u003e tasks.getSize())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"Please enter a valid item number from the list!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//second argument wrong format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tcatch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tthrow new DukeException(\"Please only input \u0027delete \u003citem number\u003e\u0027 with no other inputs!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tint deleteIndex \u003d Integer.parseInt(this.markItem);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//delete task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTask deletedItem \u003d tasks.delete(deleteIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//print output"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printTaskDeleted(tasks, deletedItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//update storage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tstorage.saveListToHardDisk(tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns false to indicate that the Command does not exit the program."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Exit program indicator"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CodyChew": 75
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Command to mark an existing object in the TaskList as done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate final String markItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Constructor takes in a String value of the instruction to be further processed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param secondArg String argument to specify the Task to delete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic DoneCommand(String secondArg) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tmarkItem \u003d secondArg;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  Processes the String attribute markItem to make sure that a valid Task number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  is given. The Task will be marked as done from the TaskList if it is valid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  Otherwise a DukeException will be thrown. The Storage is updated with this deletion"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  and the Ui Object will print out a relevant message to notify the user on this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *  deletion or exception."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @throws DukeException If number is not a valid item number in the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//check if second argument is integer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif ((Integer.parseInt(this.markItem) \u003c 1) || (Integer.parseInt(this.markItem) \u003e tasks.getSize())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"Please enter a valid item number from the list!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//second argument wrong format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tcatch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tthrow new DukeException(\"Please only input \u0027done \u003citem number\u003e\u0027 with no other inputs!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tint doneIndex \u003d Integer.parseInt(this.markItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.markDone(doneIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printTaskDone(tasks.getList().get(doneIndex-1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//update storage"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tstorage.saveListToHardDisk(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns false to indicate that the Command does not exit the program."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Exit program indicator"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 69
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Command to add a new Event object to the TaskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate String at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Constructor takes in a String description and a String time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param description String description of the Event Task Object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param at String time of the Event Task Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic EventCommand(String description, String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Creates a new Event Task and adds it into the TaskList. The Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * is updated with the latest Task and the Ui Object will print out a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * relevant message to notify the user on this addition."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTask event \u003d new Event(this.description, this.at);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.add(event);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//print output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printTaskAdded(tasks, event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//update storage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tstorage.saveListToHardDisk(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns false to indicate that the Command does not exit the program."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Exit program indicator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 59
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Command to exit the program"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Exits the program for the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns true to indicate that the Command exits the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Exit program indicator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 33
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate String searchTerm;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Takes in a search term to be used for filtering out matching task descriptions in a specified TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param searchTerm Search description for tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic FindCommand(String searchTerm) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.searchTerm \u003d searchTerm;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Uses the searchTerm attribute to filter out tasks with descriptions containing the searchTerm. The tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * are added into a new TaskList and printed out by the Ui class to be shown to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//Initialize new TaskList for matching tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTaskList searchTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//loop through to find matching tasks to add to new TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tfor (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (task.getDescription().contains(this.searchTerm)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tsearchTasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//print TaskList of matching tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printMatchingTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printList(searchTasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns false to indicate that the Command does not exit the program."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return false indicator"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 56
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Command to list the tasks in the TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Lists the tasks in the TaskList object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printList(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns false to indicate that the Command does not exit the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Exit program indicator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 33
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Command to add a new Todo object to the TaskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Constructor takes in a String description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tsk String description of the Todo Task object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic TodoCommand(String tsk) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.description \u003d tsk;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Get the description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return String description of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Creates a new Todo Task and adds it into the TaskList. The Storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * is updated with the latest Task and the Ui Object will print out a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * relevant message to notify the user on this addition."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tasks TaskList object containing the list of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param ui Ui object to output messages to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param storage Storage object to interact and manipulate data from the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTask todo \u003d new Todo(this.description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.add(todo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//print output"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tui.printTaskAdded(tasks, todo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//update storage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tstorage.saveListToHardDisk(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns false to indicate that the Command does not exit the program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Exit program indicator"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 64
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents all the exceptions that arise from using the Dukenizer task manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 12
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Handles user inputs and make sense out of it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Takes in a line of user input as a String and returns a relevant Command. Otherwise,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * throw a DukeException when a command is invalid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param fullCommand user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Command to be executed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @throws DukeException when inputs are invalid or incomplete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//remove leading and trailing white spaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString noWhiteSpace \u003d fullCommand.strip();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//get first word of command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString[] instruction \u003d noWhiteSpace.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tif (instruction[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\treturn new ExitCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else if (instruction[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (instruction.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\treturn new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"Extra inputs detected! Please only input \u0027list\u0027.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else if (instruction[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (instruction.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\treturn new TodoCommand(instruction[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else if (instruction[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (instruction.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t//check if contains deadline \" /by yyyy-MM-dd HH:mm\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tif ((instruction[1].contains(\" /by \")) \u0026\u0026"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t(instruction[1].split(\" /by \")[1]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\t\t.matches(\"^\\\\d{4}\\\\-(0[1-9]|1[012])\\\\-(0[1-9]|[12][0-9]|3[01]) \" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\"([01]?[0-9]|2[0-3]):[0-5][0-9]\"))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\treturn new DeadlineCommand(instruction[1].split(\" /by \")[0],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\tinstruction[1].split(\" /by \")[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tthrow new DukeException(\"Please input in the following format \" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\t\"\u0027deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd HH:mm\u003e\u0027 with a valid date \u0026 time\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else if (instruction[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (instruction.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t//check if contains event \" /at yyyy-MM-dd HH:mm\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tif ((instruction[1].contains(\" /at \")) \u0026\u0026"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t(instruction[1].split(\" /at \")[1]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\t\t.matches(\"^\\\\d{4}\\\\-(0[1-9]|1[012])\\\\-(0[1-9]|[12][0-9]|3[01]) \" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\"([01]?[0-9]|2[0-3]):[0-5][0-9]\"))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\treturn new EventCommand(instruction[1].split(\" /at \")[0],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\tinstruction[1].split(\" /at \")[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tthrow new DukeException(\"Please input in the following format \" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t\t\"\u0027event \u003cdescription\u003e /at \u003cyyyy-MM-dd HH:mm\u003e\u0027 with a valid date \u0026 time\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else if (instruction[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//done with no other arguments"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (instruction.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"Please specify item number!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//done with exactly 2 inputs"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\telse if (instruction.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\treturn new DoneCommand(instruction[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else if (instruction[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//done with no other arguments"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (instruction.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"Please specify item number!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//done with exactly 2 inputs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\telse if (instruction.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\treturn new DeleteCommand(instruction[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else if (instruction[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//find with no other arguments"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (instruction.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tthrow new DukeException(\"Please specify a description to search!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\treturn new FindCommand(instruction[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tthrow new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthrow new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 110
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * The Storage class handles all the operations when reading or writing files from the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * hard disk. ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate final Path path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Takes in a given filePath and saves it for reference"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param filePath file path from user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tpath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Concatenates each line of the specified file if file is valid and returns"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * it as a String value. Otherwise, a DukeException will be thrown if there are"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * errors loading the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return String representation of the specified file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @throws DukeException when file is not found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic String load() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tif (Files.exists((path))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t// create a File for the given file path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tFile f \u003d new File(String.valueOf(this.path));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tScanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tString list \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\twhile (s.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tlist +\u003d s.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tlist +\u003d \"|\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\treturn list;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t} catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthrow new DukeException(\"File does not exist\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Get file path of this Storage object when it is created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Saved file path"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic Path getPath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn this.path;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Overrides a text file at a specified file path relative to the source"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param filePath Specified file path to write to file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param textToAdd String value to write to file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void writeToFile(String filePath, String textToAdd) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tFileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tfw.write(textToAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tfw.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Appends a text file at a specified file path relative to the source"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param filePath Specified file path of file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param textToAppend String value to append to file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void appendToFile(String filePath, String textToAppend) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t// create a FileWriter in append mode"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tFileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tfw.write(textToAppend);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tfw.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Saves tasks in the TaskList Object into the hard disk so that it can be retrieved again."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param lst TaskList Object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void saveListToHardDisk(TaskList lst) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString list \u003d \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c lst.getSize(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tTask targetTask \u003d lst.get(i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tlist +\u003d targetTask.getStoreAs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tlist +\u003d \"\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\twriteToFile(this.path.toString(), list);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 123
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Deadline Task. It has a description and a due timing attribute."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a new Deadline Task with a specified description and due time. String time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Object has to have proper formatting \"yyyy-MM-dd HH:mm\" as it will be parsed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * as a LocalDateTime Object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param description Describes the Deadline Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param by The due timing of the Deadline Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.storeAs \u003d \"D,0,\" + description + \",\" + by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a Deadline Task with a specified done indicator, description and due time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * String time Object has to have proper formatting \"yyyy-MM-dd HH:mm\" as it will be parsed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * as a LocalDateTime Object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param done Indicates whether the task has been done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param description Describes the Deadline Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param by The due timing of the Deadline Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Deadline(String done, String description, String by) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (done.equals(\"1\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.storeAs \u003d \"D,1,\" + description + \",\" + by;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.storeAs \u003d \"D,1,\" + description + \",\" + by;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * String representation of the Deadline Task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return representation of the Deadline Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents an Event Task. It has a description and specified timing attribute."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a new Event Task with a specified description and time attribute. String time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Object has to have proper formatting \"yyyy-MM-dd HH:mm\" as it will be parsed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * as a LocalDateTime Object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param description Describes the Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param at The specified timing of the Event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.storeAs \u003d \"E,0,\" + description + \",\" + at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a new Event Task with a specified done indicator, description and time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * attribute. String time Object has to have proper formatting \"yyyy-MM-dd HH:mm\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * as it will be parsed as a LocalDateTime Object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param done  Indicates whether the task has been done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param description Describes the Event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param at The specified timing of the Event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Event(String done, String description, String at) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (done.equals(\"1\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.storeAs \u003d \"E,1,\" + description + \",\" + at;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.storeAs \u003d \"E,1,\" + description + \",\" + at;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * String representation of the Event Task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return representation of the Event Task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents an Task. It has a description, a done indicator and a String representation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * for storing it in the storage."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected String storeAs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a new Task Object with a description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param description Describes the Task Object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Get the done status of the Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return done status"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Mark the Task as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.updateDoneForStoreAs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private void updateDoneForStoreAs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.storeAs \u003d this.storeAs.substring(0, 2) + \"1\" + this.storeAs.substring(3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Get the String representation of the Task for storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return String representation of the Task for storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String getStoreAs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.storeAs;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Get the description of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return String description of the Task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Get the String representation of the task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return String representation of the Task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 71
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Stores and represents tasks in the application. All the tasks in the program,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * and its states, are stored in this list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate List\u003cTask\u003e lst;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Creates a new TaskList Object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tlst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Creates a new TaskList Object from a String source. If the String is valid, a new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * TaskList with pre-existing tasks would be constructed. Otherwise, a DukeException will be thrown."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param load String to be parsed and converted to list of tasks(TaskList)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @throws DukeException when String cannot be successfully parsed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic TaskList(String load) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//initialize  list of tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tlst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//loop through load to form task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tString[] tasks \u003d load.split(\"\\\\|\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tfor (String task : tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tString[] instruction \u003d task.split(\",\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\tif (instruction[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tTask tsk \u003d new Todo(instruction[1], instruction[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tlst.add(tsk);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t} else if (instruction[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tTask tsk \u003d new Deadline(instruction[1], instruction[2], instruction[3]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tlst.add(tsk);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t} else if (instruction[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tTask tsk \u003d new Event(instruction[1], instruction[2], instruction[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tlst.add(tsk);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\tthrow new DukeException(\"error loading from file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tthrow new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tthrow new DukeException(\"file could not be parsed\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Returns the list of tasks in the program."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn this.lst;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Return the task at a specified index of the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param index index of task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Task Object from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic Task get(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn this.lst.get(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Adds a Task into the TaskList Object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param tsk Task to be added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void add(Task tsk) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.lst.add(tsk);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * String representation of the TaskList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return String representation of the TaskList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//initialize String"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString taskList \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//get list to loop through tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tList\u003cTask\u003e tasks \u003d this.getList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tTask targetTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//append item index"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\ttaskList +\u003d String.valueOf(i + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\ttaskList +\u003d \".\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//append item"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\ttaskList +\u003d targetTask.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t//append newLine"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tif (i \u003c tasks.size() - 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\ttaskList +\u003d \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn taskList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Return size of the task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return number of lists."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic int getSize() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn this.getList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Mark an item in the task list as done."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param itemNumber task number in the list(not index number)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void markDone(int itemNumber) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTask doneItem \u003d this.lst.get(itemNumber - 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tdoneItem.markAsDone();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Deletes a Task in the list at the specified task number."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param itemNumber task number in the list(not index number)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return Task that was deleted from the list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic Task delete(int itemNumber) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTask item \u003d this.lst.get(itemNumber - 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.lst.remove(item);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn item;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 151
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents an Todo Task. It has a description attribute."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a Todo task that has a description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param description Describes the task to be done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.storeAs \u003d \"T,0,\" + description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a Todo Task with a done indicator and a description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param done Indicates whether the task has been done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param description Describes the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Todo(String done, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (done.equals(\"1\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.storeAs \u003d \"T,1,\" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.storeAs \u003d \"T,0,\" + description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * String representation of the Todo Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return representation of the Todo Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 43
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * The Ui class handles all the interactions, including input and output, with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic Ui () {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tthis.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Print out exit program to user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Print out section divider."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printDivider() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"_______________________________________________________________\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Print out greeting to user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printGreeting() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString logo \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\" ____        _                    \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t+ \"|  _ \\\\ _   _| | _____  ______ ______ ______  ___  _____\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t+ \"| | | | | | | |/ / _ \\\\|  __  |__  __|___   |/ _ \\\\|  _  \\\\\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t+ \"| |_| | |_| |   \u003c  __/| |  | |__||__ /   /_\u003c  __/|     /\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\t\t+ \"|____/ \\\\__,_|_|\\\\_\\\\___|| |  | |______|______|\\\\___||_|\\\\__\\\\ \\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"_______________________________________________________________\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Hello! I\u0027m Dukenizer\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"_______________________________________________________________\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Prints the task list in the program."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printList(TaskList lst) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(lst.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tif (lst.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tSystem.out.println(\"Your task list is empty!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Takes in user input to be processed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @return String representation of user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic String readCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//Take in Input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString query \u003d sc.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\treturn query;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Prints out any error messages."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param message error message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void showError(String message) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Prints out to user that task is successfully added."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param lst TaskList in the program"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param task Task that was added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printTaskAdded(TaskList lst, Task task) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(task.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Now you have \" + lst.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Print out mark Task as done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param task Task to be marked done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printTaskDone(Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(task.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Print out Task successfully deleted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param lst TaskList in the program"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * @param task Task to be deleted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printTaskDeleted(TaskList lst, Task task) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(task.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Now you have \" + lst.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void showLoadingError() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"We created a new Task List for you since we couldn\u0027t find any items in your previous list! :)\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t * Prints out matching tasks line."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void printMatchingTasks() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tSystem.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 124
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate Todo todoTask \u003d new Todo(\"valid todo\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate Deadline deadlineTask \u003d new Deadline(\"valid deadline\",\"2019-12-01 00:11\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tprivate Event eventTask \u003d new Event(\"valid event\", \"2020-08-22 23:32\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void init(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.add(todoTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.add(deadlineTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.add(eventTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void getSizeTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(3, tasks.getSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void testStringConversion() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(\"1.[T][✘] valid todo\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"2.[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"3.[E][✘] valid event (at: Aug 22 2020 23:32)\", tasks.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(\"\" ,new TaskList().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void testConstructor_validString_taskListCreated() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString validString \u003d \"T,0,valid todo|D,1,valid deadline,2019-12-01 00:11|\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tTaskList tl \u003d new TaskList(validString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(\"1.[T][✘] valid todo\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"2.[D][✓] valid deadline (by: Dec 1 2019 00:11)\",tl.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void testConstructor_invalidString_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString invalidString \u003d \"T,0\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tTaskList tl \u003d new TaskList(invalidString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tassertEquals(\"1.[T][✘] valid todo\", tl.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tfail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tassertEquals(\"Index 2 out of bounds for length 2\", e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tString invalidString2 \u003d \"T,0,dsad|D,k,vs,3\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tTaskList tl2 \u003d new TaskList(invalidString2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tassertEquals(\"1.[T][✘] valid todo\", tl2.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tfail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t} catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\tassertEquals(\"file could not be parsed\", e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void getTaskTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(todoTask,tasks.get(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(deadlineTask,tasks.get(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(eventTask,tasks.get(2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void addTest() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.add(todoTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(4, tasks.getSize());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(\"1.[T][✘] valid todo\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"2.[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"3.[E][✘] valid event (at: Aug 22 2020 23:32)\\n\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"4.[T][✘] valid todo\", tasks.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void deleteTest() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(3, tasks.getSize());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//delete last task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(eventTask,tasks.delete(3));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(2, tasks.getSize());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//delete first task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.delete(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(1, tasks.getSize());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void markDoneTest() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.markDone(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\ttasks.markDone(3);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(\"1.[T][✓] valid todo\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"2.[D][✘] valid deadline (by: Dec 1 2019 00:11)\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t\t\t\"3.[E][✓] valid event (at: Aug 22 2020 23:32)\", tasks.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\tpublic void getListTest() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\t//form external list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tlst.add(todoTask);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tlst.add(deadlineTask);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tlst.add(eventTask);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t\tassertEquals(lst,tasks.getList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 135
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deadline return book /by 209-12-0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "event project meeting /at 2020-08-52"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deadline wrong3 /by 2019-12-01 03:1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "event wrong4 /at 2019-12-01 00:70"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deadline return book /by 2019-12-01 00:11"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "event project meeting /at 2020-08-22 23:32"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "find"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "find book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "find non-existent"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "if not exist C:\\Data\\repos\\CS2103\\bin mkdir C:\\Data\\repos\\CS2103\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "javac  -cp C:\\Data\\repos\\CS2103\\src\\main\\java\\ -Xlint:none -d C:\\Data\\repos\\CS2103\\bin C:\\Data\\repos\\CS2103\\src\\main\\java\\Duke\\*.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "java -classpath C:\\Data\\repos\\CS2103\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CodyChew": 9,
      "-": 19
    }
  }
]
