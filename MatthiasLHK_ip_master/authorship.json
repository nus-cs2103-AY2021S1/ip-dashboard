[
  {
    "path": "DukeTodoSave.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] name (by: 12 Dec 2020 1200)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][O] t (by: 12 Dec 2020 1200)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] return "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] test (by: 12 Dec 1212 1200)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] read "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] read "
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 6
    }
  },
  {
    "path": "src/main/java/Command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d getDate(input,1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.newTask(name,\"Deadline\",date, getFileDir());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 14
    }
  },
  {
    "path": "src/main/java/Command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d getDate(input,2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.newTask(name,\"Event\",date, getFileDir());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 14
    }
  },
  {
    "path": "src/main/java/Command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getFileDir;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.newTask(name,\"Todo\",null, getFileDir());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 14
    }
  },
  {
    "path": "src/main/java/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() throws ErrorExceptions {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(LocalDateTime date) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/main/java/Command/CompletedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class CompletedCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int index \u003d i;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            t \u003d TaskManager.getTask(index);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            TaskManager.completed(t);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UserInterface.done();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"    \" + TaskManager.read(t));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"The tracked Tasks.task has been marked as completed! Congrats~~!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no such Tasks.task!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 22
    }
  },
  {
    "path": "src/main/java/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int index \u003d i;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            t \u003d TaskManager.getTask(index);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            TaskManager.delete(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UserInterface.done();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"    \" + TaskManager.read(t));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"The tracked Tasks.task has been deleted!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no suck Tasks.task!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 24
    }
  },
  {
    "path": "src/main/java/Command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ExitCommand extends Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface.stop();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 9
    }
  },
  {
    "path": "src/main/java/Command/FilterDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FilterDateCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(LocalDate date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Filtered called\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d TaskManager.getStore();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Here are your tasks on this date!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for(task i : clone){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if(i.taskDate()!\u003dnull){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                if(i.taskDate().toLocalDate().equals(date)){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    System.out.println(\"    \" + count + \". \" + TaskManager.read(i));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 27
    }
  },
  {
    "path": "src/main/java/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.listing();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 9
    }
  },
  {
    "path": "src/main/java/Command/ShowFunctionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ShowFunctionCommand extends Command{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"list: to show all existing tasks.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"bye: to exit the todo bot.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"delete [task index]: to delete the selected task from the todolist.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"todo [task name]: to add the todo task into the list.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"deadline [task name] /by [dd-MM-uuuu HHmm]: \" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        \"add a deadline task with the specific time and date.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"event [task name] /at [dd-MM-uuuu HHmm]: \" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        \"add a event task with the specific period.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"done [task index]: to mark the specific task as completed.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"filter [d-MM-uuuu]: to show all the tasks with this date.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/Command/WrongCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class WrongCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface.wrongCommand();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 9
    }
  },
  {
    "path": "src/main/java/DateTime/DateTimeManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DateTimeManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static LocalDateTime setDateTime(CharSequence s){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.parse(s,format);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return dt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static LocalDate setDate(CharSequence s){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDate d \u003d LocalDate.parse(s);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return d;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void addDate(task task, String date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String d \u003d sc.next();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String t \u003d sc.next();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String DT \u003d d + \" \" + t;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    LocalDateTime dt \u003d DateTimeManager.setDateTime(DT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    task.setDate(dt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    throw new ErrorExceptions(\"Wrong date time format! dd-mm-yyyy HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Missing time!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Missing Date!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 43
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Parser.InputManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String fileDir \u003d \"./DukeTodoSave.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        InputManager.fileDir(fileDir);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        File save \u003d new File(fileDir);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if(!save.exists()){ // create the text file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"Save file does not exist, creating it now!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                save.createNewFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch(IOException e){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                System.out.println(\"Error creating the save file!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.load(save);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface UI \u003d new UserInterface();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        while(UI.getStop() \u003d\u003d false){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UI.input(sc.nextLine());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UI.parse();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 28,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Errors/ErrorExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ErrorExceptions extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ErrorExceptions(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7
    }
  },
  {
    "path": "src/main/java/File/FileManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import DateTime.DateTimeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FileManager{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void add(String location, String text) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileWriter f \u003d new FileWriter(location,true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.write(text);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.write(System.lineSeparator());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.close();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void edit(String location, ArrayList\u003ctask\u003e store) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileWriter fw \u003d new FileWriter(location);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for(task i : store){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fw.append(TaskManager.read(i));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String getName(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            sc.next(); // skip the symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while(current.charAt(0)!\u003d\u0027(\u0027){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(NoSuchElementException e){}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String getDate(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while(current.charAt(0)!\u003d\u0027(\u0027){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            current \u003d sc.next();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while(current.charAt(current.length()-1)!\u003d\u0027)\u0027){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                date \u003d date + current + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            int l \u003d current.length()-1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String last \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            for(int i\u003d0; i\u003cl; i++){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                last \u003d last + current.charAt(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            date \u003d date + last;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        System.out.println(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter d \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.parse(date,d);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return dt.format(DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static int getType(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            char type \u003d current.charAt(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if(type \u003d\u003d \u0027T\u0027){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if(type \u003d\u003d \u0027D\u0027){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 2;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if(type \u003d\u003d \u0027E\u0027){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 3;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else{"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Error: Wrong item type detected, file might be corrupted!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Failed to load saved file (Type)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static boolean getDone(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            char done \u003d current.charAt(4);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String d \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            d \u003d d + done;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if(d.equals(\"O\")){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if (d.equals(\"X\")){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Error: Cannot determine if item is done, file might be corrupted!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Failed to load saved file (Completed?)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void read(File f, ArrayList\u003ctask\u003e store){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while(sc.hasNext()){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String current \u003d sc.nextLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    int type \u003d FileManager.getType(current);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String name \u003d FileManager.getName(current);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    boolean done \u003d FileManager.getDone(current);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    if(type \u003d\u003d 1){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        Todo t \u003d new Todo(name,\"[T]\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        if(done) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            t.done();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        store.add(t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else if(type \u003d\u003d 2){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            String date \u003d FileManager.getDate(current);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            Deadline d \u003d new Deadline(name,\"[D]\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            if(done) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                d.done();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            DateTimeManager.addDate(d,date);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            store.add(d);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        } catch(ErrorExceptions e){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            System.out.println(e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else{"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            String date \u003d FileManager.getDate(current);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            Event e \u003d new Event(name,\"[E]\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            if(done) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                e.done();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            DateTimeManager.addDate(e,date);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            store.add(e);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        } catch(ErrorExceptions e){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            System.out.println(e);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (ErrorExceptions e){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    System.out.println(e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(FileNotFoundException e){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"File does not exist!\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 158
    }
  },
  {
    "path": "src/main/java/Parser/InputManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class InputManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String fileDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void parse(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String current \u003d sc.next();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.fileDir(fileDir);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if(current.equals(\"bye\")){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseExit.execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        else if(current.equals(\"delete\")){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                ParseDelete.execute(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"There is no such tasks!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        else if(current.equals(\"done\")){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                task t;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                ParseCompleted.execute(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"There is no such tasks!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        else if(current.equals(\"list\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseList.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        else if(current.equals(\"show\")){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseShow.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        else if(current.equals(\"filter\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String date \u003d sc.next();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                ParseFilter.execute(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Missing date!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        else{ // add tasks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseAddTask.execute(current,input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getName(String input, int type) throws ErrorExceptions {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        sc.next(); // skip first commandtype"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (type \u003d\u003d 1) { // todo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    while (current.charAt(0) !\u003d \u0027/\u0027) { // deadline and event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        current \u003d sc.next();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    while (current.charAt(0) !\u003d \u0027/\u0027) { // deadline and event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        current \u003d sc.next();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch(NoSuchElementException e){}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Missing item name!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getDate(String input, int type) throws ErrorExceptions {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String next \u003d sc.next();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String N \u003d \"\" + next.charAt(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while(!N.equals(\"/\")){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                next \u003d sc.next();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                N \u003d \"\" + next.charAt(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String action \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String day \u003d sc.next();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                action \u003d action + day;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String time \u003d sc.next();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    action \u003d action + \" \" + time;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    if(type \u003d\u003d 2){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    else{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        throw new ErrorExceptions(\"Wrong event command format, missing timeslot\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                date \u003d action;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Wrong event command format, missing date\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        catch(NoSuchElementException e){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if(type \u003d\u003d 1){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Wrong deadline or event command format, missing /action: Tasks.task\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void fileDir(String d){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fileDir \u003d d;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getFileDir(){ return fileDir; }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 130
    }
  },
  {
    "path": "src/main/java/Parser/Parse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public abstract class Parse {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() throws ErrorExceptions {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 11
    }
  },
  {
    "path": "src/main/java/Parser/ParseAddTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.WrongCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseAddTask extends Parse{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s, String input) throws ErrorExceptions{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String current \u003d s;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if(current.equals(\"todo\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            AddTodoCommand.execute(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if(current.equals(\"deadline\")){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            AddDeadlineCommand.execute(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if(current.equals(\"event\")){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            AddEventCommand.execute(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            WrongCommand.execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 23
    }
  },
  {
    "path": "src/main/java/Parser/ParseCompleted.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.CompletedCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseCompleted extends Parse{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        CompletedCommand.execute(i);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 10
    }
  },
  {
    "path": "src/main/java/Parser/ParseDelete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseDelete extends Parse{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteCommand.execute(i);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 14
    }
  },
  {
    "path": "src/main/java/Parser/ParseExit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseExit extends Parse{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() throws ErrorExceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ExitCommand.execute();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 11
    }
  },
  {
    "path": "src/main/java/Parser/ParseFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.FilterDateCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseFilter extends Parse{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDate d \u003d LocalDate.parse(date,format);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FilterDateCommand.execute(d);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/Parser/ParseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseList extends Parse{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ListCommand.execute();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 11
    }
  },
  {
    "path": "src/main/java/Parser/ParseShow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ShowFunctionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseShow extends Parse{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ShowFunctionCommand.execute();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 9
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Deadline extends task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Deadline(String name, String type){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 10
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Event extends task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Event(String name, String type){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 10
    }
  },
  {
    "path": "src/main/java/Tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import DateTime.DateTimeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import File.FileManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static ArrayList\u003ctask\u003e store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String fileDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void newTask(String name, String itype, String date, String fileDir) throws ErrorExceptions {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if(itype.equals(\"Todo\")){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Todo(name,\"[T]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if(itype.equals(\"Deadline\")){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Deadline(name,\"[D]\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            DateTimeManager.addDate(Task,date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Event(name,\"[E]\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            DateTimeManager.addDate(Task,date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        store.add(Task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface.addedTask(Task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        save(fileDir,Task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static task getTask(int index){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t \u003d store.get(index-1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void completed(task t){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t.done();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.edit(fileDir, store);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(IOException e){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void delete(int index){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        store.remove(index-1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.edit(fileDir, store);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(IOException e){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static int storeIndex(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return store.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String read(task t){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String done \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if(t.taskCompleted()){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            done \u003d \"[O]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            done \u003d \"[X]\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if(t.taskType().equals(\"[T]\")){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.taskType() + done + \" \" + t.taskName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if(t.taskType().equals(\"[D]\")){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.taskType() + done + \" \" + t.taskName() + \"(by: \" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    t.taskDate().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HHmm\")) + \")\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.taskType() + done + \" \" + t.taskName() + \"(at: \" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    t.taskDate().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HHmm\")) + \")\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void listing(){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"These are your current tasks!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for(task i : store){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(count + \". \" + read(i));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void load(File save){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileManager.read(save,store);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void save(String fileDir,task t){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.add(fileDir,TaskManager.read(t));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(IOException e){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void fileDir(String d){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fileDir \u003d d;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static ArrayList\u003ctask\u003e getStore(){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for(task i : store){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            clone.add(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 104
    }
  },
  {
    "path": "src/main/java/Tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Todo extends task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Todo(String name, String type){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 11
    }
  },
  {
    "path": "src/main/java/Tasks/task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected static int count \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected boolean completed;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public task(String name, String type){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.count++;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String taskName(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public int taskIndex(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean taskCompleted(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void done(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String taskType(){ return this.type; }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public LocalDateTime taskDate(){ return this.date; }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void setDate(LocalDateTime date){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 47
    }
  },
  {
    "path": "src/main/java/UI/InitiateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Parser.InputManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class InitiateParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void parser(String input){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            InputManager.parse(input);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch(ErrorExceptions e){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 14
    }
  },
  {
    "path": "src/main/java/UI/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Parser.InputManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static boolean exit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public UserInterface(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Welcome to MattBot v1.0!\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        \"How may I assist you today?\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void input(String input){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void action(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        InitiateParser.parser(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void failed(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"No commands entered, please enter a command!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void parse(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if(this.input.equals(\"\")){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            failed();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            action();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void stop(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        exit \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Awww, leaving so soon? Hope to see you again!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void done(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Beep Boop Beep .....\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean getStop(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void wrongCommand(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Errroorrrr! Invalid command entered! Cannot compute!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void addedTask(task t){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Task has been successfully added!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"    \" + TaskManager.read(t));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"MattBot is tracking \" + TaskManager.storeIndex() + \" number of Tasks.task!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 59
    }
  },
  {
    "path": "src/main/java/test.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class test {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        LocalDateTime x \u003d LocalDateTime.parse(\"12-12-2020 1200\", DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\"));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDate y \u003d LocalDate.parse(\"12-12-2020\", DateTimeFormatter.ofPattern(\"d-MM-uuuu\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDate x \u003d LocalDate.parse(\"12-12-2020\", DateTimeFormatter.ofPattern(\"d-MM-uuuu\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(x.equals(y));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 12
    }
  },
  {
    "path": "src/test/java/Tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\",\"[D]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2Done \u003d new Deadline(\"Test 2\",\"[D]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 2\",t2.taskName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2Done.done();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false,t2.taskCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true,t2Done.taskCompleted());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[D]\",t2.taskType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt1 \u003d LocalDateTime.parse(\"5-12-2020 1200\",format);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2.setDate(dt1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt1,t2.taskDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 38
    }
  },
  {
    "path": "src/test/java/Tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\",\"[E]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3Done \u003d new Event(\"Test 3\",\"[E]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 3\",t3.taskName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3Done.done();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false,t3.taskCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true,t3Done.taskCompleted());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[E]\",t3.taskType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt2 \u003d LocalDateTime.parse(\"6-12-2020 1200\",format);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3.setDate(dt2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt2,t3.taskDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 38
    }
  },
  {
    "path": "src/test/java/Tasks/TaskManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class TaskManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    String date \u003d \"12-12-1212 1200\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    String dir \u003d \"./TestingSave.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1 \u003d new Todo(\"Test 1\",\"[T]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\",\"[D]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\",\"[E]\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void getTask() throws ErrorExceptions {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 1\",\"[T]\",null,dir);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 2\",\"[D]\",date,dir);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 3\",\"[E]\",date,dir);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void storeIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void read() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void getStore() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 38
    }
  },
  {
    "path": "src/test/java/Tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final Todo t1 \u003d new Todo(\"Test 1\",\"[T]\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1Done \u003d new Todo(\"Test 1\",\"[T]\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 1\",t1.taskName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t1Done.done();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false,t1.taskCompleted());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true,t1Done.taskCompleted());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[T]\",t1.taskType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(null,t1.taskDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 32
    }
  },
  {
    "path": "src/test/java/Tasks/taskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class taskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1 \u003d new Todo(\"Test 1\",\"[T]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\",\"[D]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\",\"[E]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1Done \u003d new Todo(\"Test 1\",\"[T]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2Done \u003d new Deadline(\"Test 2\",\"[D]\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3Done \u003d new Event(\"Test 3\",\"[E]\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 1\",t1.taskName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 2\",t2.taskName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 3\",t3.taskName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t1Done.done();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2Done.done();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3Done.done();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false,t1.taskCompleted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false,t2.taskCompleted());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false,t3.taskCompleted());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true,t1Done.taskCompleted());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true,t2Done.taskCompleted());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true,t3Done.taskCompleted());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[T]\",t1.taskType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[D]\",t2.taskType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[E]\",t3.taskType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt1 \u003d LocalDateTime.parse(\"5-12-2020 1200\",format);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt2 \u003d LocalDateTime.parse(\"6-12-2020 1200\",format);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2.setDate(dt1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3.setDate(dt2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(null,t1.taskDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt1,t2.taskDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt2,t3.taskDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 59
    }
  },
  {
    "path": "text-ui-test/DukeTodoSave.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][✓] test 3 (at: 11 Nov 2020 1100)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] test 1 "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] test 2 (by: 12 Dec 2020 1200)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][X] test 3 (at: 11 Nov 2020 1100)"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "todo test 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by monday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by 12-12-2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by 12-12-2020 1200"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at 11-11-2020"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at 11-11-2020 1100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "show"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "filter"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "filter 12-12-2020"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Errors\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\DateTime\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Tasks\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Command\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\File\\*.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Parser\\*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\UI\\*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 8,
      "-": 20
    }
  }
]
