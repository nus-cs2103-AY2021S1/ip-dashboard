[
  {
    "path": "src/main/java/ChatbotApplication.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeIOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeUnknownException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Front End Facing Script for the UI of ChatbotApplication"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class ChatbotApplication {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String linebreaker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    Duke dukeProgram;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    boolean isChatbotRunning;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class of the ChatbotApplication"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param linebreaker the display aesthetic of the output from Duke"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param pth the path to read a file from."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ChatbotApplication(String linebreaker, String pth){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dukeProgram \u003d new Duke(pth);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        isChatbotRunning \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.linebreaker \u003d linebreaker.repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes a scanner object as user input and initialises the dukeLoop"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param sc UserInput for the Application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void dukeLoop(Scanner sc) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        print(\"Please Enter your name\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String name \u003d sc.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        print(dukeProgram.greeting(name));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String in \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String out \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        while (this.isRunning()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            in \u003d sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                out \u003d dukeProgram.takeInput(in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                if (Boolean.parseBoolean(out)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    this.setChatbotRunning(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    print(out);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            } catch (DukeUnknownException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                print(e.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                this.setChatbotRunning(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                print(e.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            dukeProgram.saveTasks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (DukeIOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            print(e.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        print(dukeProgram.goodbye(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Running state of the Duke Application"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return State of Duke running"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private boolean isRunning() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.isChatbotRunning;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Wraps all text output and prints to the console"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param s String output"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void print(String s){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        System.out.printf(\"%s%s\\n%s%n\",linebreaker,s,linebreaker);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Setter for the status of the Chatbot Object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param b toggle on or off for chatbot"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void setChatbotRunning(boolean b){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isChatbotRunning \u003d b;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Execution Class to contain main loop"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param args args"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String path \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ChatbotApplication d \u003d new ChatbotApplication(\"##\", path);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // To refactor ChatbotApplication to hold mainloop such that UI elements to be added in future"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // can be interactive with the application through ChatbotApplication class directly. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        d.dukeLoop(sc);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 97
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import tasks.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import tasks.TextParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Backend Object Class for the Duke Chatbot Interface"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final TextParser textParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for the Duke Chatbot, if is old initialisation, will read from txt file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Eles it will initialise a new TaskManager class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param path The path of the home initialisation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Duke(String path) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        TaskManager list1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            list1 \u003d new TaskManager(path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (DukeIOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            list1 \u003d new TaskManager(path, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskManager \u003d list1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Manages all internal dataflow from Main or textual interaction"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * with the chatbot, by cleaning it"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param input User Input from the UI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String form of command to output to UI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeException when there is an exception thrown"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String takeInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //To prevent an Security Concern or Code Injection Cleaning of text is first performed and authenticated"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // by adding an ending token"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //TODO eventually to convert the input -\u003e Command with getter for task, deadline(if applicable)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String cleaned \u003d cleanInput(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // There is minimally a sep"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String[] words \u003d cleaned.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        cleaned \u003d cleaned.replace(\" [sep]\", \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // Take out command from the words"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String text_input \u003d cleaned.replaceFirst(words[0], \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //Sep token is added to prevent index errors"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Command c \u003d textParser.parseCommand(words[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        switch (c) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return Boolean.TRUE.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return this.help();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return taskManager.doTask(words[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return taskManager.deleteTask(words[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return taskManager.parseoutput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case SEARCH:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return taskManager.findTasks(words[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return this.taskManager.addToDo(text_input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return this.taskManager.addDeadline(text_input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                return this.taskManager.addEvent(text_input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case BLANK:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                throw new DukeBlankCommandException(\"\u0027\u0027\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            case ERROR:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                throw new DukeCommandException(words[0]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                throw new DukeUnknownException(text_input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * inputs string, processes and cleans the text for the chatbot"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * via adding a ending token seperator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param userInput Direct user input of the string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Cleaned user input"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String cleanInput(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return userInput + \" [sep]\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a help message about all commands supported by Duke"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return help message"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //eventually to add command help \u003ccommand\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"\\t Need some help huh?\\n\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t Heres a list of my commands!\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027bye\u0027 to close the application\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027list\u0027 to list the current list of tasks and their statuses\\n\" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027done\u0027 to set a task as done\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027find\u0027 to find a task using regex or a query text string\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027todo\u0027 to list a untimed task\\n\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027deadline\u0027 to list a timed deadline task, please structure with \" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"[deadline \u003ctask name\u003e /by dd-MM-YYYY]\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027event\u0027 to list a timed event task, please structure with [event \u003ctask name\u003e /at dd-MM-YYYY]\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\t- \u0027help\u0027 to list these commands again\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Greeting from Duke Bot"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param name Name of the user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Sends a greeting from dukebot to the user"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    String greeting(String name) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String logo \u003d \"\\tHello from\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \" ____        _        \\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"|  _ \\\\ _   _| | _____ \\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"| | | | | | | |/ / _ \\\\\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"| |_| | |_| |   \u003c  __/\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\tHello! I\u0027m Duke\\n\\tWhat can I do for you \" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                name +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Goodbye from DukeBot"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param name Name of the user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Sends a goodbye message from dukebot to the user"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    String goodbye(String name){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"Bye \" + name +\"! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Message passing from mainloop to save tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIOException if something goes wrong with the IO Savefiles"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    void saveTasks() throws DukeIOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskManager.saveTasks();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 141,
      "-": 2
    }
  },
  {
    "path": "src/main/java/exceptions/DukeBlankCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a Blank Command in Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeBlankCommandException extends DukeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for DukeBlankCommandException for a blank command "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param s String form of the bad input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeBlankCommandException(String s){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(s,4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/exceptions/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a Invalid Command in Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for DukeCommandException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param bad_cmd the command that is unrecognisable by Duke Application"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeCommandException(String bad_cmd) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(bad_cmd, 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/exceptions/DukeDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a DateTimeError in Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * This error is thrown if the DateTime does not match or is incompatible with the DateTimeFormatter"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for DukeDateTimeException"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd the invalid command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeDateTimeException(String cmd){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(cmd,3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes in the given bad input and the code"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String message(String s) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder b \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t Oops you did not mark your datetime! Not sure what you mean by:\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t \").append(bad_cmd).append(\"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t \").append(s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\": \").append(code.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t Heres a tip, use the \u0027help\u0027 command to learn about my commands!\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return b.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 29
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * DukeException is a classification of errors that pertain to any running problems within Duke Class applications"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Some errors that may occur in the hierarchy of data flow: "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 1. FileRead Error (WIP): For handling stored memory and I/O errors"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 2. Bad Command Given: When a Command that is unknown is given"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 3. No Input given: When in the flow for a given command, no description is detected"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 4. Bad Date Given: For handling datetime parsing errors."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 5. Blank Command Given: For handling when a Blank command is given to a input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 6. Index Error: When a invalid index is given"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 7. UnknownException: For handling anything exceptionally unexpected"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    String bad_cmd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ErrorEncode code;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for a Generic DukeException for any errortype encountered in Duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param bad_cmd The command or user input that is causing the error"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param code The enumeration to encode the error message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected DukeException(String bad_cmd, int code){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.bad_cmd \u003d bad_cmd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.code \u003d ErrorEncode.parseCode(code);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns the template user error message of the DukeException class"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param s String Message to wrap generic error Message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String message to be printed out to player."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String message(String s) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder b \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t Oops you used a invalid command! Not sure what you mean by:\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t \").append(bad_cmd).append(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t \").append(s);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\": \").append(code.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t Heres a tip, use the \u0027help\u0027 command to learn about my commands!\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return b.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return message(super.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 49
    }
  },
  {
    "path": "src/main/java/exceptions/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error type for I/O that appear when trying to perform a read or write command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeIOException extends DukeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for I/O exception class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param bad_cmd the part of the I/O process that is causing an error"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeIOException(String bad_cmd){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(bad_cmd, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/exceptions/DukeIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error type for Index Errors that appear when trying to perform a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    int size;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for a DukeIndexException to indicate that the given command or index is invalid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd Command or Index that is invalid"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param size The actual or given size of the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeIndexException(String cmd, int size){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(cmd,5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes in the given bad input and the code"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String message(String s) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder b \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t Oops you requested for a index ourside the list range or a non numeric index:\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t \").append(bad_cmd).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t \").append(s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\": \").append(code.toString()).append(\" out of \").append(size).append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"\\t Heres a tip, use the \u0027list\u0027 command to see the current tasks!\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return b.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 31
    }
  },
  {
    "path": "src/main/java/exceptions/DukeNoInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a Invalid Description for a task, or if it is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeNoInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for a DukeNoInputException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param bad_cmd the empty command or invalid string"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeNoInputException(String bad_cmd){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(bad_cmd,2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/exceptions/DukeUnknownException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Exception Class to encapsulate any exceptional error that does not fit any of the previous criterion"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeUnknownException extends DukeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for the DukeUnknownException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param m message or input that caused this unexpected error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeUnknownException(String m){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(m,99);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/exceptions/ErrorEncode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public enum ErrorEncode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    FileRead(0, \"A I/O and Filereading Error has occured.\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BadCommandGiven(1, \"I cannot understand what that command means.\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    NoInputGiven(2, \"There was no Input given for the task.\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BadDateGiven(3, \"You did not give a valid date!\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BlankCommand(4, \"No input command was given\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    IndexError(5, \"The index of the task is out of bounds\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    UnknownError(99, \"Something Exceptionally unexpected has happened! We will shut the application down\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final int code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ErrorEncode(int code, String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parse an error code into the Enum List for the given error message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param code int code of error"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return ErrorEncode Enumeration of the type of code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static ErrorEncode parseCode(int code) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ErrorEncode e \u003d UnknownError;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        for (ErrorEncode i : ErrorEncode.values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (i.getCode() \u003d\u003d code) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                e \u003d i;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public int getCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 48
    }
  },
  {
    "path": "src/main/java/tasks/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Command is a Storage for the Enumerations of each type of command that is valid in Duke Chatbot"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ERROR(\"asjdbaksjfbanfjknjkdfnskasd\"),//random string as this is the default enum"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    HELP(\"help\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    SEARCH(\"find\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BLANK(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String commandEncoding;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for the enumeration for commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    Command(String code) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.commandEncoding \u003d code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Getter for command that is encoded in a Command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return exact text that represents a command in Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String  getCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return commandEncoding;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return commandEncoding;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 39
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * The Event class contains the information that is entered by the user into the "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Duke Chatbot Command Line Interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Deadline Class without done status"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used for creating new tasks by the end user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    Deadline(String desc,String date) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Event class with done status"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used by the I/O manager to read tasks and populate the system at runtime"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param b the Done Status of the Task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    Deadline(String desc,String date,Boolean b) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date, b);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDateby() + \")\" + \"You have \" + timeLeft() + \" days left till its due!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the Deadline object class to write to text file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"D\" + SEPERATOR + super.saveTask();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 47
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * The Event class contains the information that is entered by the user into the "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Duke Chatbot Command Line Interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "class Event extends TimedTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Event Class without done status"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used for creating new tasks by the end user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    Event(String desc, String date) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Event class with done status"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used by the I/O manager to read tasks and populate the system at runtime"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param b the Done Status of the Task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */    Event(String desc, String date, Boolean b) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date, b);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDateby() + \")\" + \"You have \" + timeLeft() + \" days left till the event!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the Event object class to write to text file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"E\" + SEPERATOR + super.saveTask();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 44
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * The Task Class is a Abstract Base class for any extending class that acts as "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * a Task object for the Duke Chatbot"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    // SEPERATION Attribute is used to encode the different attributes of the Task Class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String SEPERATOR \u003d \"#sep#\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected boolean isDoneTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for a Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param description String description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param done Done Status of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected Task(String description, boolean done) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isDoneTask \u003d done;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns the check for if the task is already done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Boolean representing whether the task is done"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean done() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.isDoneTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Mark a generic Task object as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void doTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isDoneTask \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Get the description of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return description of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Checklist icon for displaying in the toString Representation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "      * @return either done or not done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String statusIcon() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.isDoneTask ? \"[\\u2713] \" : \"[\\u2718] \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.statusIcon() + this.getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes done status and attributes to encode the String"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return a encoded string version of task for writing to text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.isDoneTask + SEPERATOR + description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 66
    }
  },
  {
    "path": "src/main/java/tasks/TaskIOParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeIOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to perform reading and writing operations on the task list itself."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TaskIOParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final String SAVEFILE \u003d \"save.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final File saveFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    TaskIOParser(String path) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Path taskFile \u003d Paths.get(path, \"src\", \"save\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.saveFile \u003d new File(taskFile.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Load tasks from a text file into memory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return A read text file of tasks to Tasklist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIOException if there is an error in reading a file from disk"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public List\u003cTask\u003e loadTaskList() throws DukeIOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Scanner sc \u003d new Scanner(this.saveFile.toPath().resolve(SAVEFILE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            String[] spl;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    currentLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    spl \u003d currentLine.split(Task.SEPERATOR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    switch (spl[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            tasks.add(new ToDo(spl[2], Boolean.parseBoolean(spl[1])));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            tasks.add(new Deadline(spl[2], spl[3], Boolean.parseBoolean(spl[1])));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            tasks.add(new Event(spl[2], spl[3], Boolean.parseBoolean(spl[1])));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                } catch (DukeDateTimeException ignored) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    // ignored as if the error occurs, we just do not parse that command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IOException fileException) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIOException(\"Oops we couldnt read any file,\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    \" hence we will start from a new save file\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * For initialising new TaskList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return returns a new List of Tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public List\u003cTask\u003e loadNewTaskList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Writes the task list into a textfile"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param taskList the given list of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIOException If there is a IO error in creating or writing to the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void writeTask(List\u003cTask\u003e taskList) throws DukeIOException{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if ( ! saveFile.exists()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                Files.createDirectory(Path.of(saveFile.getPath()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                Files.createFile(Path.of(saveFile.getPath()).resolve(SAVEFILE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                throw new DukeIOException(\"Could not save the file due to directory not created\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            FileWriter fw \u003d new FileWriter(Path.of(saveFile.getPath()).resolve(SAVEFILE).toFile());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            String linesep \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            for (Task t : taskList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                fw.write(t.saveTask());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                fw.write(linesep);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIOException(e.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 103
    }
  },
  {
    "path": "src/main/java/tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * TaskManager is a class to handle where "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final TaskIOParser ioparser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final TextParser textParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public TaskManager(String path) throws DukeIOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.ioparser \u003d new TaskIOParser(path);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskList \u003d ioparser.loadTaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public TaskManager(String path, boolean isNew) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.ioparser \u003d new TaskIOParser(path);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskList \u003d ioparser.loadNewTaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parses the current list and prints the output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String representation of the Task List"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String parseoutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (this.taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            sb.append(\"\\tHere are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                sb.append(\"\\t\").append(i + 1)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        .append(this.taskList.get(i).toString())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            sb.append(\"\\tThere are no tasks in your list!\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String doTask(String index) throws DukeCommandException, DukeIndexException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            int i \u003d Integer.parseInt(index) - 1;//0 indexing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.getTask(i).doTask();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return \"\\tNice! I\u0027ve marked this task as done: \\n\\t\" + this.getTask(i) + \"\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeCommandException(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIndexException(index, taskList.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String deleteTask(String index) throws DukeCommandException, DukeIndexException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            int i \u003d Integer.parseInt(index) - 1;//0 indexing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Task t \u003d this.getTask(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.taskList.remove(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return new StringBuilder().append(\"\\tNoted! I\u0027ve removed this task from your list: \\n\\t\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(t)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(\"\\n\\tNow you have \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(this.taskList.size())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(\" tasks in the list.\\n\").toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeCommandException(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIndexException(index, taskList.size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Get task from the internal list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param index index of the internal list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Task the task at that index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * generic polymorphic data flow for adding a task to the runtime database"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param t task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String to be wrapped and printed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String add(Task t) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskList.add(t);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.echo(t);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns string builder of the task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param t"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String echo(Task t) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new StringBuilder().append(\"\\tGot it. I\u0027ve added this task:\\n\\t  \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(t).append(\"\\n\\tNow you have \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(this.taskList.size())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(\" tasks in the list.\\n\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes in command to add an \"to do\" task to task list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param description Description of the Todo Task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String Representation of the Task to complete"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeNoInputException throw exception if there is no input given to the function"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String addToDo(String description) throws DukeNoInputException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeNoInputException(description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ToDo task \u003d new ToDo(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.add(task);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes in command to add an deadline task to task list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param userInput Input for the user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return returns a string representation of the given input for use by the parser"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException throws the exception from textparser.extractTime"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeNoInputException If no description is given"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String addDeadline(String userInput) throws DukeDateTimeException, DukeNoInputException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeNoInputException(userInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String[] timeSEP \u003d textParser.extractTime(userInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Deadline d \u003d new Deadline(timeSEP[0], timeSEP[1]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return add(d);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes in command to add an event task to task list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd the description of the task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return returns a string representation of the given input for use by the parser"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException throws the exception from textparser.extractTime"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeNoInputException If no description is given"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String addEvent(String cmd) throws DukeDateTimeException, DukeNoInputException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (cmd.isBlank()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeNoInputException(cmd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String[] timeSEP \u003d textParser.extractTime(cmd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Event e \u003d new Event(timeSEP[0], timeSEP[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return add(e);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Message Passing for Tasks"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIOException if the task cannot be read to the file"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void saveTasks() throws DukeIOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ioparser.writeTask(taskList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Regex pattern string search"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param pattern Regex Pattern or substring of description of any task in the list"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String representation of tasks that match the given pattern"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String findTasks(String pattern) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (this.taskList.size()\u003e0) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Pattern stringPattern \u003d Pattern.compile(pattern); "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            for (int i\u003d0; i\u003ctaskList.size(); i++){"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                if (stringPattern.matcher(taskList.get(i).getDescription()).find()){"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    sb.append(\"\\t\").append(i + 1)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            .append(\". \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            .append(this.taskList.get(i).toString())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                            .append(\"\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (sb.toString().isEmpty()){"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                sb.append(\"\\tCannot find a valid task in your list\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            sb.append(\"\\tThere are no tasks in your list!\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 193
    }
  },
  {
    "path": "src/main/java/tasks/TextParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TextParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public TextParser() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Extracts the time from the command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Slightly lenient on wording of datetime marker for Deadlines and Events"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String array of size 2 where [0] is the description and [1] the datetime string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    String[] extractTime(String cmd) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        cmd \u003d cmd.strip();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (cmd.contains(\"/at\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            i \u003d cmd.lastIndexOf(\"/at\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } else if (cmd.contains(\"/by\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            i \u003d cmd.lastIndexOf(\"/by\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            //else throw an error here"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeDateTimeException(cmd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String[] c \u003d new String[2];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        c[0] \u003d cmd.substring(0, i).strip();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        c[1] \u003d cmd.substring(i + 3).strip();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parse String Input into the Command Parser to return a Enum of the command encoded."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd the string command for the Duke Application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Command Enumeration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Command parseCommand(String cmd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String cleaned \u003d cmd.toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Command given \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Command[] commandlst \u003d Command.values();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        for (Command c : Command.values()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (c.getCode().equals(cleaned)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                given \u003d c;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                // if there is a match, there is no other command that would match"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        given \u003d given \u003d\u003d null ? Command.ERROR : given;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return given;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 54
    }
  },
  {
    "path": "src/main/java/tasks/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * TimedTask is a abstract class that inherits from the base Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * class, to add a new field of datetime into this child class which implements such functionalities"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected static final DateTimeFormatter FMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected static final LocalDate NOW \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DateTimeFormatterBuilder dateTimeFormatterBuilder \u003d new DateTimeFormatterBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.appendPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.YEAR_OF_ERA, LocalDateTime.now().getYear());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.MONTH_OF_YEAR, LocalDateTime.now().getMonthValue());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.DAY_OF_MONTH, LocalDateTime.now().getDayOfMonth());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        FMAT \u003d dateTimeFormatterBuilder"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected final LocalDateTime dateby;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for a TimedTask for use by implementing subclasses, in particular to populate "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tasks that have been read from a text save file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc Description of a task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date String that is extracted from user input to be parsed into the constructor for a TimedTask object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param done Done Status of a task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected TimedTask(String desc, String date, Boolean done) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, done);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (NOW.format(FMAT).length() \u003e date.length()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                date \u003d date + NOW.format(FMAT).substring(date.length());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.dateby \u003d LocalDateTime.parse(date, FMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeDateTimeException(\"The String you entered does not meet the \" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    \"required format of \u0027yyyy-MM-dd\u0027 \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for a TimedTask for use by implementing subclasses, in particular to create "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * a new TimedTask class "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc Description of a task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date String that is extracted from user input to be parsed into the constructor for"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *            a TimedTask object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected TimedTask(String desc, String date) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this(desc, date, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Performs a DateTime Arithmetric calculation with the current time of execution of the program"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * in order to display a countdown of days in the Task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return integer representing the number of days left or past since the task was due."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected int timeLeft() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return Period.between(NOW, LocalDate.from(dateby)).getDays();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Get the dateby for the set task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return dateby for the registered task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getDateby() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return dateby.toLocalDate().format(FMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the Event object class to write to text file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return super.saveTask() + SEPERATOR + getDateby();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 91
    }
  },
  {
    "path": "src/main/java/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * ToDo is a Implementation of the Task Class with no additional fields"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * This is the class that stores todo tasks in the Duke program "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for the ToDo Class for use when creating new tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * by end user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ToDo(String desc) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for the ToDo Class for use when populating the list of tasks "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * recorded by the save text file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */    ToDo(String desc, Boolean done) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, done);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the ToDo object class to write to text file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"T\" + SEPERATOR + super.saveTask();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 36
    }
  },
  {
    "path": "src/test/java/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to test Deadline and TimedTask class "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void testDeadlineClassConstructor_invalidString_throwsDukeDateTimeException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(DukeDateTimeException.class, () -\u003e new Deadline(\"description\", \"fail\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void testDeadlineConstructor_autoCorrectsBlankDateField_CorrectstoCurrentDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"random_desc\", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            assertEquals(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd-MM-YYYY\")),deadline.getDateby());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void testTimeLeftArithmetric_noInput_zeroReturned() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"random_desc\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(deadline.timeLeft(), 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 37
    }
  },
  {
    "path": "src/test/java/tasks/TextParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to teast TextParser and all public test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TextParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tests TextParser and ensures that it returns a error if a invalid command is given as input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parseCommand_givenUnknownCommand_thenAssertThrowsException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        TextParser textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(Command.ERROR, textParser.parseCommand(\"hello\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tests that when a expected command is given, the correct enumeration is returned."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parseCommand_givenSeperationToken_AssertTokenSeperatesString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        TextParser textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String test \u003d \"todo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Command expectedResult \u003d Command.TODO;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(expectedResult, textParser.parseCommand(test));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "todo taskAbc 1231"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "deadline Say Hi \\by tofu"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "deadline Say Hi /by tofu"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "abc 123"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "event hello friends /by /by TIME"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "-": 36
    }
  }
]
