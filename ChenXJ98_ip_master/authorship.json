[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    id \u0027groovy\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    mainClassName \u003d \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    archiveBaseName \u003d \u0027Duke\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    archiveVersion \u003d \u00270.2\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    enableAssertions \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 25,
      "-": 42
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "T//0//task1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "D//0// something //2020-12-20//08:00"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 2
    }
  },
  {
    "path": "src/main/java/duke/DateAndTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Represents date and time object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class DateAndTime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Creates a DateAndTime object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param date  String representing date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param time  String representing time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public DateAndTime(String date, String time) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.time \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Get date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  String of date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Get time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  String of time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).withLocale(Locale.UK))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                + \" \" + this.time.format(DateTimeFormatter.ofPattern(\"hh:mma\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 56
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Represents a Deadline task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initialise a deadline object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  Description of deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param date         Date of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param time         Time of event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Deadline(String description, String date, String time) throws InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.setDateTime(date, time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Convert Deadline object to a string representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  String value to be stored in file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return checkIsDone()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                ? \"D//1//\" + getDescription() + \"//\" + getDateTime().getDate() + \"//\" + getDateTime().getTime()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                : \"D//0//\" + getDescription() + \"//\" + getDateTime().getDate() + \"//\" + getDateTime().getTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 40
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private HBox speechBubble;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        dialogBox.speechBubble.getStyleClass().add(\"user-speech-bubble\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        var dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 65
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Represents Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private TaskList tasklist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private boolean isExited;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Creates Duke"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Duke() throws DukeException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isPathDirAtTest \u003d System.getProperty(\"user.dir\").endsWith(\"text-ui-test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isPathDirAtIp \u003d System.getProperty(\"user.dir\").endsWith(\"ip\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String filePath \u003d isPathDirAtTest"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                ? \"test.txt\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                : isPathDirAtIp"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                ? \"data/duke.txt\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                // Creates file in user\u0027s home directory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                : System.getProperty(\"user.home\") + \"/duke.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        TaskList tempTaskList \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            tempTaskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            tempTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.tasklist \u003d tempTaskList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.isExited \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.isExited;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String getResponse(String userInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            Command command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            String replyMessage \u003d command.execute(tasklist, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.isExited \u003d command.isExited();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return replyMessage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return \"Update failed, check file for corruption.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 59,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Represents a Event task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initialise a Event object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  Description of deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param date         Date of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param time         Time of event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Event(String description, String date, String time) throws InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.setDateTime(date, time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Convert Event object to a string representation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  String value to be stored in file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return checkIsDone()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                ? \"E//1//\" + getDescription() + \"//\" + getDateTime().getDate() + \"//\" + getDateTime().getTime()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                : \"E//0//\" + getDescription() + \"//\" + getDateTime().getDate() + \"//\" + getDateTime().getTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 38
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Launch application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Main environment for running application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Main() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 33
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Lisa.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Logo.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initialize Duke Ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        imageView.setImage(logoImage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showIntro(), dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void setDuke() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.duke \u003d new Duke();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            this.dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    DialogBox.getDukeDialog(\"Could not load save file, new task list create.\", dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (duke.isExited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 76
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Parser deals with making sense of the user command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Handles user input and execute relevant command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input  User input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return       Command to execute"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isExitCommand \u003d input.equals(\"bye\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isListCommand \u003d input.equals(\"list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isHelpCommand \u003d input.equals(\"help\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isDoneCommand \u003d input.length() \u003e\u003d 4 \u0026\u0026 input.startsWith(\"done\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isDeleteCommand \u003d input.length() \u003e\u003d 6 \u0026\u0026 input.startsWith(\"delete\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isTodoCommand \u003d input.length() \u003e\u003d 4 \u0026\u0026 input.startsWith(\"todo\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isEventCommand \u003d input.length() \u003e\u003d 5 \u0026\u0026 input.startsWith(\"event\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isDeadlineCommand \u003d input.length() \u003e\u003d 8 \u0026\u0026 input.startsWith(\"deadline\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isFindCommand \u003d input.length() \u003e\u003d 4 \u0026\u0026 input.startsWith(\"find\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isUpdateCommand \u003d input.length() \u003e\u003d 6 \u0026\u0026 input.startsWith(\"update\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidCommand \u003d !(isExitCommand || isListCommand || isHelpCommand || isDoneCommand || isDeleteCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                || isTodoCommand || isEventCommand || isDeadlineCommand || isFindCommand || isUpdateCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isExitCommand) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isListCommand) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isHelpCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isDoneCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new DoneCommand(input.substring(4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isDeleteCommand) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new DeleteCommand(input.substring(6));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isTodoCommand) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new TodoCommand(input.substring(4));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isEventCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new EventCommand(input.substring(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isDeadlineCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new DeadlineCommand(input.substring(8));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isFindCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new FindCommand(input.substring(4));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else if (isUpdateCommand) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return new UpdateCommand(input.substring(6));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            assert isInvalidCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 71
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " *  Storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Creates storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param filePath  Directory path of saved file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        File tempFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean fileNonExistent \u003d !tempFile.exists();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (fileNonExistent) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            tempFile.createNewFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.file \u003d tempFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.path \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Convert file contents into a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Arraylist containing tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() throws FileNotFoundException, InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Scanner sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            String[] split \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            switch (split[0]) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                case \"T\": {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String description \u003d split[2];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    ToDo todo \u003d new ToDo(description);;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    if (split[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                        todo.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    list.add(todo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                case \"D\": {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String description \u003d split[2];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String date \u003d split[3];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String time \u003d split[4];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    Deadline deadline \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    if (split[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                        deadline.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    list.add(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                case \"E\": {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String description \u003d split[2];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String date \u003d split[3];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String time \u003d split[4];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    Event event \u003d new Event(description, date, time);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    if (split[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                        event.markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    list.add(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    assert false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Update data in save file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param list  Arraylist containing Tasks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void updateFile(ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.path);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            text +\u003d task.toData() + System.lineSeparator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        fw.write(text);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 106
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Represents Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    protected DateAndTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initialise a Task object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  Description of Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.dateTime \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Get symbol of isDone status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  String showing either Y or X"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return (isDone ? \"Y\" : \"X\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Mark Task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Mark Task as not done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void markAsNotDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Check Task isDone status."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  boolean value"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean checkIsDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Get Task description."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  String of description"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Set Task description."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  New description"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public DateAndTime getDateTime() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void setDateTime(String date, String time) throws InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (this instanceof ToDo) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidUpdateInputException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.dateTime \u003d new DateAndTime(date, time);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Convert Task object to a string representation."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return  String value to be stored in file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toData () {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return checkIsDone()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                ? \"T//1//\" + getDescription()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                : \"T//0//\" + getDescription();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return \u0027[\u0027 + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 96
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * TaskList object to store and edit Tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate Tasklist containing no Tasks stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate Tasklist containing Tasks represented in storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage  Storage containing tasks details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public TaskList(Storage storage) throws FileNotFoundException, InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.list \u003d storage.getList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Update Storage file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage  Storage to be updated"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void updateData(Storage storage) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        storage.updateFile(list);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Add Task to list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param task  Task to be added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Delete Task from list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param num Int Task number to be deleted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Deleted task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Task deleteTask(int num) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        int index \u003d num - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.list.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Edits description of a Task from list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param num          Int Task number to be deleted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  New description"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Updated task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Task editTaskDescription(int num, String description) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        int index \u003d num -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.list.get(index).setDescription(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Edits date and time of a Task from list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param num   Int Task number to be deleted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param date  String date"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param time  String time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Updated task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidUpdateInputException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Task editTaskDatetime(int num, String date, String time) throws InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        int index \u003d num -1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.list.get(index).setDateTime(date, time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Mark Task as done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param num Int Task number to be mark done"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Task marked as done"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Task markDone(int num) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        int index \u003d num - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.list.get(index).markAsDone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Get number of Tasks stored in TaskList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Int number of number of Tasks"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public int getNumOfTask() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Get number of completed Tasks stored in TaskList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Int number of number of Tasks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private int getNumOfDoneTask() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        int numOfDoneTask \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (task.checkIsDone()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                numOfDoneTask++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return numOfDoneTask;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Find Tasks containing user input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input User input"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String format of tasks found"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String findTasks(String input) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        StringBuilder tasksFound \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (Task task: list) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (task.toString().contains(input)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                tasksFound.append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return tasksFound.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Represent a more readable list of tasks for user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String representing list of tasks"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String showList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        StringBuffer list \u003d new StringBuffer();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        list.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        int listSize \u003d getNumOfTask();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            list.append((i + 1) + \". \" + this.list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return showList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 158
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Represents a ToDo task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initialise a ToDo object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  Description of ToDo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 20
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Ui deals with interactions with the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Introduction message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String GREET \u003d \"Hello! I\u0027m Rose\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            + \"What can I do for you? \u003c3\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            + \"Key in \u0027help\u0027 for assistance.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     *  Farewell message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static final String FAREWELL \u003d \"Bye~ Hope to see you again soon! \u003c3\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param in   InputStream"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param out  PrintStream"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Read use input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String input of user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show user input message(s)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param message  Message(s) to be shown"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Message(s)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String show(String ... message) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            response +\u003d m;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show intro message."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Intro message"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showIntro() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(GREET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show farewell message."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Farewell message"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showFarewell() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(FAREWELL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show help message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Help message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showHelp() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"I\u0027m glad to help you! :D\\n\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"I can help keep track of your tasks, here are the commands available:\\n\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Add ToDo task\\n    - \u0027todo DESCRIPTION\u0027\\n\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Add Deadline task\\n    - \u0027deadline DESCRIPTION /by yyyy/mm/dd HHmm\u0027\\n\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Add Event task\\n    - \u0027event DESCRIPTION /at yyyy/mm/dd HHmm\u0027\\n\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Show task list\\n    - \u0027list\u0027\\n\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Complete task\\n    - \u0027done INDEX\u0027\\n\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Delete task\\n    - \u0027delete INDEX\u0027\\n\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Find task\\n    - \u0027find KEYWORD\u0027\\n\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Update task\\n    - \u0027update INDEX [d/DESCRIPTION] [dt/yyyy/mm/dd HHmm]\u0027\\n\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"Exit application\\n    - \u0027bye\u0027\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show error message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param e  Exception shown"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Error message"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showError(DukeException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show add message."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param task      Task added"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasklist  TaskList which Task is stored"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Add message"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showAdd(Task task, TaskList tasklist) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"Got it. I\u0027ve added this task:\\n\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"\\nNow you have \" + tasklist.getNumOfTask() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show done message."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param task Task done"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Done message"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showDone(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"Nice! I\u0027ve marked this task as done:\\n\", task + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show delete message."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param task      Task added"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasklist  TaskList which Task is stored"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Delete message"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showDelete(Task task, TaskList tasklist) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String taskMsg \u003d \"Deleted: \" + task + \"\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"Noted. I\u0027ve removed this task:\\n\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \"\\nNow you have \" + tasklist.getNumOfTask() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show update file failure."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Update fail message"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showFileError() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"Update file failed\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show tasks found."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input       Keyword"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasksFound  Tasks found"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Return user tasks containing keyword"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showTaskFound(String input, String tasksFound) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"Here are the matching tasks in your list that contains \\\"\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                +  input + \"\\\":\\n\", tasksFound);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show no tasks found."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input  Keyword"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return No tasks found message"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showNoTaskFound(String input) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"Sorry. No tasks found containing \\\"\" + input + \"\\\".\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Show update message."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param num   Update task index"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param task  Task to update"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Update task message"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public static String showUpdate(int num, Task task) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return show(\"Okay I have updated task \" + num + \":\\n\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 183
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Command deals with all commands recognisable by Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public abstract boolean isExited();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public abstract String execute(TaskList taskList, Storage storage) throws DukeException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDeadlineInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.NullDeadlineInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * DeadlineCommand deals with deadline input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate DeadlineCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input  User input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws NullDeadlineInputException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public DeadlineCommand(String input) throws NullDeadlineInputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isEmptyInput \u003d input.trim().length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isNotEmptyInput \u003d !isEmptyInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isEmptyInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new NullDeadlineInputException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isNotEmptyInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Re-format date to be readable."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param date  Input date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String setDate(String date) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String[] split \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectLength \u003d date.length() !\u003d 10;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectFormat \u003d split.length !\u003d 3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidDate \u003d isIncorrectLength || isIncorrectFormat;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidDate \u003d !isInvalidDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String setDate \u003d split[0] + \"-\" + split[1] + \"-\" + split[2];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return setDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Re-format time to be readable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param time  Input time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String setTime(String time) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectLength \u003d time.length() !\u003d 4;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidTime \u003d !isIncorrectLength;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isIncorrectLength) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String setTime \u003d time.substring(0, 2) + \":\" + time.substring(2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return setTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Create Deadline to be added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  Deadline description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param datetime     Deadline date and time"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Deadline"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Deadline createDeadline(String description, String datetime) throws InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String[] datetimeArray \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidFormat \u003d datetimeArray.length !\u003d 2;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidFormat \u003d !isInvalidFormat;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidFormat) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidFormat;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String date \u003d setDate(datetimeArray[0]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String time \u003d setTime(datetimeArray[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return new Deadline(description, date, time);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Execute deadline command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasklist  TaskList for Deadline to be added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage   Storage to update save file"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDeadlineInputException"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws InvalidDeadlineInputException,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            IOException, InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String[] deadlineTaskArray \u003d input.split(\" /by \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidInput \u003d deadlineTaskArray.length !\u003d 2;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidInput \u003d ! isInvalidInput;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidInput) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDeadlineInputException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidInput;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String deadlineDescription \u003d deadlineTaskArray[0];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String by \u003d deadlineTaskArray[1];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Deadline deadline \u003d createDeadline(deadlineDescription, by);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        tasklist.addTask(deadline);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        tasklist.updateData(storage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return Ui.showAdd(deadline, tasklist);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 134
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDeleteInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * DeleteCommand deals with delete input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate DeleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input  User input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Execute delete command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasklist TaskList for delete to be performed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage  Storage to update save file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDeleteInputException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws InvalidDeleteInputException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            int num \u003d Integer.parseInt(input.replaceAll(\"\\\\s+\", \"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            boolean isInvalidInput \u003d num \u003e tasklist.getNumOfTask() || num \u003c\u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            boolean isValidInput \u003d !isInvalidInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (isInvalidInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new InvalidDeleteInputException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            assert isValidInput;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            Task task \u003d tasklist.deleteTask(num);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            tasklist.updateData(storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return Ui.showDelete(task, tasklist);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (NumberFormatException | IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDeleteInputException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 57
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDoneInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * DoneCommand deals with done input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate DoneCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input User input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Execute done command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasklist  TaskList for Done to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage   Storage to update save file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDoneInputException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws InvalidDoneInputException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            int num \u003d Integer.parseInt(input.replaceAll(\"\\\\s+\", \"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            boolean isInvalidInput \u003d num \u003e tasklist.getNumOfTask() || num \u003c\u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            boolean isValidInput \u003d !isInvalidInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (isInvalidInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new InvalidDoneInputException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            assert isValidInput;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            Task task \u003d tasklist.markDone(num);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            tasklist.updateData(storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return Ui.showDone(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDoneInputException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 57
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidEventInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.NullEventInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * EventCommand deals with event input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate EventCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input  User input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws NullEventInputException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public EventCommand(String input) throws NullEventInputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new NullEventInputException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Re-format date to be readable."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param date  Input date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String setDate(String date) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String[] split \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectLength \u003d date.length() !\u003d 10;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectFormat \u003d split.length !\u003d 3;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidDate \u003d isIncorrectLength || isIncorrectFormat;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidDate \u003d !isInvalidDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String setDate \u003d split[0] + \"-\" + split[1] + \"-\" + split[2];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return setDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Re-format time to be readable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param time  Input time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String setTime(String time) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectLength \u003d time.length() !\u003d 4;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidTime \u003d !isIncorrectLength;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isIncorrectLength) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String setTime \u003d time.substring(0, 2) + \":\" + time.substring(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return setTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Create Event to be added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param description  Event description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param datetime     Event date and time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return Event"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Event createEvent(String description, String datetime) throws InvalidDateTimeException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String[] datetimeArray \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (datetimeArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String date \u003d setDate(datetimeArray[0]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String time \u003d setTime(datetimeArray[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return new Event(description, date, time);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Execute event command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasks    TaskList for Event to be added"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage  Storage to update save file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidEventInputException"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws InvalidEventInputException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            InvalidDateTimeException, IOException, InvalidUpdateInputException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String[] eventTaskArray \u003d input.split(\" /at \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidInput \u003d eventTaskArray.length !\u003d 2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidInput \u003d !isInvalidInput;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidInput) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidEventInputException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidInput;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String eventDescription \u003d eventTaskArray[0];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String at \u003d eventTaskArray[1];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Event event \u003d createEvent(eventDescription, at);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        tasks.updateData(storage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return Ui.showAdd(event, tasks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 126
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * ExitCommand deals with bye input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return Ui.showFarewell();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 20
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.NullFindInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * FindCommand deals with find input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate FindCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input User input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws NullFindInputException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public FindCommand(String input) throws NullFindInputException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        //Removes all whitespaces and checks if input is empty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidInput \u003d input.replaceAll(\"\\\\s+\", \"\").length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidInput \u003d !isInvalidInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new NullFindInputException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.input \u003d input.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Execute find command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param taskList  TaskList for delete to be performed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage   Storage to update save file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String tasksFound \u003d taskList.findTasks(this.input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (tasksFound.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return Ui.showNoTaskFound(this.input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            return Ui.showTaskFound(this.input, tasksFound);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 52
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * HelpCommand deals with help input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return Ui.showHelp();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 20
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * ListCommand deals with list input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return Ui.show(tasklist.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 20
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidTodoInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * TodoCommand deals with todo input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiate Todo Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param input  User input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidTodoInputException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public TodoCommand(String input) throws InvalidTodoInputException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidInput \u003d input.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidInput \u003d ! isInvalidInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidTodoInputException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.input \u003d input.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Execute todo command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param tasklist  TaskList for ToDo to be added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param storage   Storage to update save file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        ToDo todo \u003d new ToDo(this.input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        tasklist.addTask(todo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        tasklist.updateData(storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return Ui.showAdd(todo, tasklist);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 52
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidUpdateInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * UpdateCommand deals with update input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public UpdateCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        this.input \u003d input.startsWith(\" \")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                ? input.substring(1)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                : input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Re-format date to be readable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param date  Input date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String setDate(String date) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String[] split \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectLength \u003d date.length() !\u003d 10;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectFormat \u003d split.length !\u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isInvalidDate \u003d isIncorrectLength || isIncorrectFormat;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidDate \u003d !isInvalidDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isInvalidDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String setDate \u003d split[0] + \"-\" + split[1] + \"-\" + split[2];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return setDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Re-format time to be readable."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @param time  Input time"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @return String time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private String setTime(String time) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isIncorrectLength \u003d time.length() !\u003d 4;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        boolean isValidTime \u003d !isIncorrectLength;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        if (isIncorrectLength) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assert isValidTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String setTime \u003d time.substring(0, 2) + \":\" + time.substring(2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return setTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public boolean isExited() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new InvalidUpdateInputException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            int num \u003d Integer.parseInt(input.substring(0, 1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            boolean isInvalidInput \u003d num \u003e taskList.getNumOfTask() || num \u003c\u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (isInvalidInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new InvalidUpdateInputException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            boolean containsEditDescription \u003d input.contains(\" d/\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            boolean containsEditDatetime \u003d input.contains(\" dt/\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            if (containsEditDescription \u0026\u0026 !containsEditDatetime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                String description \u003d input.substring(input.indexOf(\" d/\") + 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                Task task \u003d taskList.editTaskDescription(num, description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                taskList.updateData(storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                return Ui.showUpdate(num, task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            } else if (containsEditDatetime \u0026\u0026 !containsEditDescription) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                String datetime \u003d input.substring(input.indexOf(\" dt/\") + 4);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                String[] datetimeArray \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                if (datetimeArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                String date \u003d setDate(datetimeArray[0]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                String time \u003d setTime(datetimeArray[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                Task task \u003d taskList.editTaskDatetime(num, date, time);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                taskList.updateData(storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                return Ui.showUpdate(num, task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            } else if (containsEditDescription \u0026\u0026 containsEditDatetime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                if (input.indexOf(\" dt/\") \u003c input.indexOf(\" d/\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    throw new InvalidUpdateInputException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String description \u003d input.substring(input.indexOf(\" d/\") + 3, input.indexOf(\" dt/\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String datetime \u003d input.substring(input.indexOf(\" dt/\") + 4);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String[] datetimeArray \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    if (datetimeArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                        throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String date \u003d setDate(datetimeArray[0]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    String time \u003d setTime(datetimeArray[1]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    Task taskUpdateDescription \u003d taskList.editTaskDescription(num, description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    Task taskUpdateDatetime \u003d taskList.editTaskDatetime(num, date, time);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    taskList.updateData(storage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    return Ui.showUpdate(num, taskUpdateDatetime);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                throw new InvalidUpdateInputException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        } catch (NumberFormatException | IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throw new InvalidUpdateInputException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 130
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception for Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public DukeException(String err) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing invalid date and time input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidDateTimeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"Invalid Date and Time input.\\n\" + \"Format: yyyy/mm/dd HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing invalid input after deadline command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidDeadlineInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiates exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidDeadlineInputException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! Invalid input after deadline command.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                + \"(Format: deadline DESCRIPTION /by yyyy/mm/dd HHmm)\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeleteInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing invalid input after delete command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidDeleteInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidDeleteInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! Invalid input after delete command. Keep index within list range. (Example format: delete 1)\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDoneInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing invalid input after done command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidDoneInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidDoneInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! Invalid input after done command. Keep index within list range. (Example format: done INDEX)\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing invalid input after event command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidEventInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     * Initiates exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidEventInputException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! Invalid input after event command. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                + \"(Format: event DESCRIPTION /at yyyy/mm/dd HHmm)\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing general invalid input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTodoInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing empty todo input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidTodoInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidTodoInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidUpdateInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class InvalidUpdateInputException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public InvalidUpdateInputException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! Invalid input after delete command. Keep index within list range.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                + \"Format (for ToDo): update INDEX [d/DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                + \"Format (for Deadline and Event): update INDEX [d/DESCRIPTION] [dt/yyyy/mm/dd HHmm]\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                + \"Provide at least one of the optional fields.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                + \"Follow field order if both are added.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/NullDeadlineInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing empty deadline input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class NullDeadlineInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public NullDeadlineInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/NullEventInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing event task input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class NullEventInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public NullEventInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/NullFindInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " * Exception representing find input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class NullFindInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public NullFindInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        super(\"OOPS!!! Invalid find input.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 11
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003cHBox fx:id\u003d\"speechBubble\" maxHeight\u003d\"-Infinity\" styleClass\u003d\"speech-bubble\" stylesheets\u003d\"@../styles/base.css\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"662.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #212F3D  #212F3D;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"609.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"52.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-text-fill: white; -fx-background-color: #273746#273746 #273746#273746;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"609.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"52.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #212F3D  #212F3D;\" text\u003d\"Send\" textFill\u003d\"#ffaccb\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"53.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"397.0\" style\u003d\"-fx-background-color: #273746#273746;\" styleClass\u003d\"body\" stylesheets\u003d\"@../styles/base.css\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"52.0\" fitWidth\u003d\"132.0\" layoutX\u003d\"141.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 21
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void setUP() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    private \u003cT extends Command\u003e void parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        Command result \u003d parser.parse(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void parse_exitCommand_parsedCorrectly() throws DukeException, IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String input \u003d \"bye\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void parse_listCommand_parsedCorrectly() throws DukeException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String input \u003d \"list\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void parse_command_parsedIncorrectly() throws DukeException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        String input \u003d \"bad command\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 48
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "todo task1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "todo task2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "deadline task3 /by Sunday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "event task4 /at Mon 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "asdg"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenXJ98"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ChenXJ98": 1,
      "-": 37
    }
  }
]
