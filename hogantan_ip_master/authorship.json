[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Deadline(String description, String dateTime) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 14
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "//Posh Version of Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Characteristics of Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isChatting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Constants Command Enum"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    enum Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DELETE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Constructor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Characteristic of Duke"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isChatting \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Initialise Duke"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void startChat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Initialisation Message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String greeting \u003d \"Oh Golly! Who do we have here?\\nThe name\u0027s Duke, how can I be of assistance?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Initialise scanner to prompt user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Duke runs until user inputs \"bye\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        while (this.isChatting) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //Obtain user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String user_input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //Obtain command keyword base on user_input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Command user_command \u003d getCommand(user_input.trim()); //trim to get rid of unnecessary whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //Conditionals based on command keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //list command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (user_command.equals(Command.LIST)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    getToDoList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //bye command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                else if (user_command.equals(Command.BYE)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    exitDuke();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //to do command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                else if (user_command.equals(Command.TODO)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    addToDo(user_input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //deadline command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                else if (user_command.equals(Command.DEADLINE)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    addDeadline(user_input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //event command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                else if (user_command.equals(Command.EVENT)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    addEvent(user_input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //done command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                else if (user_command.equals(Command.DONE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    markTaskDone(user_input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //delete command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                else if (user_command.equals(Command.DELETE)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    deleteTask(user_input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //To catch inappropriate commands that have not been identified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    System.out.println(\"OH FIDDLESTICKS, WE SEEM TO HAVE HIT A BUMP ON THE ROAD HERE.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Converts the tasklist arraylist into a labelled list message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void getToDoList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask + \"\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String getListMsg \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String emptyListMsg \u003d \"Oh dear, it seems that your tasks list is empty!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(emptyListMsg);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(getListMsg);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(output);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void getTotalTasksMsg() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(\"Marvellous! Now you have \" + this.taskList.size() + \" tasks in your list!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Done command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Then, check if user input contains apt integer"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void markTaskDone(String user_input) throws OutOfTaskListException, NotNumberException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Get number after done keyword"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String int_substring \u003d user_input.substring(5);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            int int_substring_converted \u003d Integer.parseInt(int_substring);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task currentTask \u003d this.taskList.get(int_substring_converted - 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            currentTask.markAsDone();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String markDoneMsg \u003d \"Splendid! I\u0027ve marked the following task as done:\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(markDoneMsg);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(\"  [\" + currentTask.getStatusIcon() + \"] \" + currentTask.getDescription());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new NotNumberException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new OutOfTaskListException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Delete command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Then, check if user input contains apt integer"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void deleteTask(String user_input) throws OutOfTaskListException, NotNumberException{"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Get number after done keyword"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String int_substring \u003d user_input.substring(7);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            int int_substring_converted \u003d Integer.parseInt(int_substring);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task currentTask \u003d this.taskList.get(int_substring_converted - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.taskList.remove(currentTask);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String deleteMsg \u003d \"No worries, the following task has been deleted from your list:\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(deleteMsg);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(\"  [\" + currentTask.getStatusIcon() + \"] \" + currentTask.getDescription());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            getTotalTasksMsg();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new NotNumberException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new OutOfTaskListException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Adds a To Do task to the task list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void addToDo(String user_input) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo newTask \u003d new ToDo(user_input.substring(5));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        addedToListMsg();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(\"\\t\" + newTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        getTotalTasksMsg();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Adds a Deadline task to the task list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void addDeadline(String user_input) throws InaptFollowUpCommandException,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            MissingFollowUpCommandException, EmptyTaskException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String dateTime \u003d getDateTime(user_input, Command.DEADLINE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String deadlineDescription \u003d user_input.substring(9, user_input.indexOf(\"/\")).trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (deadlineDescription.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new EmptyTaskException(\"deadline\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Deadline newTask \u003d new Deadline(deadlineDescription, dateTime);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.taskList.add(newTask);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            addedToListMsg();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(\"\\t\" + newTask);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            getTotalTasksMsg();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Adds an Event task to the task list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void addEvent(String user_input) throws InaptFollowUpCommandException,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            MissingFollowUpCommandException, EmptyTaskException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String dateTime \u003d getDateTime(user_input, Command.EVENT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String eventDescription \u003d user_input.substring(6, user_input.indexOf(\"/\")).trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (eventDescription.isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new EmptyTaskException(\"event\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Event newTask \u003d new Event(eventDescription, dateTime);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.taskList.add(newTask);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            addedToListMsg();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(\"\\t\" + newTask);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            getTotalTasksMsg();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //To print out add to list message"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void addedToListMsg() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String add_to_listMsg \u003d \"No worries, the following task has been added to your list:\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(add_to_listMsg);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //To obtain date and time that follows a /by or /at"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String getDateTime(String user_input, Command command) throws InaptFollowUpCommandException,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            MissingFollowUpCommandException, EmptyTaskException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        int slashIndex \u003d user_input.indexOf(\"/\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (slashIndex !\u003d -1) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (checkFollowUpCommand(user_input, slashIndex, command)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String dateTime \u003d user_input.substring(slashIndex + 4).trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (dateTime.isEmpty()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new EmptyTaskException(\"date and time\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return dateTime;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new InaptFollowUpCommandException();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new MissingFollowUpCommandException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Use to check whether commands such as event and deadline have follow up \u0027/\u0027 command"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean checkFollowUpCommand(String user_input, int slashIndex, Command command) throws  EmptyTaskException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (user_input.charAt(slashIndex + 1) \u003d\u003d \u0027b\u0027 \u0026\u0026 user_input.charAt(slashIndex + 2) \u003d\u003d \u0027y\u0027"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    \u0026\u0026 user_input.charAt(slashIndex + 3) \u003d\u003d \u0027 \u0027 \u0026\u0026 command.equals(Command.DEADLINE)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (user_input.charAt(slashIndex + 1) \u003d\u003d \u0027a\u0027 \u0026\u0026 user_input.charAt(slashIndex + 2) \u003d\u003d \u0027t\u0027"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    \u0026\u0026 user_input.charAt(slashIndex + 3) \u003d\u003d \u0027 \u0027 \u0026\u0026 command.equals(Command.EVENT)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new EmptyTaskException(\"date and time\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //To obtain first keyword of user input"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Command getCommand(String user_input) throws InaptCommandException, EmptyTaskException,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            UnspecifiedItemException{"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //For commands that have text following a keyword"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (user_input.contains(\" \")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            int indexOfFirstSpace \u003d user_input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String keyword;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (indexOfFirstSpace \u003d\u003d 4) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                keyword \u003d user_input.substring(0, 4);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (keyword.equals(\"todo\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return Command.TODO;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else if (keyword.equals(\"done\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return Command.DONE;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new InaptCommandException();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (indexOfFirstSpace \u003d\u003d 5) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                keyword \u003d user_input.substring(0, 5);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (keyword.equals(\"event\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return Command.EVENT;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new InaptCommandException();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (indexOfFirstSpace \u003d\u003d 6) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                keyword \u003d user_input.substring(0, 6);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (keyword.equals(\"delete\")) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return Command.DELETE;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new InaptCommandException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (indexOfFirstSpace \u003d\u003d 8){"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                keyword \u003d user_input.substring(0, 8);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (keyword.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return Command.DEADLINE;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new InaptCommandException();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new InaptCommandException();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //For commands that do not have any text after keyword"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (user_input.equals(\"list\")) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return Command.LIST;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (user_input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return Command.BYE;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (user_input.equals(\"todo\") || user_input.equals(\"deadline\") || user_input.equals(\"event\"))  {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new EmptyTaskException(user_input);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (user_input.equals(\"delete\") || user_input.equals(\"done\")) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new UnspecifiedItemException(user_input);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new InaptCommandException();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void exitDuke() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String parting \u003d \"Well, I\u0027m utterly knackered! Cheerios!\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(parting);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isChatting \u003d false;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Initialise Duke"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Duke chatBot \u003d new Duke();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Start chatting with Bot"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        chatBot.startChat();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "hogantan": 300
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "//Base exception class for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String emptyTaskMsg1 \u003d \"My apologies, the description of a \";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String emptyTaskMsg2 \u003d \" cannot be empty.\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EmptyTaskException(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(emptyTaskMsg1 + command + emptyTaskMsg2);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Event(String description, String dateTime) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 14
    }
  },
  {
    "path": "src/main/java/InaptCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "//Thrown when a unrecognised command is used by user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class InaptCommandException extends DukeException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String inaptCommandMsg \u003d \"I beg you pardon, I did not catch what you are saying.\";;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public InaptCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(inaptCommandMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 7
    }
  },
  {
    "path": "src/main/java/InaptFollowUpCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class InaptFollowUpCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String outOfBoundsMsg \u003d \"My apologies, please enter an appropriate \u0027/\u0027 command!\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public InaptFollowUpCommandException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(outOfBoundsMsg);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/MissingFollowUpCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class MissingFollowUpCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String outOfBoundsMsg \u003d \"Oh dear, there seems to be a missing \u0027/\u0027 command.\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public MissingFollowUpCommandException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(outOfBoundsMsg);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/NotNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class NotNumberException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String numberFormatMsg \u003d \"My apologies, please key in an appropriate number!\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public NotNumberException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(numberFormatMsg);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/OutOfTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class OutOfTaskListException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String outOfBoundsMsg \u003d \"Oh dear, it seems like that item does not exist in your list!\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public OutOfTaskListException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(outOfBoundsMsg);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "//A task represents an item in Duke\u0027s todoList"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "//A task consists of:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "// 1) Content Description"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "// 2) Status (isDone or not)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //Constructor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //return tick or cross symbol accordingly"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 37
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 10
    }
  },
  {
    "path": "src/main/java/UnspecifiedItemException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class UnspecifiedItemException extends  DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String unspecifiedItemMsg1 \u003d \"My apologies, please specify an item when using the \";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String unspecifiedItemMsg2 \u003d \" command.\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public UnspecifiedItemException(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(unspecifiedItemMsg1 + command + unspecifiedItemMsg2);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done123"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 123"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done bye"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list123"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list 123"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline2 /byThisDay"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline3 /atThatDay"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event2 /atThisDay"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event3 /byThatDay"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hogantan": 39
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "SET MY_PATH\u003d \"C:\\Users\\hogan\\Desktop\\Computer Science\\CS2103T Y2S1\\iP\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "if not exist %MY_PATH%\\bin mkdir %MY_PATH%\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hogantan": 4
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "cp EXPECTED.TXT.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "hogantan": 3
    }
  },
  {
    "path": "text-ui-test/testidea.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test done command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command (out of bound)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test done command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command (w/o space by)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command (w/o space at)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command (w/o space at)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command (w/o space by)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete done command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete delete command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete todo command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete event command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete deadline command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test empty command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test bye"
      }
    ],
    "authorContributionMap": {
      "hogantan": 39
    }
  }
]
