[
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "T!@%0!@%todo!@%"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "E!@%0!@%birthday !@%2020-12-12!@%"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "E!@%0!@%birtday !@%2020-12-12!@%12:12"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "E!@%0!@%birthday !@%2020-12-12!@%"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "E!@%0!@%bday !@%2020-12-12!@%"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "E!@%0!@%bday !@%2020-12-12!@%"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "E!@%0!@%bdayy !@%2020-12-12!@%"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "T!@%0!@%more birthdays!@%"
      }
    ],
    "authorContributionMap": {
      "kc-98": 8
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * The command class handles any command related situations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private boolean terminated;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Command() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.terminated \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Executes the respective command based on accepted keywords."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param userInput The input given by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param tasks The current list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param storage The current storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DukeException If any Duke-type exceptions are thrown."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void execute(String userInput, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //determining user input type via the first word"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] splitInput \u003d splitUserInput(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String keyWord \u003d getKeyWord(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (keyWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            byeCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            terminated \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"help\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            helpCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            listCommand(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            doneCommand(splitInput, tasks, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            deleteCommand(tasks, splitInput, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"todo\") || keyWord.equals(\"deadline\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                || keyWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            findCommand(tasks, splitInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }  else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DukeException(\"Unknown execution error.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isTerminated() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.terminated;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String[] splitUserInput(String userInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return userInput.split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void welcomeCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Calls for the required ui methods when list keyword is used."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param tasks The current list of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void listCommand(TaskList tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (tasks.noOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ui.showNoPastTasks();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ui.showPastTasks(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void byeCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void helpCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Calls for the required methods to handle a task deleting situation."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param tasks The current list of tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param splitInput A valid string array is of length 2, index 1 being the task number to"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     denote as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param ui The UI object used."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param storage The storage used."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DeleteFailureException If the deleting process fails."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void deleteCommand(TaskList tasks, String[] splitInput, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DeleteFailureException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        tasks.deleteTask(tasks, splitInput, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        storage.updateTaskFile(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Calls for the required methods to handle a done situation."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param splitInput A valid string array is of length 2, index 1 being the task number"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     to denote as done."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param tasks The current list of tasks."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param storage The storage used."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws InvalidFormatException If the input format is wrong."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void doneCommand(String[] splitInput, TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws InvalidFormatException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //checks the formatting of user input"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (splitInput.length \u003e 2) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new InvalidFormatException(\"Please use the correct format: done \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        tasks.doneTask(splitInput, tasks, ui);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        storage.updateTaskFile(tasks);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Calls for the required methods to handle a task adding situation."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param splitInput A valid string array is of length 2, index 1 being the task number to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     denote as done."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param keyWord The type of task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param tasks The current list of tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param storage The storage used."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DukeException If any Duke-type exceptions are encountered."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void addTaskCommand(String[] splitInput, String keyWord, TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] data \u003d processUserTaskInput(splitInput);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        tasks.addTask(data, keyWord, tasks, ui);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        storage.updateTaskFile(tasks);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Obtains the keyword in the user input to determine command needed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param input The given keyword from user input."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws InvalidKeyWordException If the keyword not valid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getKeyWord(String input) throws InvalidKeyWordException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] splitInput \u003d splitUserInput(input);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (parser.isValidKeyWord(splitInput[0])) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return splitInput[0];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new InvalidKeyWordException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what \" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    \"that means :-(\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Processes the user input (for task commands only)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param array Contains strings for task type, description, date/time if applicable."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws InvalidFormatException If the input format is wrong."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws EmptyTaskException If input task is not tagged with description."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public static String[] processUserTaskInput(String[] array) throws InvalidFormatException,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            EmptyTaskException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (array.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (array[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new EmptyTaskException(\"☹ OOPS!!! The description of a event cannot \" +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        \"be empty.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else if (array[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new EmptyTaskException(\"☹ OOPS!!! The description of a deadline cannot \" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        \"be empty.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else if (array[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new EmptyTaskException(\"☹ OOPS!!! The description of a todo cannot \" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        \"be empty.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new InvalidFormatException(\"Invalid format error!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (array[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String des \u003d \"\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String date \u003d \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            boolean toBreak \u003d false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            int pivotIndex \u003d 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (int i \u003d 1; i \u003c array.length; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (array[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //sets the breaking point of input"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    toBreak \u003d true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    pivotIndex \u003d i;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //before breaking point"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    des +\u003d array[i] + \" \";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String[] dateTimeArr \u003d Arrays.copyOfRange(array, pivotIndex + 1, array.length);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //after breaking point, there should only be a maximum of 2 items remaining"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //first item is date, second item is time"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (dateTimeArr.length \u003e 2) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new InvalidFormatException(\"Please enter a valid format\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (dateTimeArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //only has date but no time"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                } else if (dateTimeArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //has date and time"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    time \u003d dateTimeArr[1];"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //index 0 is description, index 1 is date, index 2 is time"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (toBreak \u0026\u0026 parser.isValidDate(date) \u0026\u0026 parser.isValidTime(time)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return new String[]{des, date, time};"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                //exception is thrown when the format is off, since there is no breaking point, or"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                //if the input date or time is wrong"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new InvalidFormatException(\"Please use the correct format and include the \" +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        \"keyword: /at\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (array[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String des \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String date \u003d \"\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            boolean toBreak \u003d false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            int pivotIndex \u003d 0;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (int i \u003d 1; i \u003c array.length; i++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (array[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //sets the breaking point of input"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    toBreak \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    pivotIndex \u003d i;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //before breaking point"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    des +\u003d array[i] + \" \";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String[] dateTimeArr \u003d Arrays.copyOfRange(array, pivotIndex + 1, array.length);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //after breaking point, there should only be a maximum of 2 items remaining"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //first item is date, second item is time"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (dateTimeArr.length \u003e 2) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new InvalidFormatException(\"Please enter a valid format\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (dateTimeArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //only has date but no time"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                } else if (dateTimeArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //has date and time"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    time \u003d dateTimeArr[1];"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //index 0 is description, index 1 is date, index 2 is time"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (toBreak \u0026\u0026 parser.isValidDate(date) \u0026\u0026 parser.isValidTime(time)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return new String[]{des, date, time};"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                //exception is thrown when the format is off, since there is no breaking point, or"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                //if the input date or time is wrong"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new InvalidFormatException(\"Please use the correct format and include the \" +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        \"keyword: /by\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (array[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String des \u003d \"\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            for (int i \u003d 1; i \u003c array.length; i++) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                des +\u003d array[i];"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (i !\u003d array.length - 1) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //adds a white space in between each word"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    des +\u003d \" \";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //index 0 is description"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return new String[]{des};"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new String[]{};"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void findCommand(TaskList tasks, String[] splitInput) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String desToFind \u003d \"\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            desToFind +\u003d splitInput[i];"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (i !\u003d splitInput.length - 1) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                desToFind +\u003d \" \";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        ui.showFoundTasks(tasks, desToFind);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 288
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a Deadline type task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    protected LocalDate localDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    protected LocalTime localTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Deadline(String description, String localDate, String localTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.localDate \u003d localDate !\u003d \"\" ? LocalDate.parse(localDate) : null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.localTime \u003d localTime !\u003d \"\" ? LocalTime.parse(localTime) : null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.localDate !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.localTime !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Prints the description of the Deadline, with date/time if available."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return String describing the Deadline task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String toReturn \u003d \"[D]\" + super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (this.hasDate()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (this.hasTime()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                toReturn +\u003d \" (by: \" + this.localDate.format(("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))) + \" \" + this.localTime + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                toReturn +\u003d \" (by: \" + this.localDate.format(("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 50
    }
  },
  {
    "path": "src/main/java/DeleteFailureException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a Duke-type exception that is thrown when a task fails to be deleted."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class DeleteFailureException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    DeleteFailureException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 14
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines the Duke class for the end-user to manage tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Duke(String dirPath, String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.storage \u003d new Storage(dirPath, filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.tasks \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.command \u003d new Command();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        new Duke(\"./data\", \"./data/tasks.txt\").run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /** Runs the Duke program. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        command.welcomeCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        boolean terminated \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        while (!terminated \u0026\u0026 scanner.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                command.execute(userInput, tasks, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                terminated \u003d command.isTerminated();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                ui.showErrorMessage(ex.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                ui.showLineBreak();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 42,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a class for all Duke-type exceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 13
    }
  },
  {
    "path": "src/main/java/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a Duke-type exception that is thrown due to an empty task input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    EmptyTaskException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 14
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a Event type task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    protected LocalDate localDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    protected LocalTime localTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Event(String description, String localDate, String localTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.localDate \u003d localDate !\u003d \"\" ? LocalDate.parse(localDate) : null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.localTime \u003d localTime !\u003d \"\" ? LocalTime.parse(localTime) : null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.localDate !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean hasTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.localTime !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Prints the description of the Event, with date/time if available."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return String describing the Event task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String toReturn \u003d \"[E]\" + super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (this.hasDate()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (this.hasTime()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                toReturn +\u003d \" (at: \" + this.localDate.format(("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))) + \" \" + this.localTime + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                toReturn +\u003d \" (at: \" + this.localDate.format(("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 51
    }
  },
  {
    "path": "src/main/java/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a Duke-type exception that is thrown when an input format is rejected."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class InvalidFormatException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    InvalidFormatException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 14
    }
  },
  {
    "path": "src/main/java/InvalidKeyWordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a Duke-type exception that is thrown due to an invalid keyword."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class InvalidKeyWordException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    InvalidKeyWordException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 13
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * The Parser class handles all the parsing needed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Checks if the given keyword is exists in the pool of reserved keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param word The given string describing the keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return True if the given string belongs to the set of reserved keywords, false otherwise."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isValidKeyWord(String word) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        Set\u003cString\u003e reservedKeyWords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"help\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"list\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"find\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"done\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"delete\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"deadline\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"event\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"todo\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        reservedKeyWords.add(\"bye\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return reservedKeyWords.contains(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Checks if the given date string is valid for parsing in LocalDate."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param date The given string describing date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return True if the given string complies the criteria, false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (date.equals(\"\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] splitDate \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (splitDate.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String year \u003d splitDate[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String month \u003d splitDate[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String day \u003d splitDate[2];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (year.length() \u003d\u003d 4 \u0026\u0026 month.length() \u003d\u003d 2 \u0026\u0026 day.length() \u003d\u003d 2 \u0026\u0026"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    Integer.parseInt(month) \u003c\u003d 12 \u0026\u0026 Integer.parseInt(month) \u003e\u003d 1 \u0026\u0026"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    Integer.parseInt(day) \u003e\u003d 1 \u0026\u0026 Integer.parseInt(day) \u003c\u003d 31) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Checks if the given time string is valid for parsing in LocalTime."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param time The given string describing time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return True if the given string complies the criteria, false otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //checks the format of a given time and checks if it is acceptable"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (time.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] splitTime \u003d time.split(\":\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (splitTime.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String hour \u003d splitTime[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String minutes \u003d splitTime[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (hour.length() \u003d\u003d 2 \u0026\u0026 minutes.length() \u003d\u003d 2 \u0026\u0026 Integer.parseInt(hour) \u003c\u003d 24"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(hour) \u003e\u003d 0 \u0026\u0026 Integer.parseInt(minutes) \u003e\u003d 0"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(minutes) \u003c\u003d 60) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 81
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * A class that handles any storage related changes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    String dirPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Storage(String dirPath, String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.dirPath \u003d dirPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Loads data from the hard drive, creates any missing directories or files."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return An arraylist consisting of the saved tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    //handles loading of data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public List\u003cTask\u003e loadData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            File dataDir \u003d new File(this.dirPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            File tasks \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (dataDir.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                //directory exists, now check if tasks.txt exists"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                boolean isCreated \u003d tasks.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (isCreated) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //tasks.txt does not exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //tasks.txt exists"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    List\u003cTask\u003e current \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    BufferedReader br \u003d new BufferedReader(new FileReader(this.filePath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    String line \u003d br.readLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    while (line !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        //parses the string to become a task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        current.add(readTaskFromFile(line));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        line \u003d br.readLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    br.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    return current;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                //if directory does not exist, make directory and tasks txt file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (dataDir.mkdir()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //data folder directory successful, make tasks.txt file now"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    tasks.createNewFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //fail to make data folder directory"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    System.out.println(\"Error: Directory failed to be created\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Creates a new tasks.txt file with updated tasks that overwrites the existing one."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param taskList The new taskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void updateTaskFile(TaskList taskList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            //create temp text file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            String tempDir \u003d this.dirPath + \"/temp.txt\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            File temp \u003d new File(tempDir);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            File oldFile \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (temp.createNewFile()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                BufferedWriter output \u003d new BufferedWriter(new FileWriter(temp, true));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                String toAppend;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                for (int i \u003d 0; i \u003c taskList.noOfTasks(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    Task curr \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //adds the updated task list to temp file by converting it to the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //form: \u003ctype\u003e!@%\u003cstatus\u003e!@%\u003cdescription\u003e!@%\u003cdate/time(if applicable)\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    //so that our parser can read"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    if (curr instanceof ToDo) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        ToDo todo \u003d (ToDo) curr;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        toAppend \u003d \"T!@%\" + (todo.isDone ? \"1!@%\" : \"0!@%\") + todo.description"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                + \"!@%\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    } else if (curr instanceof Deadline) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        Deadline deadline \u003d (Deadline) curr;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        toAppend \u003d \"D!@%\" + (deadline.isDone ? \"1!@%\" : \"0!@%\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                + deadline.description + \"!@%\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                (deadline.localDate !\u003d null ? deadline.localDate : \"\") + \"!@%\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                + (deadline.localTime !\u003d null ? deadline.localTime : \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        Event event \u003d (Event) curr;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        toAppend \u003d \"E!@%\" + (event.isDone ? \"1!@%\" : \"0!@%\") + event.description"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                + \"!@%\" + (event.localDate !\u003d null ? event.localDate : \"\") + \"!@%\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                                + (event.localTime !\u003d null ? event.localTime : \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    output.write(toAppend);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    output.newLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                output.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                //checks if old file is deleted and new file is renamed"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (oldFile.delete()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    if (!temp.renameTo(oldFile)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        System.out.println(\"Error in renaming new file.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    System.out.println(\"Error in deleting old file\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                System.out.println(\"Error: temp file not created\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Reads a string of line in the file and returns a task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param string The string to be read and converted into a task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @return The converted task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Task readTaskFromFile(String string) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //\u003ctype\u003e!@%\u003cstatus\u003e!@%\u003cdescription\u003e!@%\u003cdate\u003e(if applicable)!@%\u003ctime\u003e(if applicable)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String[] data \u003d string.split(\"!@%\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String type \u003d data[0];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String status \u003d data[1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String description \u003d data[2];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //checks if the data consists of date and time using the split array size"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (data.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            date \u003d data[3];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (data.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            date \u003d data[3];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            time \u003d data[4];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        //returns a task based on type, marks a task as done if status is 1"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ToDo todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                todo.markDone();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return todo;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                deadline.markDone();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Event event \u003d new Event(description, date, time);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                event.markDone();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 178
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a generic type task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 30
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * A class that handles any changes that occur within the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * list of tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public int noOfTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void setTask(int index, Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.taskList.set(index, task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Deletes a task at the given index from the taskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param current The current taskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param input A valid string array is of length 2, index 1 being the task number to delete."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param ui The UI object used."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @throws DeleteFailureException  If array size is not 2 or index is out of bounds."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void deleteTask(TaskList current, String[] input, Ui ui) throws DeleteFailureException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (input.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                TaskList updated \u003d current;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                Task removedTask \u003d current.getTask(taskNumber - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                current.removeTask(taskNumber - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                ui.showSuccessfulDelete(removedTask, updated.noOfTasks());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                throw new DeleteFailureException(\"Duke says: Please try again with a \" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                        \"valid format.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            throw new DeleteFailureException(\"Duke says: Please try again with a valid number.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Adds a task at the given index from the taskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param data The processed data, index 0 being description, 1 being date and 2 being time"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     if applicable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param keyWord The type of task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param tasks The current list of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param ui The UI object used."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void addTask(String[] data, String keyWord, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (keyWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ToDo toDo \u003d new ToDo(data[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            tasks.addTask(toDo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ui.showTasksAdded(toDo, tasks.noOfTasks());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Deadline deadline \u003d new Deadline(data[0], data[1], data[2]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            tasks.addTask(deadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ui.showTasksAdded(deadline, tasks.noOfTasks());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else if (keyWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Event event \u003d new Event(data[0], data[1], data[2]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            tasks.addTask(event);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ui.showTasksAdded(event, tasks.noOfTasks());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Denotes a task to be done at the given index in the taskList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param splitInput A valid string array is of length 2, index 1 being the task number to"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *     denote as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param tasks The current list of tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param ui The UI object used."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void doneTask(String[] splitInput, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(splitInput[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            Task doneTask \u003d tasks.getTask(taskNumber - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            doneTask.markDone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            tasks.setTask(taskNumber - 1, doneTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ui.showTaskIsDone(doneTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            ui.showInvalidTaskNumber();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 108
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a ToDo type task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * Defines a UI class, that handles any UI in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @author Kai Chao"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": " * @since 26-08-2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /** Divides each command call. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    final String LINE_BREAK \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /** Prints the welcome logo and how to start. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"What can I do for you today? (type: \\\"help\\\" to view list of commands)\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                LINE_BREAK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showLineBreak() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(LINE_BREAK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Duke says: Goodbye and have a nice day! :D\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /** Prints the available input commands and their respective formatting requirements. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showHelp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"list: displays a sequential view of past inputs\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"find \u003ctask description\u003e: finds all the tasks matched\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"done \u003ctask number\u003e: denotes a task as done by checking it\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"delete \u003ctask number\u003e: deletes an existing task\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e \u003cHH:MM\u003e: adds a deadline with \" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"desired date/time\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e \u003cHH:MM\u003e: adds an event with \" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"desired date/time\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"todo \u003cdescription\u003e: adds a todo task\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                \"bye: terminates program\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showNoPastTasks() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Duke says: No past tasks found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * Prints the list of stored tasks in hard drive in sequential order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     * @param taskList The current tasks in hard drive."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kc-98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showPastTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Here are your tasks:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.noOfTasks(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            System.out.println(i + \". \" + taskList.getTask(i - 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"If you wish to mark a task as completed, input: done \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showTaskIsDone(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Duke says: Good Job! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showInvalidTaskNumber() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Duke says: Please try again with a valid task number\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showSuccessfulDelete(Task removedTask, int remaining) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Successfully deleted the task!\\n\" + removedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        showRemainingTasks(remaining);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showRemainingTasks(int remaining) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"You now have \" + remaining + \" task(s) in your list\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showTasksAdded(Task task, int remaining) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(\"Duke added into your task list:\\n\" + task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        showRemainingTasks(remaining);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showErrorMessage(String message) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void showFoundTasks(TaskList taskList, String desToFind) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        int number \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        boolean hasResults \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.noOfTasks(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            if (taskList.getTask(i - 1).description.contains(desToFind)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                if (!hasResults) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                    System.out.println(\"Here are your tasks:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                System.out.println(number + \". \" + taskList.getTask(i - 1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                hasResults \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        if (hasResults) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            System.out.println(\"If you wish to mark a task as completed, input: done \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kc-98"
        },
        "content": "            System.out.println(\"Sorry there are no matching results :(\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 112
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testDateNoTime() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(\"[D][✘] birthday (by: Dec 12 2020)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                new Deadline(\"birthday\",  \"2020-12-12\", \"\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testDateWithTime() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(\"[D][✘] birthday (by: Dec 12 2020 12:12)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                new Deadline(\"birthday\",  \"2020-12-12\", \"12:12\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 19
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testDateNoTime() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(\"[E][✘] birthday (at: Dec 12 2020)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                new Event(\"birthday\",  \"2020-12-12\", \"\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testDateWithTime() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(\"[E][✘] birthday (at: Dec 12 2020 12:12)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "                new Event(\"birthday\",  \"2020-12-12\", \"12:12\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testTimeFormat() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(true, new Parser().isValidTime(\"00:00\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testTimeRange() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(false, new Parser().isValidTime(\"99:99\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testDateFormat() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(false, new Parser().isValidDate(\"2020/20/20\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    public void testDateRange() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": "        assertEquals(false, new Parser().isValidDate(\"2020-99-99\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kc-98": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kc-98"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kc-98"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kc-98"
        },
        "content": "event"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kc-98"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kc-98"
        },
        "content": "done"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kc-98"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kc-98"
        },
        "content": "todo dishes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kc-98"
        },
        "content": "event birthday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kc-98"
        },
        "content": "event birthday /at 2020-12-12"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "event birthday /at 2020-12-12 12:12"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kc-98"
        },
        "content": "event birthday /at 2020/12/12"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kc-98"
        },
        "content": "deadline homework"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kc-98"
        },
        "content": "deadline homework /by 2020-12-12"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kc-98"
        },
        "content": "deadline homework /by 2020-12-12 12:12"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kc-98"
        },
        "content": "deadline homework /by 2020-1212"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kc-98"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kc-98"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kc-98"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kc-98"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kc-98"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "kc-98": 20
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kc-98"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kc-98"
        },
        "content": "echo Batch to delete file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kc-98"
        },
        "content": "del .\\data\\tasks.txt /f /q"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kc-98"
        },
        "content": "echo Done!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kc-98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kc-98": 8,
      "-": 20
    }
  }
]
