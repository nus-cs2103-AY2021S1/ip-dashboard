[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    testCompile \u0027org.junit.jupiter:junit-jupiter-params:5.6.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 21,
      "-": 42
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.ExitOperation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.Operation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.StartOperation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.ui.CommandLineUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents the main driver class of Duke. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskStorage taskStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final CommandParser commandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method for Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskStorage \u003d TaskStorage.createTaskStorage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Initialises Duke by running a \u003ccode\u003eStartOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return status of the \u003ccode\u003eStartOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new StartOperation(this.taskList, this.taskStorage).execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Stops Duke by running a \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return status of the \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result stopDuke() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new ExitOperation(this.taskStorage, this.taskList).execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Runs an associated \u003ccode\u003eOperation\u003c/code\u003e based on \u003ccode\u003einput\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param input the \u003ccode\u003eString\u003c/code\u003e the user inputs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e of the status of the executed \u003ccode\u003eOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result getResponse(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Operation operation \u003d this.commandParser.parse(input, this.taskList, this.taskStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return operation.execute();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new Result(false, exception.getMessage(), false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Drives the execution of \u003ccode\u003eDuke\u003c/code\u003e in the CLI."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * It handles any exceptions thrown by printing them onto the \u003ccode\u003eCommandLineUi\u003c/code\u003e."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void runDuke() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        CommandLineUi ui \u003d new CommandLineUi();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String initializeStatus \u003d initialize().getMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ui.showStartMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ui.showLoadStatus(initializeStatus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String command \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Operation operation \u003d this.commandParser.parse(command, this.taskList, this.taskStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                String status \u003d operation.execute().getMessage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ui.showStatus(status);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                isExit \u003d operation.isExit();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            } catch (DukeException exception) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ui.showStatus(exception.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Driver method for the running of Duke in the CLI."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        duke.runDuke();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 92,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** A launcher class to workaround classpath issues. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 10
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** A GUI for Duke using FXML. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String loadMessage \u003d duke.initialize().getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke, loadMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.duke.stopDuke();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 37
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents the exceptions in Duke. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param msg the error message \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the exception into a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the error message \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeOperationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents exceptions when Duke is not able to execute its internal operations. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DukeOperationException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param message the error message \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DukeOperationException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents exceptions when Duke is not able to parse commands."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * These parse errors can be from the user input or when reading in the saved"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * task storage text file."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DukeParseException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param message the error message \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DukeParseException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 17
    }
  },
  {
    "path": "src/main/java/duke/operation/AddDeadlineOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the operation that adds \u003ccode\u003eDeadlines\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AddDeadlineOperation extends AddOperation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param dateTime the datetime when the \u003ccode\u003eDeadline\u003c/code\u003e occurs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that \u003ccode\u003eDeadline\u003c/code\u003e is to be added into."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AddDeadlineOperation(String description, LocalDateTime dateTime, TaskList taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Deadline createTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Deadline.createDeadline(this.description, this.dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 35
    }
  },
  {
    "path": "src/main/java/duke/operation/AddEventOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the operation that adds \u003ccode\u003eEvents\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AddEventOperation extends AddOperation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the time when the \u003ccode\u003eEvent\u003c/code\u003e occurs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that \u003ccode\u003eEvent\u003c/code\u003e is to be added into."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AddEventOperation(String description, LocalDateTime time, TaskList taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Event createTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Event.createEvent(this.description, this.time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 35
    }
  },
  {
    "path": "src/main/java/duke/operation/AddOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Abstract class representing the operations that add various types of \u003ccode\u003eTasks\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public abstract class AddOperation extends Operation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that \u003ccode\u003eTask\u003c/code\u003e is to be added into."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    AddOperation(String description, TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract Task createTask();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Adds the \u003ccode\u003eTask\u003c/code\u003e into the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eResult\u003c/code\u003e specifying the \u003ccode\u003eTask\u003c/code\u003e that has been added and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * the total number of \u003ccode\u003eTasks\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task newTask \u003d createTask();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assert !newTask.isTaskCompleted() : \"Ensure task created is not yet completed\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList.addTask(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d \"I have added the task:\\n\" + newTask + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + String.format(\"You now have %d tasks.\", this.taskList.getCurrCapacity());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Result(true, message, this.isExit());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 57
    }
  },
  {
    "path": "src/main/java/duke/operation/AddTodoOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents operation that adds \u003ccode\u003eTodos\u003c/code\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AddTodoOperation extends AddOperation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that \u003ccode\u003eTodo\u003c/code\u003e is to be added into."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AddTodoOperation(String description, TaskList taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates the associated \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Todo createTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Todo.createTodo(this.description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 30
    }
  },
  {
    "path": "src/main/java/duke/operation/DeleteOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that deletes a \u003ccode\u003eTask\u003c/code\u003e from the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DeleteOperation extends Operation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList taskList the \u003ccode\u003eTaskList\u003c/code\u003e containing the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                 \u003ccode\u003eTask\u003c/code\u003e that is to be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the associated index of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DeleteOperation(TaskList taskList, int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Removes the given \u003ccode\u003eTask\u003c/code\u003e from the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eResult\u003c/code\u003e indicating the task that has been removed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!this.taskList.isValidIndex(index)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String message \u003d \"The index you have passed in cannot be found in the list of tasks.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new Result(false, message, this.isExit());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task removed \u003d this.taskList.removeTask(this.index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + removed + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + String.format(\"You now have %d tasks in the list\", this.taskList.getCurrCapacity());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Result(true, message, this.isExit());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 53
    }
  },
  {
    "path": "src/main/java/duke/operation/DoneOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that changes a specified \u003ccode\u003eTask\u003c/code\u003e into completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DoneOperation extends Operation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e containing the \u003ccode\u003eTask\u003c/code\u003e that is to be changed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the associated index of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DoneOperation(TaskList taskList, int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the operation by converting the specified \u003ccode\u003eTask\u003c/code\u003e into completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eResult\u003c/code\u003e indicating if the \u003ccode\u003eTask\u003c/code\u003e has been completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!this.taskList.isValidIndex(index)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String message \u003d \"The index you have passed in cannot be found in the list of tasks.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new Result(false, message, this.isExit());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task completed \u003d this.taskList.completeTask(this.index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d \"You have completed this task:\\n\" + completed;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Result(true, message, this.isExit());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 50
    }
  },
  {
    "path": "src/main/java/duke/operation/ExitOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeOperationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that exits from Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ExitOperation extends Operation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskStorage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param storage the \u003ccode\u003eTaskStorage\u003c/code\u003e that allows the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                \u003ccode\u003etaskList\u003c/code\u003e to be saved into a text file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that is to be saved."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public ExitOperation(TaskStorage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Saves the \u003ccode\u003eTasks\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e into a text file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * If the file cannot be saved, Duke will not exit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a goodbye message and an indication if the \u003ccode\u003eTasks\u003c/code\u003e cannot be saved."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.storage.saveToDisk(this.taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String message \u003d \"Goodbye. Hope to see you again soon.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new Result(true, message, this.isExit());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeOperationException exception) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String message \u003d \"The list of tasks cannot be saved.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new Result(false, message + exception.getMessage(), false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 54
    }
  },
  {
    "path": "src/main/java/duke/operation/FindOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that finds \u003ccode\u003eTasks\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e associated with a search word."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class FindOperation extends Operation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String searchWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that is to be searched on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param searchWord the \u003ccode\u003eString\u003c/code\u003e that \u003ccode\u003eTaskList\u003c/code\u003e is to be search with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public FindOperation(TaskList taskList, String searchWord) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.searchWord \u003d searchWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the operation by retrieving all \u003ccode\u003eTasks\u003c/code\u003e in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * \u003ccode\u003eTaskList\u003c/code\u003e containing the search word."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eResult\u003c/code\u003e containing all \u003ccode\u003eTasks\u003c/code\u003e found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String foundTasks \u003d this.taskList.findString(searchWord);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (foundTasks.equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            message \u003d String.format(\"I have found no tasks that match: %s\", this.searchWord);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            message \u003d \"Here are the tasks I have found:\\n\" + foundTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Result(true, message, this.isExit());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 51
    }
  },
  {
    "path": "src/main/java/duke/operation/ListOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that lists all the \u003ccode\u003eTasks\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ListOperation extends Operation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that is to be printed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public ListOperation(TaskList taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the operation by retrieving all \u003ccode\u003eTasks\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eResult\u003c/code\u003e containing all \u003ccode\u003eTasks\u003c/code\u003e stored in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d \"Here are your tasks:\\n\" + this.taskList.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Result(true, message, this.isExit());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 41
    }
  },
  {
    "path": "src/main/java/duke/operation/Operation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents instructions to execute commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public abstract class Operation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks is the \u003ccode\u003eOperation\u003c/code\u003e is an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the \u003ccode\u003eOperation\u003c/code\u003e is an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the series of instructions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eResult\u003c/code\u003e containing the status of the execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract Result execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 22
    }
  },
  {
    "path": "src/main/java/duke/operation/StartOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.operation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * The operation that initialises Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class StartOperation extends Operation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final TaskStorage taskStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e for the storage file to be loaded onto."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskStorage the \u003ccode\u003eTaskStorage\u003c/code\u003e instance that will read in the storage file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public StartOperation(TaskList taskList, TaskStorage taskStorage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskStorage \u003d taskStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Specifies that this is not an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Executes the operation by loading the storage file into \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eResult\u003c/code\u003e containing the status of the loading."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d this.taskStorage.loadTaskList(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Result(true, message, this.isExit());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 45
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddDeadlineOperation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddEventOperation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddTodoOperation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.DeleteOperation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.DoneOperation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.ExitOperation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.FindOperation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.ListOperation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.Operation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Utils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** The class that converts commands passed into Duke into \u003ccode\u003eOperations\u003c/code\u003e.*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private ExitOperation createExitOp(TaskStorage storage, TaskList list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new ExitOperation(storage, list);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private ListOperation createListOp(TaskList list) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new ListOperation(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private DoneOperation createDoneOp(String[] commands, TaskList list) throws DukeParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.DONE.isValidLength(commands.length)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure a number is passed after a done command.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!Utils.hasInteger(commands, 1)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure a number is passed after a done command.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int index \u003d Integer.parseInt(commands[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new DoneOperation(list, index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private AddTodoOperation createTodoOp(String[] commands, TaskList list) throws DukeParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.TODO.isValidLength(commands.length)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure there is description for a todo item.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d Utils.concatenate(commands, 1, commands.length);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AddTodoOperation(description, list);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private AddDeadlineOperation createDeadlineOp("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String[] commands, TaskList list) throws DukeParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.DEADLINE.isValidLength(commands.length)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \"Ensure there is a description and a datetime for a deadline command.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int splitIndex \u003d Utils.getIndexOf(commands, Deadline.DEADLINE_BREAK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (splitIndex \u003d\u003d Utils.INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure an indication of \u0027/by\u0027 after a deadline command.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d Utils.concatenate(commands, 1, splitIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String datetime \u003d Utils.concatenate(commands, splitIndex + 1, commands.length);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime parsedDateTime \u003d Datetime.parseDateTimeString(datetime, Deadline.DATE_FORMAT_INPUT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AddDeadlineOperation(description, parsedDateTime, list);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private AddEventOperation createEventOp(String[] commands, TaskList list) throws DukeParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.EVENT.isValidLength(commands.length)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure there is a description and a time for an event command.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int splitIndex \u003d Utils.getIndexOf(commands, Event.EVENT_BREAK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (splitIndex \u003d\u003d Utils.INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure an indication of \u0027/at\u0027 after an event command.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d Utils.concatenate(commands, 1, splitIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String time \u003d Utils.concatenate(commands, splitIndex + 1, commands.length);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime parsedTime \u003d Datetime.parseTimeString(time, Event.TIME_FORMAT_INPUT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AddEventOperation(description, parsedTime, list);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private DeleteOperation createDeleteOp(String[] commands, TaskList list) throws DukeParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.DELETE.isValidLength(commands.length)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure a number is passed after a delete command.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!Utils.hasInteger(commands, 1)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"Ensure a number is passed after a delete command.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int index \u003d Integer.parseInt(commands[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new DeleteOperation(list, index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private FindOperation createFindOp(String[] commands, TaskList list) throws DukeParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (CommandType.FIND.isValidLength(commands.length)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \"Ensure a keyword is entered so that I can perform a search with it.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String searchWord \u003d Utils.concatenate(commands, 1, commands.length);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new FindOperation(list, searchWord);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses the String given into an \u003ccode\u003eOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param commandString the \u003ccode\u003eString\u003c/code\u003e that has been input by the user into Duke."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param list the \u003ccode\u003eTaskList\u003c/code\u003e to be operated on."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskStorage the \u003ccode\u003eTaskStorage\u003c/code\u003e to be operated on,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                    if the \u003ccode\u003eOperation\u003c/code\u003e requires a save of the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the parsed \u003ccode\u003eOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeParseException if the command cannot be recognised or is erroneous."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Operation parse(String commandString, TaskList list, TaskStorage taskStorage)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throws DukeParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] commands \u003d commandString.split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assert commands.length \u003e 0 : \"There is an error in the splitting of the command\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Function\u003cCommandType, Boolean\u003e isCommand \u003d commandType -\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                commandType.getCommand().equals(commands[0]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (isCommand.apply(CommandType.BYE)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createExitOp(taskStorage, list);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (isCommand.apply(CommandType.LIST)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createListOp(list);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (isCommand.apply(CommandType.DONE)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDoneOp(commands, list);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (isCommand.apply(CommandType.TODO)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createTodoOp(commands, list);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (isCommand.apply(CommandType.DEADLINE)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDeadlineOp(commands, list);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (isCommand.apply(CommandType.EVENT)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createEventOp(commands, list);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (isCommand.apply(CommandType.DELETE)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDeleteOp(commands, list);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (isCommand.apply(CommandType.FIND)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createFindOp(commands, list);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(\"This command is not recognised unfortunately.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 143
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents the various commands that Duke supports. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    BYE(\"bye\", 1),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    LIST(\"list\", 1),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    DONE(\"done\", 2),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    TODO(\"todo\", 2),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    DEADLINE(\"deadline\", 4),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    EVENT(\"event\", 4),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    DELETE(\"delete\", 2),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    FIND(\"find\", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int commandLength;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param command the \u003ccode\u003eString\u003c/code\u003e of the actual command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param commandLength the minimum number of parameters needed for the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                      This includes the \u003ccode\u003ecommand\u003c/code\u003e itself."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    CommandType(String command, int commandLength) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.commandLength \u003d commandLength;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the \u003ccode\u003ecommand\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e of the \u003ccode\u003ecommand\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the given \u003ccode\u003elength\u003c/code\u003e is smaller than the \u003ccode\u003ecommandLength\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * If such, it also means that the \u003ccode\u003ecommand\u003c/code\u003e is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003erue\u003c/code\u003e if the given length is greater than or equal to the \u003ccode\u003ecommandLength\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isValidLength(int length) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.commandLength \u003e length;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 44
    }
  },
  {
    "path": "src/main/java/duke/parser/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents a class that parses lines in a saved storage text file into actual \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * This class also parses \u003ccode\u003eTask\u003c/code\u003e into \u003ccode\u003eStrings\u003c/code\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * that will be saved into the storage text file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String IS_COMPLETED \u003d \"1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String NOT_COMPLETED \u003d \"0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DELIMITER \u003d \";\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int TODO_COMMAND_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int DEADLINE_COMMAND_LENGTH \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int EVENT_COMMAND_LENGTH \u003d 4;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int COMPLETED_INDEX \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int DESCRIPTION_INDEX \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int DATETIME_INDEX \u003d 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts a \u003ccode\u003eTask\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e that will be saved onto the storage text file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param task the \u003ccode\u003eTask\u003c/code\u003e that is to be converted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String convertTaskToStorage(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String symbol \u003d task.getTaskSymbol();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String completed \u003d task.isTaskCompleted()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ? DELIMITER + IS_COMPLETED"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                : DELIMITER + NOT_COMPLETED;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String description \u003d DELIMITER + task.getTaskDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String datetime \u003d task.getTaskDatetime().map(d -\u003e DELIMITER + d).orElse(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return symbol + completed + description + datetime + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Todo createTodo(String[] storageTask, String storageTaskString) throws DukeParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (storageTask.length \u003c TODO_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears this todo: \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(msg);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isCompleted \u003d storageTask[COMPLETED_INDEX].equals(IS_COMPLETED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Todo(storageTask[DESCRIPTION_INDEX], isCompleted);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Deadline createDeadline("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String[] storageTask, String storageTaskString) throws DukeParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (storageTask.length \u003c DEADLINE_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears this deadline: \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(msg);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isCompleted \u003d storageTask[COMPLETED_INDEX].equals(IS_COMPLETED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LocalDateTime dateTime \u003d Datetime.parseDateTimeString("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    storageTask[DATETIME_INDEX], Deadline.DATE_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new Deadline(storageTask[DESCRIPTION_INDEX], isCompleted, dateTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeParseException exception) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears the datetime of this deadline: \u0027%s\u0027 is corrupted. \","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    storageTaskString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(msg + exception.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Event createEvent(String[] storageTask, String storageTaskString) throws DukeParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (storageTask.length \u003c EVENT_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears this event: \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(msg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isCompleted \u003d storageTask[COMPLETED_INDEX].equals(IS_COMPLETED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LocalDateTime time \u003d Datetime.parseTimeString("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    storageTask[DATETIME_INDEX], Event.TIME_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new Event(storageTask[DESCRIPTION_INDEX], isCompleted, time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeParseException exception) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"It appears the time of this event: \u0027%s\u0027 is corrupted. \","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    storageTaskString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(msg + exception.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts a \u003ccode\u003eString\u003c/code\u003e from the storage text file into its associated \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param storageTaskString the \u003ccode\u003eString\u003c/code\u003e that is to be converted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the associated \u003ccode\u003eTask\u003c/code\u003e from the given \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeParseException if this does not recognise the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * format of the \u003ccode\u003eString\u003c/code\u003e being parsed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task convertStorageToTask(String storageTaskString) throws DukeParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] storageTask \u003d storageTaskString.split(DELIMITER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assert storageTask.length \u003e 0 : \"There is an error in the splitting of the storageTaskString\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        switch(storageTask[0]) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case Todo.TODO_SYMBOL:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createTodo(storageTask, storageTaskString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case Deadline.DEADLINE_SYMBOL:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createDeadline(storageTask, storageTaskString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case Event.EVENT_SYMBOL:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return createEvent(storageTask, storageTaskString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String err \u003d String.format(\"It appears this line: \u0027%s\u0027 is corrupted.\", storageTaskString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(err);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 117
    }
  },
  {
    "path": "src/main/java/duke/result/Result.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * After an \u003ccode\u003eOperation\u003c/code\u003e is executed, a \u003ccode\u003eResult\u003c/code\u003e object is created and set back to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * It encapsulates the status of the \u003ccode\u003eOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Result {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final boolean isSuccessful;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isSuccessful indicates if the \u003ccode\u003eOperation\u003c/code\u003e is successful."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param message indicates the message of the \u003ccode\u003eOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isExit indicates if Duke should stop running."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Result(boolean isSuccessful, String message, boolean isExit) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.isSuccessful \u003d isSuccessful;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Determines if the executed \u003ccode\u003eOperation\u003c/code\u003e was successful."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the \u003ccode\u003eOperation\u003c/code\u003e was successful."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isSuccessful() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.isSuccessful;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Determines if the executed \u003ccode\u003eOperation\u003c/code\u003e was an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if it is an \u003ccode\u003eExitOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the message of the executed \u003ccode\u003eOperation\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the message \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 52
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeOperationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.parser.StorageParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Class that loads and converts the \u003ccode\u003eTaskList\u003c/code\u003e in Duke with a text file. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DEFAULT_FILENAME \u003d \"taskstorage.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"data/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final StorageParser storageParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private TaskStorage(File file) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.storageParser \u003d new StorageParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a \u003ccode\u003eTaskStorage\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The path to the file can be predetermined. If not, the default will be used."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * If the path directory does not exist, it will be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param path the directory for the file to be stored in."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a preconfigured \u003ccode\u003eTaskStorage\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static TaskStorage createTaskStorage(String... path) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String actualPath \u003d path.length \u003d\u003d 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ? DEFAULT_FILEPATH"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                : path[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        File dir \u003d new File(actualPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assert dir.exists() : \"Directory is not created\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        File f \u003d new File(actualPath + DEFAULT_FILENAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new TaskStorage(f);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Loads the \u003ccode\u003eTaskList\u003c/code\u003e from the text file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e to be loaded onto."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e indicating the status of the loading."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String loadTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (IOException ignore) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return \"I detect no storage files. I shall create a fresh list.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Task task \u003d this.storageParser.convertStorageToTask(sc.nextLine());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                taskList.addTask(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            } catch (DukeParseException exception) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                sb.append(exception.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return \"All tasks have been loaded.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.deleteCharAt(sb.length() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return \"The following tasks could not be loaded:\\n\" + sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void writeToFile(String text) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.file.getAbsolutePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        fw.write(text);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Saves the \u003ccode\u003eTaskList\u003c/code\u003e into the text file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param taskList the \u003ccode\u003eTaskList\u003c/code\u003e that is to be saved."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeOperationException if the text file cannot be written onto."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void saveToDisk(TaskList taskList) throws DukeOperationException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String storageTask \u003d this.storageParser.convertTaskToStorage(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.append(storageTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            writeToFile(sb.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeOperationException(\"There were some problems when writing to the file. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    + exception.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 106
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents Deadline objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Inherits from the abstract \u003ccode\u003eTask\u003c/code\u003e class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DEADLINE_SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DATE_FORMAT_INPUT \u003d \"dd-MM-yyyy HHmm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DATE_FORMAT_OUTPUT \u003d \"MMM dd yyyy hh:mm a\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DEADLINE_BREAK \u003d \"/by\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Datetime datetime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted the completion status of the \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the \u003ccode\u003eLocalDateTime\u003c/code\u003e the \u003ccode\u003eDeadline\u003c/code\u003e task is to be completed by."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Deadline(String description, boolean isCompleted, LocalDateTime datetime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.datetime \u003d new Datetime(datetime, DATE_FORMAT_INPUT, DATE_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a \u003ccode\u003eDeadline\u003c/code\u003e that is not completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the \u003ccode\u003eLocalDateTime\u003c/code\u003e the \u003ccode\u003eDeadline\u003c/code\u003e task is to be completed by."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Deadline createDeadline(String description , LocalDateTime datetime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Deadline(description, false, datetime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the \u003ccode\u003eDeadline\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringDateTime \u003d this.datetime.getOutputDatetimeString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String byDatetime \u003d String.format(\"(by: %s)\", stringDateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"[\" + DEADLINE_SYMBOL + \"]\" + toStringSuffix() + \" \" + byDatetime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the other object is equivalent to \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The description, completion status and datetime must be equal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param other the object to be compared to."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if both objects are equal."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof Deadline) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            boolean isDatetimeEqual \u003d this.getTaskDatetime().equals(otherDeadline.getTaskDatetime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherDeadline) \u0026\u0026 isDatetimeEqual;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the symbol of \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e symbol of \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return DEADLINE_SYMBOL;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the datetime \u003ccode\u003eString\u003c/code\u003e of \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an \u003ccode\u003eOptional\u003c/code\u003e containing the formatted \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringDateTime \u003d this.datetime.getOutputDatetimeString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.of(stringDateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 94
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.utils.Datetime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents Event objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Inherits from the abstract \u003ccode\u003eTask\u003c/code\u003e class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String EVENT_SYMBOL \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TIME_FORMAT_INPUT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TIME_FORMAT_OUTPUT \u003d \"hh:mm a\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String EVENT_BREAK \u003d \"/at\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Datetime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted the completion status of the \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the \u003ccode\u003eLocalDateTime\u003c/code\u003e the \u003ccode\u003eEvent\u003c/code\u003e task is to be completed by."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Event(String description, boolean isCompleted, LocalDateTime time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.time \u003d new Datetime(time, TIME_FORMAT_INPUT, TIME_FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates an \u003ccode\u003eEvent\u003c/code\u003e that is not completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the \u003ccode\u003eLocalDateTime\u003c/code\u003e the \u003ccode\u003eEvent\u003c/code\u003e task is to be completed by."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Event createEvent(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Event(description, false, time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the \u003ccode\u003eEvent\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringTime \u003d this.time.getOutputDatetimeString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String atTime \u003d String.format(\"(at: %s)\", stringTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"[\" + EVENT_SYMBOL + \"]\" + toStringSuffix() + \" \" + atTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the other object is equivalent to the \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The description, completion status and time must be equal."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param other the object to be compared to."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if both objects are equal."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof Event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            boolean isTimeEqual \u003d this.getTaskDatetime().equals(otherEvent.getTaskDatetime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherEvent) \u0026\u0026 isTimeEqual;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the symbol of \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e symbol of \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return EVENT_SYMBOL;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the datetime \u003ccode\u003eString\u003c/code\u003e of \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an \u003ccode\u003eOptional\u003c/code\u003e containing the formatted \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String stringTime \u003d this.time.getOutputDatetimeString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.of(stringTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 93
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents the Task object. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String TICK \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String CROSS \u003d \"\\u2717\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted indicates if the \u003ccode\u003eTask\u003c/code\u003e has been completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    Task(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the \u003ccode\u003eTask\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Indicates the completion status of the \u003ccode\u003eTask\u003c/code\u003e and its description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toStringSuffix() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String symbol \u003d this.isCompleted ? TICK : CROSS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return String.format(\"[%s] %s\", symbol, this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    protected boolean isEqual(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.description.equals(task.getTaskDescription())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 this.isCompleted \u003d\u003d task.isTaskCompleted();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Changes the completion status of \u003ccode\u003eTask\u003c/code\u003e to completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * This is a mutable operation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the description of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e of the \u003ccode\u003eTask\u003c/code\u003e description."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the completion status of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the \u003ccode\u003eTask\u003c/code\u003e is completed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * and \u003ccode\u003efalse\u003c/code\u003e if not."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isTaskCompleted() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the task symbol of the subtype of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the task symbol \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract String getTaskSymbol();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the formatted \u003ccode\u003eString\u003c/code\u003e of the \u003ccode\u003eDatetime\u003c/code\u003e of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an \u003ccode\u003eOptional\u003c/code\u003e containing the formatted \u003ccode\u003eDatetime String\u003c/code\u003e."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public abstract Optional\u003cString\u003e getTaskDatetime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 80
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents the list of \u003ccode\u003eTasks\u003c/code\u003e that Duke stores in. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Initialise a new \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Implements the \u003ccode\u003eIterable\u003c/code\u003e interface in order for \u003ccode\u003eTaskList\u003c/code\u003e to be iterable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the iterator form of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.taskList.iterator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the number of \u003ccode\u003eTasks\u003c/code\u003e that are being stored currently."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the number of \u003ccode\u003eTasks\u003c/code\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int getCurrCapacity() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the given \u003ccode\u003eindex\u003c/code\u003e is within the capacity of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the value to be checked on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003eindex\u003c/code\u003e is within the capacity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return index \u003c\u003d this.taskList.size() \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Adds the given \u003ccode\u003eTask\u003c/code\u003e into \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param task the \u003ccode\u003eTask\u003c/code\u003e that is to be added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eTask\u003c/code\u003e that has been added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Changes the specified \u003ccode\u003eTask\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e to completed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the index of the \u003ccode\u003eTask\u003c/code\u003e that is to be changed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eTask\u003c/code\u003e that has been completed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task completeTask(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task task \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        task.completeTask();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assert task.isTaskCompleted() : \"Task is not marked as complete\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Removes a specified \u003ccode\u003eTask\u003c/code\u003e from \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the index of the \u003ccode\u003eTask\u003c/code\u003e that is to be deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eTask\u003c/code\u003e that has been removed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the \u003ccode\u003eTaskList\u003c/code\u003e to a representative \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * This \u003ccode\u003eString\u003c/code\u003e contains all details of \u003ccode\u003eTasks\u003c/code\u003e stored in \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e representing \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String taskLine \u003d String.format(\"%d. %s\", i + 1, this.taskList.get(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.append(taskLine);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.deleteCharAt(sb.length() - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Finds all \u003ccode\u003eTasks\u003c/code\u003e containing the specified search word."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param searchWord the \u003ccode\u003eString\u003c/code\u003e that is to be search with."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e containing all \u003ccode\u003eTasks\u003c/code\u003e that are found."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String findString(String searchWord) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d 0; i \u003c this.getCurrCapacity(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Task task \u003d this.taskList.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            if (task.getTaskDescription().contains(searchWord)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                String taskString \u003d String.format(\"%d. %s\", i + 1, task.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                sb.append(taskString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            sb.deleteCharAt(sb.length() - 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 122
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents Todo objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Inherits from the abstract \u003ccode\u003eTask\u003c/code\u003e class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TODO_SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param isCompleted the completion status of the \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Todo(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a \u003ccode\u003eTodo\u003c/code\u003e that is not completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param description the description of the \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an uncompleted \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Todo createTodo(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Todo(description, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the \u003ccode\u003eTodo\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"[\" + TODO_SYMBOL + \"]\" + toStringSuffix();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the other object is equivalent to a \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param other the object to be compared to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if both objects are equal."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof Todo) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Todo otherTodo \u003d (Todo) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherTodo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the symbol of \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e symbol of \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return TODO_SYMBOL;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Gets the datetime of \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Since \u003ccode\u003eTodo\u003c/code\u003e does not have a datetime attribute, it will be empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return an empty \u003ccode\u003eOptional\u003c/code\u003e object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 79
    }
  },
  {
    "path": "src/main/java/duke/ui/CommandLineUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** Represents the user interface class. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class CommandLineUi {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DIVIDER \u003d \"---------------------------------------------------------\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Initialises a \u003ccode\u003eScanner\u003c/code\u003e that reads in input from the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public CommandLineUi() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Prints out a blank line."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showBlankLine() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Prints the starting message of Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showStartMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d \"Greetings, what may I do for you?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(LOGO + message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.showBlankLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Prints out the divider line in between responses from Duke."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showDivider() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Prints out the loading status of Duke."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param loadStatus the status \u003ccode\u003eString\u003c/code\u003e to be printed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showLoadStatus(String loadStatus) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(loadStatus);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.showBlankLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Prints out the message from Duke, after a user has input a command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param msg the message to be printed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void showStatus(String msg) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.showDivider();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.showDivider();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.showBlankLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Reads in the user input as a line."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e of the user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 77
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final double CLIP_RADIUS \u003d 30.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        clipDisplayPicture(CLIP_RADIUS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void clipDisplayPicture(double radius) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        double width \u003d displayPicture.getFitWidth() / 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        double height \u003d displayPicture.getFitHeight() / 2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Circle clip \u003d new Circle(width, height, radius);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        db.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 66
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.result.Result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void setDuke(Duke duke, String loadMessage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String msg \u003d \"Greetings, what may I do for you?\\n\" + loadMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                DialogBox.getDukeDialog(msg, dukeImage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Result response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String responseMessage \u003d response.isSuccessful()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ? response.getMessage()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                : \"Apologies. \" + response.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                DialogBox.getDukeDialog(responseMessage, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            exitDuke();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void exitDuke() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.7));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 66
    }
  },
  {
    "path": "src/main/java/duke/utils/Datetime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents a DateTime object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * This class also supports the formatting and construction of \u003ccode\u003eLocalDateTime\u003c/code\u003e objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Datetime {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final LocalDateTime datetime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final DateTimeFormatter inputFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final DateTimeFormatter outputFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the actual \u003ccode\u003eLocalDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param inputPattern the \u003ccode\u003eString\u003c/code\u003e format that \u003ccode\u003eLocalDateTime\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                     is originally read in as."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param outputPattern the \u003ccode\u003eString\u003c/code\u003e format \u003ccode\u003eLocalDateTime\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                      is to be printed out as."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Datetime(LocalDateTime datetime, String inputPattern, String outputPattern) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.inputFormatter \u003d DateTimeFormatter.ofPattern(inputPattern);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.outputFormatter \u003d DateTimeFormatter.ofPattern(outputPattern);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the datetime attribute to the format specified by \u003ccode\u003eoutputFormatter\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the formatted date time \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getOutputDatetimeString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this.outputFormatter.format(this.datetime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses the datetime \u003ccode\u003eString\u003c/code\u003e, with its pattern to a \u003ccode\u003eLocalDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param datetime the \u003ccode\u003eString\u003c/code\u003e that is to be parsed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param pattern the specified format of the datetime \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the parsed \u003ccode\u003eLocalDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeException if the datetime \u003ccode\u003eString\u003c/code\u003e does not match the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * pattern \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static LocalDateTime parseDateTimeString(String datetime, String pattern)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throws DukeParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(pattern);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return LocalDateTime.parse(datetime, dtf);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"Ensure the datetime passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(msg);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses the time \u003ccode\u003eString\u003c/code\u003e into a \u003ccode\u003eLocalDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The time is converted into a \u003ccode\u003eLocalTime\u003c/code\u003e first,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * and then converted into a \u003ccode\u003eLocalDateTime\u003c/code\u003e with the date of today."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param time the \u003ccode\u003eString\u003c/code\u003e that is to be parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param pattern the specified format of the time \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the parsed \u003ccode\u003eLocalDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws DukeException if the time \u003ccode\u003eString\u003c/code\u003e does not match"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * the pattern \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static LocalDateTime parseTimeString(String time, String pattern) throws DukeParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(pattern);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LocalTime localTime \u003d LocalTime.parse(time, dtf);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return LocalDateTime.of(LocalDate.now(), localTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String msg \u003d String.format(\"Ensure the time passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new DukeParseException(msg);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 86
    }
  },
  {
    "path": "src/main/java/duke/utils/Utils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/** The utilities class for Duke. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public final class Utils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int INDEX_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Concatenates the \u003ccode\u003eString\u003c/code\u003e elements of the array with specified indexes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * A whitespace is inserted in between all elements of the array."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param arr the array of \u003ccode\u003eString\u003c/code\u003e that is to be concatenated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param start the starting index of the desired \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param end the last index the desired \u003ccode\u003eString\u003c/code\u003e is to end with."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the concatenated \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static String concatenate(String[] arr, int start, int end) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assert start \u003c\u003d end : \"start index is greater than end index.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String prefix \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d start; i \u003c end; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            builder.append(prefix);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            builder.append(arr[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            prefix \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Retrieves the index of a specified \u003ccode\u003eString\u003c/code\u003e within the array."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The method returns -1 if the specified \u003ccode\u003eString\u003c/code\u003e cannot be found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param arr the array that is to be searched on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param target the \u003ccode\u003eString\u003c/code\u003e that is to be searched for."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the index position of the target \u003ccode\u003eString\u003c/code\u003e in the array."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static int getIndexOf(String[] arr, String target) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Arrays.asList(arr).indexOf(target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if the given \u003ccode\u003eString\u003c/code\u003e element of the array can be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * parsed into an \u003ccode\u003eInteger\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param command the array that contains the \u003ccode\u003eString\u003c/code\u003e that can be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *                parsed into an \u003ccode\u003eInteger\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param index the index of the element that is to be checked."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified element can be parsed into an \u003ccode\u003eInteger\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static boolean hasInteger(String[] command, int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (command.length - 1 \u003c index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return command[index].matches(\"\\\\d+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 57
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-radius: 10px; -fx-border-radius: 20px; -fx-padding: 10px; -fx-spacing: 5px;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"BOTTOM_RIGHT\" style\u003d\"-fx-border-color: skyblue; -fx-label-padding: 5px; -fx-border-radius: 10px;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \u003cFont name\u003d\"Courier\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"65.0\" fitWidth\u003d\"65.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter a command...\" style\u003d\"-fx-background-color: transparent;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \u003cFont name\u003d\"Courier\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"324.0\" layoutY\u003d\"561.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"70.0\" style\u003d\"-fx-background-color: transparent; colo: blue;\" text\u003d\"Send\" textFill\u003d\"#4ec1ff\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \u003cFont name\u003d\"Courier\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"62.0\" prefHeight\u003d\"494.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-max-height: 480;\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "      \u003cImageView fitHeight\u003d\"63.0\" fitWidth\u003d\"400.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \u003cImage url\u003d\"@../images/DukeHeader.png\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/test/java/duke/parser/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddDeadlineOperation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddEventOperation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.AddTodoOperation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.DeleteOperation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.DoneOperation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.ExitOperation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.FindOperation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.ListOperation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.operation.Operation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_correctInput_success() throws DukeParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Todo mockTodo \u003d new Todo(\"mock\", false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        taskList.addTask(mockTodo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskStorage storage \u003d TaskStorage.createTaskStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String command \u003d \"todo read book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Operation operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof AddTodoOperation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"deadline return book /by 09-09-2019 1010\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof AddDeadlineOperation);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"event meeting /at 1430\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof AddEventOperation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"list\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof ListOperation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"find book\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof FindOperation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"find read book\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof FindOperation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"done 1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof DoneOperation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"delete 1\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof DeleteOperation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        command \u003d \"bye\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        operation \u003d commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(operation instanceof ExitOperation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getParse_wrongInput_exceptionThrownArguments() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"Not a command\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"todo\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"deadline\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"deadline description /by\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"deadline /by\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"event description /at\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"event /at\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"deadline description /at 12-12-2012 1200\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"event description /by 2000\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(String.format(\"done %d\", Integer.MAX_VALUE)),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"done -1\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"done 0\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"done\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(String.format(\"delete %d\", Integer.MAX_VALUE)),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"delete -1\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"delete 0\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"delete\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"find\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getParse_wrongInput_exceptionThrownArguments\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_wrongInput_exceptionThrown(String command) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Todo mockTodo \u003d new Todo(\"mock\", false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        taskList.addTask(mockTodo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskStorage storage \u003d TaskStorage.createTaskStorage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            commandParser.parse(command, taskList, storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeParseException exception) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertNotNull(exception.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 110
    }
  },
  {
    "path": "src/test/java/duke/parser/StorageParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class StorageParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final StorageParser storageParser \u003d new StorageParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getArguments() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime dateTimeOne \u003d LocalDateTime.of(2010, 5, 30, 14, 20);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime dateTimeTwo \u003d LocalDateTime.of(2020, 8, 8, 8, 8);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new Todo(\"return book\", true),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        \"T;1;return book\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new Todo(\"return\", false),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        \"T;0;return\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new Deadline(\"complete assignment\", true, dateTimeOne),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        \"D;1;complete assignment;May 30 2010 02:20 pm\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new Deadline(\"long long long description\", false, dateTimeTwo),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        \"D;0;long long long description;Aug 08 2020 08:08 am\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new Event(\"short event\", true, dateTimeTwo),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        \"E;1;short event;08:08 am\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new Event(\"return book\", false, dateTimeOne),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        \"E;0;return book;02:20 pm\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getArguments\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testConvertTaskToStorage(Task task, String actual) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String converted \u003d storageParser.convertTaskToStorage(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(converted, actual + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getArguments\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void convertStorageToTask_correctSymbol_success("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Task actual, String storage) throws DukeParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Task converted \u003d storageParser.convertStorageToTask(storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(converted, actual);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getConvertStorageToTaskExceptionArguments() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"X;0;wrong symbol\", \"line\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"T;no completion status\", \"todo\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"D;1;no datetime\", \"deadline\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"E;1;no time\", \"event\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getConvertStorageToTaskExceptionArguments\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void convertStorageToTask_wrongSymbol_exceptionThrown(String storageString, String task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            storageParser.convertStorageToTask(storageString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeParseException exception) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String err \u003d String.format("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \"It appears this %s: \u0027%s\u0027 is corrupted.\", task, storageString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(err, exception.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 75
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Deadline DEADLINE_ONE \u003d new Deadline(\"test\", false, getLocalDate());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Deadline DEADLINE_TWO \u003d new Deadline(\"test 2\", true, getLocalDate());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static LocalDateTime getLocalDate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return LocalDateTime.of(2020, 12, 12, 6, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateDeadline() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Deadline.createDeadline(\"test\", getLocalDate()), DEADLINE_ONE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(DEADLINE_ONE.toString(), \"[D][\\u2717] test (by: Dec 12 2020 06:00 am)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(DEADLINE_TWO.toString(), \"[D][\\u2713] test 2 (by: Dec 12 2020 06:00 am)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetTaskDatetime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(DEADLINE_ONE.getTaskDatetime(), Optional.of(\"Dec 12 2020 06:00 am\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Event EVENT_ONE \u003d new Event(\"test\", false, getLocalDate());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Event EVENT_TWO \u003d new Event(\"test 2\", true, getLocalDate());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static LocalDateTime getLocalDate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return LocalDateTime.of(2020, 12, 12, 6, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateEvent() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Event.createEvent(\"test\", getLocalDate()), EVENT_ONE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(EVENT_ONE.toString(), \"[E][\\u2717] test (at: 06:00 am)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(EVENT_TWO.toString(), \"[E][\\u2713] test 2 (at: 06:00 am)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetTaskDatetime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(EVENT_ONE.getTaskDatetime(), Optional.of(\"06:00 am\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_ONE \u003d new TaskStub(\"task 1\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_TWO \u003d new TaskStub(\"task 2\", false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_TWO_COMPLETE \u003d new TaskStub(\"task 2\", true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final TaskStub TASK_THREE \u003d new TaskStub(\"task 3\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testTaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.addTask(TASK_ONE), TASK_ONE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.addTask(TASK_TWO), TASK_TWO);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.completeTask(2), TASK_TWO_COMPLETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.addTask(TASK_THREE), TASK_THREE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.removeTask(1), TASK_ONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(taskList.getCurrCapacity(), 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 35
    }
  },
  {
    "path": "src/test/java/duke/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    TaskStub(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } else if (other instanceof TaskStub) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            TaskStub otherTaskStub \u003d (TaskStub) other;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return this.isEqual(otherTaskStub);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return \"TS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Optional\u003cString\u003e getTaskDatetime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 30
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Todo TODO_ONE \u003d new Todo(\"test\", false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Todo TODO_TWO \u003d new Todo(\"test 2\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateTodo() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Todo.createTodo(\"test\"), TODO_ONE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(TODO_ONE.toString(), \"[T][\\u2717] test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(TODO_TWO.toString(), \"[T][\\u2713] test 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetTaskDatetime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(TODO_ONE.getTaskDatetime(), Optional.empty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 28
    }
  },
  {
    "path": "src/test/java/duke/utils/DatetimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DatetimeTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getParseDateTimeString_correctFormat_arguments() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"2019-19-02 0600\", \"yyyy-dd-MM HHmm\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        LocalDateTime.of(2019, 2, 19, 6, 0)),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"20 12 2020 21:30\", \"dd MM yyyy HH:mm\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        LocalDateTime.of(2020, 12, 20, 21, 30))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getParseDateTimeString_correctFormat_arguments\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseDateTimeString_correctFormat_success("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String datetime, String pattern, LocalDateTime actual) throws DukeParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Datetime.parseDateTimeString(datetime, pattern), actual);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseDateTimeString_wrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String pattern \u003d \"yyyy dd MM\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LocalDateTime actual \u003d LocalDateTime.of(2019, 2, 19, 19, 20);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(Datetime.parseDateTimeString(\"2019-19-02\", pattern), actual);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeParseException exception) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String expected \u003d String.format("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \"Ensure the datetime passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(expected, exception.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getParseTimeString_correctFormat_arguments() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"0654\", \"HHmm\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        LocalTime.of(6, 54)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(\"19-23\", \"HH-mm\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        LocalTime.of(19, 23))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getParseTimeString_correctFormat_arguments\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTimeString_correctFormat_success("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String time, String pattern, LocalTime actualTime) throws DukeParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime actual \u003d LocalDateTime.of(LocalDate.now(), actualTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Datetime.parseTimeString(time, pattern), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTimeString_wrongFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String pattern \u003d \"HH mm\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalTime time \u003d LocalTime.of(18, 8);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalDateTime actual \u003d LocalDateTime.of(LocalDate.now(), time);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(Datetime.parseDateTimeString(\"18-08\", pattern), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DukeParseException exception) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String expected \u003d String.format("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \"Ensure the datetime passed in is of the form: \u0027%s\u0027.\", pattern);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(expected, exception.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 80
    }
  },
  {
    "path": "src/test/java/duke/utils/UtilsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getConcatenateArguments() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] arr \u003d new String[]{\"This\", \"is\", \",\" , \"a\", \"test\", \"case\", \".\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, 0, 7, \"This is , a test case .\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, 1, 6, \"is , a test case\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, 2, 3, \",\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, 1, 1, \"\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getConcatenateArguments\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testConcatenate(String[] arr, int start, int end, String actual) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.concatenate(arr, start, end), actual);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getIndexOfArguments() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String[] arr \u003d new String[]{\"This\", \"is\", \"/some\", \"*special*\", \"test\", \".\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, \"This\", 0),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, \"/some\", 2),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, \"*special*\", 3),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, \".\", 5),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(arr, \"does not exist\", Utils.INDEX_NOT_FOUND)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getIndexOfArguments\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testGetIndexOf(String[] arr, String target, int actual) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.getIndexOf(arr, target), actual);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Stream\u003cArguments\u003e getHasIntegerArguments() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new String[]{\"done\", \"2\"}, 1, true),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new String[]{\"delete\", \"2\", \"extra\"}, 1, true),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new String[]{\"done\", \"extra\", \"2\"}, 2, true),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new String[]{\"done\", \"2.2\"}, 1, false),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new String[]{\"delete\", \"2.2\"}, 0, false),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new String[]{\"delete\"}, 1, false),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Arguments.of(new String[]{\"done\", \"-\"}, 1, false)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @MethodSource(\"getHasIntegerArguments\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testHasInteger(String[] arr, int index, boolean actual) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(Utils.hasInteger(arr, index), actual);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 62
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "event project meeting /at 1300"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "deadline return book /by 12-12-2012 1200"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "find book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "find does not exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "not a command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "event no datetime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "deadline no date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "event project meeting /at 12.00 am"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "deadline return book /by 12 Dec 2012 1200"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 22
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/Duke.java ../src/main/java/duke/*/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    rm \"taskstorage.txt\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    rm \"taskstorage.txt\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 7,
      "-": 36
    }
  }
]
