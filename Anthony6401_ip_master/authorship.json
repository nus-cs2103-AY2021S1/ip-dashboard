[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Hi! My name is Wube."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "What do you want me to do?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "-": 20
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 21,
      "-": 44
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Duke is a **desktop app to manage your tasks** via a chatbot-like interface. By being able to view"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "and manage your tasks easily, you will be able to increase your productivity in your daily life."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "![Screenshot of Duke](Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "- [Usage](#usage)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [todo](#todo-description---adding-todo-task)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [deadline](#deadline-description-at-date-time---adding-deadline-task)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [event](#event-description-at-date-time---adding-event-task)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [list](#list---listing-all-the-tasks)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [done](#done-index---marking-a-task-as-done)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [delete](#delete-index---deleting-a-task)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [find](#find-keyword---finding-tasks-by-keyword)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [reschedule](#reschedule-index-date-time---changing-a-tasks-date-and-time)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [taskafter](#taskafter-date---listing-all-the-tasks-after-a-date)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [taskbefore](#taskbefore-date---listing-all-the-tasks-before-a-date)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    - [bye](#bye---exiting-the-app)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Support multiple type of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Duke classifies tasks as todo, deadline, or event, where deadline and event has a date associated with them. This give you freedom to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "group your tasks accordingly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Mark task as done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "You can mark a task that you have finished as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Delete task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "You can delete a task that you have already finished in order to clean up your list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Find task with keyword"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "You can find all the tasks that contains a certain keyword you query."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### View all your tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "You can view all your current tasks and its status as well as its date for deadline and event task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Reschedule your tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "You are able to reschedule your tasks. Note that you can o"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### View tasks before or after a certain date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "You are able to list out all the tasks after or before a certain date you query. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### Auto-save"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Duke will save all your tasks automatically in your computer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `todo \u003cdescription\u003e` - Adding todo task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Adds a todo task to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`todo burrow book`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Okay. I will add this task:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [T][X] burrow book"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "*** "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `deadline \u003cdescription\u003e /at \u003cdate\u003e \u003ctime\u003e` - Adding deadline task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Adds a deadline task with specified date and time to the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`deadline homework /by 2020-09-13 2000`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Okay. I will add this task:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [D][X] homework (by: Sep 13 2020 20:00)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "*** "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `event \u003cdescription\u003e /at \u003cdate\u003e \u003ctime\u003e` - Adding event task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Adds an event task with the specified date and time to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`event project meeting /at 2020-09-13 2200`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Okay. I will add this task:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [E][X] project meeting (at: Sep 13 2020 22:00)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `list` - Listing all the tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Shows a list of all the tasks and their status in the Duke."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Here is the tasks in your list:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "1. [T][O] return book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "2. [E][X] laundry (at: Sep 13 2020 19:00)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "3. [E][X] clean room (at: Sep 13 2020 18:00)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "4. [T][X] burrow book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "5. [D][X] homework (by: Sep 13 2020 20:00)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "6. [E][X] project meeting (at: Sep 13 2020 22:00)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `done \u003cindex\u003e` - Marking a task as done"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Marks the task at the specified index as done. "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "The task\u0027s index follows the numbering from the \u0027list\u0027 command. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Note that index must be a **positive integer**."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`done 5`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Successfully marked this task as done:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [D][O] homework (by: Sep 13 2020 20:00)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `delete \u003cindex\u003e` - Deleting a task"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Delete the task on the specified index."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "The task\u0027s index follows the numbering from the \u0027list\u0027 command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Note that index has to be **postive integer**."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`delete 4`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Okay. I will delete this task:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [T][X] burrow book"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `find \u003ckeyword\u003e` - Finding tasks by keyword"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Finds all the tasks which description contains the keyword."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`find room`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "1. [E][X] clean room (at: Sep 13 2020 18:00)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "2. [T][X] check room"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `reschedule \u003cindex\u003e \u003cdate\u003e \u003ctime\u003e` - Changing a task\u0027s date and time"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Reschedules the task on the index to the specified date and time."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "The task\u0027s index follows the numbering from the \u0027list\u0027 command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Note that the task **can\u0027t be todo** since todo task does not have date"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " and index has to be **positive integer**."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`reschedule 2 2020-09-20 2000`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Successfully change this task\u0027s date:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "  [E][X] laundry (at: Sep 20 2020 20:00)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `taskafter \u003cdate\u003e` - Listing all the tasks after a date"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Shows all the task after the specified date."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`taskafter 2020-09-15`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Here is the tasks after Sep 15 2020:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "1. [E][X] laundry (at: Sep 20 2020 20:00)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `taskbefore \u003cdate\u003e` - Listing all the tasks before a date"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Shows all the task before or equal to the specified date."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`taskbefore 2020-09-13`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Here is the tasks before Sep 13 2020:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "1. [E][X] clean room (at: Sep 11 2020 18:00)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "2. [D][O] homework (by: Sep 13 2020 20:00)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "3. [E][X] project meeting (at: Sep 13 2020 22:00)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "***"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "### `bye` - Exiting the app"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Exits the app."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Expected outcome:\\"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Duke app terminated."
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 237,
      "-": 19
    }
  },
  {
    "path": "junit-test/EXPECTED_STORAGE_CHANGE_TO_DONE.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 1 | Sample task"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 1 | Sample task | 2020-01-01 0000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 1 | Sample task | 2020-01-01 0000"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 3
    }
  },
  {
    "path": "junit-test/EXPECTED_STORAGE_DELETE.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 1 | Sample task"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 0 | Sample task | 2020-01-01 0000"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2
    }
  },
  {
    "path": "junit-test/EXPECTED_STORAGE_SAVE.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 1 | Sample task"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 1 | Sample task | 2020-01-01 0000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 0 | Sample task | 2020-01-01 0000"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represent the Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new Duke object to initialize the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage \u003d new Storage(\"data/storage.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasksFromDisk());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Command command \u003d Parser.parseUserInput(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void takeUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String userInput \u003d ui.readLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                Command command \u003d Parser.parseUserInput(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.welcome());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        takeUserInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.exit());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Runs the Duke program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param args The command line input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 69
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "// Solution adapted https://se-education.org/guides/tutorials/javaFxPart4.html"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents all command. This class also contains specific string for commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command object with isExit as false."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns whether the Duke should stop running or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return Duke\u0027s current state to continue running."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Terminates Duke program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException Thrown when something when wrong when executing the command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 44
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the deadline command. When executed, the class will add the deadline task and save it locally."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for deadline with the specified task\u0027s name and date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName the task\u0027s name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the deadline\u0027s date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeadlineCommand(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the DeadlineCommand. Executing this command will create a new DeadlineTask that will be added to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the TaskList and will be saved to the hard disk by Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the storage fails to save to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new DeadlineTask(taskName, date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage.saveTaskToFile(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.addSuccess(task, tasks.size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return ui.addSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the delete command. When executed, the class will delete the specified task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for delete with the specified task number that want to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNumber the task\u0027s number you want to delete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the DeleteCommand. Executing this command will delete the task corresponding to the task number in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the list as well as in the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the task number is less than 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or exceed the TaskList size or the storage fails to read the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Task task \u003d tasks.deleteTask(taskNumber - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.deleteTaskInFile(taskNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.sendMessage(ui.deleteSuccess(task, tasks.size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return ui.deleteSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 44
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the done command. When executed, the class will mark the specified task as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to mark the specified task number as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNumber the task\u0027s number you want to mark as done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the DoneCommand. Executing this command will mark the task corresponding to the task number as done"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * in the list as well as in the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the task number is less than 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or exceed the TaskList size or storage fails to read the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Task task \u003d tasks.getTask(taskNumber - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            task.setStatusToDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.changeTaskStatusInFile(taskNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.sendMessage(ui.doneSuccess(task));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return ui.doneSuccess(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 45
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the event command. When executed, the class will add the event task and save it locally."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for event with the specified task\u0027s name and date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName the task\u0027s name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the event\u0027s date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public EventCommand(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the EventCommand. Executing this command will create a new EventTask that will be added to the TaskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and will be saved to the hard disk by Storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the storage fails to save to the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new EventTask(taskName, date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage.saveTaskToFile(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.addSuccess(task, tasks.size()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return ui.addSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the exit command. When executed, duke program will be terminated."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the ExitCommand. Executing this command will stop the duke from running."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super.exit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return ui.exit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 23
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the find command. When executed, the class will display all the task containing a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * certain keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to find a task with specified keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param keyword The specified keyword"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the FindCommand. Executing this command will prints out every task in the list that has the specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * keyword in the task\u0027s name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.findTask(keyword, tasks));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return ui.findTask(keyword, tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.NoTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the list command. When executed, the current list will be displayed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the ListCommand. Executing this command will print out every details of the current task such as"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the type (todo, deadline, or event), status (done or not), and the task\u0027s name as well as the date for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * event and deadlinetask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If TaskList is empty."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new NoTaskException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.sendMessage(ui.showList(tasks));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return ui.showList(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 32
    }
  },
  {
    "path": "src/main/java/duke/command/RescheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.RescheduleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DateTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public RescheduleCommand(int taskNumber, LocalDateTime date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d tasks.getTask(taskNumber - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new RescheduleException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (task instanceof DateTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DateTask dateTask \u003d (DateTask) task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            dateTask.setDate(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.changeTaskDateInFile(taskNumber, dateTask.getDateString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.sendMessage(ui.changeDateSuccess(task));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return ui.changeDateSuccess(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 44
    }
  },
  {
    "path": "src/main/java/duke/command/TaskAfterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the task after command. When executed, the class will display all the task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * after a certain date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskAfterCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to check all the task after a certain date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The specified date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskAfterCommand(LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the TaskAfterCommand. Executing this command will prints out every task in the list that is due"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * after the specified date. Note that it will prints only deadline and event task since todo task does"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * not have any date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.showTaskAfter(date, tasks));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return ui.showTaskAfter(date, tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 37
    }
  },
  {
    "path": "src/main/java/duke/command/TaskBeforeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the task before command. When executed, the class will display all the task before"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * or equals to a certain date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskBeforeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to check all the task before or equals to a certain date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The specified date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskBeforeCommand(LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the TaskBeforeCommand. Executing this command will prints out every task in the list that is due"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * before or equals to the specified date. Note that it will prints only deadline and event task since todo task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * does not have any date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.showTaskBefore(date, tasks));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return ui.showTaskBefore(date, tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the todo command. When executed, the class will add the todo task and save it locally."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for event with the specified task\u0027s name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName the task\u0027s name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ToDoCommand(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the ToDoCommand. Executing this command will create a new ToDoTask that will be added to the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * TaskList and will be saved to the hard disk by Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the storage fails to save to the hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage.saveTaskToFile(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(ui.addSuccess(task, tasks.size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return ui.addSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 40
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any description for the deadline\u0027s task name or does not use"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * /by to specify the task\u0027s date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DeadlineException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! The description or date of a deadline cannot be empty.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeadlineException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! The description or date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any number in order to delete a task in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeleteException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DeleteException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! You need a task number to use delete!.\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeleteException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! You need a task number to use delete!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any number in order to mark a task as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DoneException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! You need a task number to use done!.\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DoneException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! You need a task number to use done!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The base exception class for all exceptions that will be thrown when running Duke. All other exceptions such as"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * IOException and DateTimeParseException will be wrapped by some custom exception that extends DukeException."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DukeException with the specified message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param message message of the exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any description for the event\u0027s task name or does not use"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * /at to specify the task\u0027s date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an EventException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! The description or time of an event cannot be empty.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public EventException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! The description or time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/FailToReadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the Scanner or FileWriter class fails to read the file in the hard disk."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class FailToReadFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a FailToReadFileException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Something went wrong when reading the storage file! Please try again.\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public FailToReadFileException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Something went wrong when reading the storage file! Please try again.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any keyword when using find command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class FindException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a FindException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Please put in a keyword!\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public FindException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Please put in a keyword!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any date or input invalid date format when using taskbefore or"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * taskafter command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class InvalidDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an InvalidDateFormatException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Invalid date format! Please put it something like 2020-12-31!.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public InvalidDateFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Invalid date format! Please put in something like 2020-12-31!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any date or input invalid date format"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * when using deadline or event command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class InvalidDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an InvalidDateTimeFormatException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Invalid date format!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Please put it something like 2020-12-31 1800 for 31 December 2020 6 pm.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public InvalidDateTimeFormatException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Invalid date format! Please put in something\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \" like 2020-12-31 1800 for 31 December 2020 6 pm.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user input invalid data such as characters."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class InvalidTaskNumberException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an InvalidTaskNumberException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Invalid task number!\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public InvalidTaskNumberException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Invalid task number!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/NoTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user want to see their task\u0027s list when they have not add any task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class NoTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a NoTaskException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"You haven\u0027t add any task!\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public NoTaskException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"You haven\u0027t add any task!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/NotACommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user input something that duke does not recognized as a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class NotACommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a NotACommandException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public NotACommandException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/RescheduleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user try to reschedule a todo Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class RescheduleException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an RescheduleException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"You can\u0027t reschedule a Todo Task!\"."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public RescheduleException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"You can\u0027t reschedule a Todo Task!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/RescheduleFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user input invalid argument or format when using reschedule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class RescheduleFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an RescheduleFormatException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Invalid argument or format! Please put it in the format of \"reschedule \u003ctask number\u003e \u003cdate\u003e\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * such as \"reschedule 1 2020-01-01!\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public RescheduleFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Invalid argument or format! Please put it in the format of \\\"reschedule \u003ctask number\u003e \u003cdate\u003e\\\"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \" such as \\\"reschedule 1 2020-01-01!\\\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/ToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any description for the todo\u0027s task name."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a ToDoException with default message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! The description of a todo cannot be empty.\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ToDoException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 15
    }
  },
  {
    "path": "src/main/java/duke/task/DateTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represent task with specific date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public abstract class DateTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new DateTask with specified task name and date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName the task\u0027s name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the task\u0027s date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    protected DateTask(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assert date !\u003d null : \"Date can\u0027t be null!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the task\u0027s date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The task\u0027s date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the string representation of the date in the format of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * yyyy-MM-dd HHmm e.g. 2020-01-01 1400 represents Jan 01 2019 2 pm."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A string representation of the date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Sets the task\u0027s date to the specified date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the new task\u0027s date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setDate(LocalDateTime date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 47
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the DeadlineTask object. This task object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * is used to represent a task that has a certain deadline date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineTask extends DateTask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new DeadlineTask object with the specified task name and date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The task\u0027s date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeadlineTask(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName, date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the DeadlineTask."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * DeadlineTask is represented as \"D\" in the front and it will also shows"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the date in the format of MMM dd yyyy HH:mm e.g. Jan 01 2020 18:00."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A string representation of DeadlineTask"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[D]\" + super.toString()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \" (by: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 32
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the EventTask object. This task object is used to represent an event happening at a certain date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventTask extends DateTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new EventTask object with the specified task name and date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The event\u0027s date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public EventTask(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName, date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the EventTask."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * EventTask is represented as \"E\" in the front and it will also shows"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the date in the format of MMM dd yyyy HH:mm e.g. Jan 01 2020 18:00."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A string representation of EventTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[E]\" + super.toString()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \" (at: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represent the task object. This class stores the task\u0027s name as well as the status of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private enum Status {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DONE, ONGOING"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new Task object with the specified task name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    protected Task(String taskName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assert taskName !\u003d null : \"Task name is null!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.status \u003d Status.ONGOING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the task\u0027s name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The task\u0027s name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns true if the task has already been marked as done and false otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The status of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.status \u003d\u003d Status.DONE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Sets the task\u0027s status to done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setStatusToDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        status \u003d Status.DONE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the task. If the task is done, it will be marked as O."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Otherwise, it will be marked as X."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return a string representation of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (status \u003d\u003d Status.DONE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"[O] \" + taskName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"[X] \" + taskName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 59
    }
  },
  {
    "path": "src/main/java/duke/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the ToDoTask object. This task object is used to represent all the task without any date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new ToDoTask object with the specified task name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ToDoTask(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the ToDoTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * ToDoTask is represented with \"T\" in front."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return a string representation of the ToDoTask."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 25
    }
  },
  {
    "path": "src/main/java/duke/utility/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "// Solution adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private HBox dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private DialogBox(String text, Image img, String path) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(path));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Label label \u003d (Label) dialog.getChildren().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        label.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Circle circle \u003d new Circle(50, 50, 45);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        displayPicture.setClip(circle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img, \"/view/DialogBoxUser.fxml\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img, \"/view/DialogBoxDuke.fxml\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 69
    }
  },
  {
    "path": "src/main/java/duke/utility/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "// Solution adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Initializes the GUI property."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                DialogBox.getDukeDialog(ui.welcome(), dukeImage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assert response !\u003d null : \"Response can\u0027t be null\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assert response.length() \u003e\u003d 0 : \"Response can\u0027t be empty\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (response.equals(ui.exit())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 77
    }
  },
  {
    "path": "src/main/java/duke/utility/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.RescheduleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.TaskAfterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.TaskBeforeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DeadlineException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DeleteException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DoneException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.EventException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.FindException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidDateFormatException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.NotACommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.RescheduleFormatException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.ToDoException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to parse the user input. This class will try to change the user input to a functional command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_TASK_AFTER \u003d \"taskafter\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_TASK_BEFORE \u003d \"taskbefore\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String COMMAND_RESCHEDULE \u003d \"reschedule\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the task so that it will be saved in the specific format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * in the hard disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task Task to be parsed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return parsed task for saving purpose"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String parseForSave(Task task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d task.getTaskName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsed \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String isDone \u003d task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"T | \" + isDone + \" | \" + taskName + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String date \u003d deadlineTask.getDateString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"D | \" + isDone + \" | \" + taskName + \" | \" + date + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String time \u003d eventTask.getDateString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"E | \" + isDone + \" | \" + taskName + \" | \" + time + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return parsed;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the string that is being read in the hard disk and creates the task representation of the string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskString String that represents a task in the hard disk"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The task representation of the string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static Task parseForReadingFile(String taskString) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String[] taskArr \u003d taskString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskType \u003d taskArr[0].trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        boolean isDone \u003d taskArr[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d taskArr[2].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String dateForDeadline \u003d taskArr[3].trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime deadlineDate \u003d LocalDateTime.parse(dateForDeadline, FORMATTER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new DeadlineTask(taskName, deadlineDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String dateForEvent \u003d taskArr[3].trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime eventDate \u003d LocalDateTime.parse(dateForEvent, FORMATTER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new EventTask(taskName, eventDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask.setStatusToDone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the user input in order to change it into a functional command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param userInput The user input"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The command representation of the user input"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If there is no arg or wrong arg for"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * specific command or user input wrong command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static Command parseUserInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String[] userInputArr \u003d userInput.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String command \u003d userInputArr[0];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String arg \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (userInputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            arg \u003d userInputArr[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (command.equals(COMMAND_BYE)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_LIST)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_DONE)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DoneException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int taskNumber \u003d parseStringToNumber(arg);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DeleteException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int taskNumber \u003d parseStringToNumber(arg);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_TASK_AFTER)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDate parsedDate \u003d parseLocalDate(arg);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new TaskAfterCommand(parsedDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_TASK_BEFORE)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDate parsedDate \u003d parseLocalDate(arg);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new TaskBeforeCommand(parsedDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_TODO)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new ToDoException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ToDoCommand(arg);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DeadlineException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String[] arrForDeadline \u003d arg.split(\"/by\", 2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arrForDeadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DeadlineException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskForDeadline \u003d arrForDeadline[0].trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String dateForDeadline \u003d arrForDeadline[1].trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime deadlineDate \u003d parseLocalDateTime(dateForDeadline);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new DeadlineCommand(taskForDeadline, deadlineDate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new EventException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String[] arrForEvent \u003d arg.split(\"/at\", 2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arrForEvent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new EventException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskForEvent \u003d arrForEvent[0].trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String dateForEvent \u003d arrForEvent[1].trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime eventDate \u003d parseLocalDateTime(dateForEvent);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new EventCommand(taskForEvent, eventDate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new FindException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new FindCommand(arg);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(COMMAND_RESCHEDULE)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new RescheduleFormatException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String[] arrForReschedule \u003d arg.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arrForReschedule.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new RescheduleFormatException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int taskNumber \u003d parseStringToNumber(arrForReschedule[0].trim());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime dateForReschedule \u003d parseLocalDateTime(arrForReschedule[1].trim());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new RescheduleCommand(taskNumber, dateForReschedule);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new NotACommandException();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static int parseStringToNumber(String stringNumber) throws DukeException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return Integer.parseInt(stringNumber);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static LocalDate parseLocalDate(String stringDate) throws DukeException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return LocalDate.parse(stringDate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static LocalDateTime parseLocalDateTime(String stringDateTime) throws DukeException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return LocalDateTime.parse(stringDateTime, FORMATTER);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidDateTimeFormatException();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 261
    }
  },
  {
    "path": "src/main/java/duke/utility/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.FailToReadFileException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class deals with saving, changing, or deleting data in the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final int STATUS_POSITION_IN_DISK \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final int TO_START_POSITION_OF_DATE \u003d 16;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Path storagePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Storage object with the specified file path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param filePath The file path to the storage file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assert filePath !\u003d null : \"Path can\u0027t be null!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.storagePath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Saves the task to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The task will be parsed to the task\u0027s saving format before it is saved to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task The task to be saved"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the FileWriter fails to read the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void saveTaskToFile(Task task) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath.toString(), true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String toBeAppend \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(toBeAppend);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Changes the task\u0027s status to done in the hard disk based on the line number specified."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param line The task\u0027s line that wanted to be changed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the Scanner or FileWriter fails to read the file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void changeTaskStatusInFile(int line) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskLine \u003d sc.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (count \u003d\u003d line) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (taskLine.charAt(STATUS_POSITION_IN_DISK) \u003d\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        taskLine \u003d taskLine.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                sb.append(taskLine);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Deletes a task in the hard disk based on the line number specified."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param line The task\u0027s line that wanted to be deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the Scanner or FileWriter fails to read the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void deleteTaskInFile(int line) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskLine \u003d sc.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (count !\u003d line) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    sb.append(taskLine);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Change the task\u0027s date to the specified date in the hard disk based on the line number specified."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param line the task\u0027s line that wanted to be changed"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param newDate the new date for the task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the Scanner of FileWriter fails to read the file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void changeTaskDateInFile(int line, String newDate) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskLine \u003d sc.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (count \u003d\u003d line) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    String subStringTaskLine \u003d taskLine.substring(0, taskLine.length() - TO_START_POSITION_OF_DATE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    taskLine \u003d subStringTaskLine + newDate + \"\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                sb.append(taskLine);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void createStorageFile() throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Path dataPath \u003d storagePath.getParent();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File dataFile \u003d new File(dataPath.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File storageFile \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                dataFile.mkdir();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (!storageFile.exists()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                storageFile.createNewFile();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Read the storage file in the hard disk. If no folder or file has been created, it will create the folder or file"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * automatically."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return List of task"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If fails to create the new file locally"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or the Scanner fails to read the file"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public List\u003cTask\u003e loadTasksFromDisk() throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            createStorageFile();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                Task taskInFile \u003d Parser.parseForReadingFile(taskString);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                tasks.add(taskInFile);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 188
    }
  },
  {
    "path": "src/main/java/duke/utility/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the Task\u0027s list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new TaskList with no task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new TaskList with the specified list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assert tasks !\u003d null : \"list to be assigned to the Task List can\u0027t be null!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Deletes a specific task according to the task number. Note that the task count starts from 0."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNum task\u0027s number that wants to be deleted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return the deleted task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Task deleteTask(int taskNum) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.remove(taskNum);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the current size of the TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return current size of the TaskList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Adds the specified task to the TaskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that wants to be added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets a specific task according to the task number. Note that the task count starts from 0."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNum task\u0027s number of a task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return task corresponding to the task\u0027s number"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.get(taskNum);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns true if the TaskList contains no elements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return list condition"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.isEmpty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 79
    }
  },
  {
    "path": "src/main/java/duke/utility/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DateTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class deals with unit interface of Duke. This includes the messages that Duke will send as well as"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * reading the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static final String INDENTATION \u003d \"  \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new Ui object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Reads the user input as a string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Welcomes the user when the user starts Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Hi! My name is Duke.\\nWhat do you want me to do?\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Sends a farewell message to the user when the user exit Duke."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String exit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Bye. Thank you for using me!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message about the specified task has been marked as done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that was marked as done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return done success message"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String doneSuccess(Task task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Successfully marked this task as done:\\n\" + INDENTATION + task.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message about the specified task has been deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that was deleted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskSize the task size after deletion"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return delete success message"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String deleteSuccess(Task task, int taskSize) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Okay. I will delete this task:\\n\" + INDENTATION + task + \"\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have \" + taskSize + \" \" + (taskSize \u003d\u003d 1 ? \"task \" : \"tasks \") + \"in the list.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message about the specified task has been added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that was added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskSize the task size after addition"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return add success message"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String addSuccess(Task task, int taskSize) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Okay. I will add this task:\\n\" + INDENTATION + task + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have \" + taskSize + \" \" + (taskSize \u003d\u003d 1 ? \"task \" : \"tasks \") + \"in the list.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String changeDateSuccess(Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Successfully change this task\u0027s date:\\n\" + INDENTATION + task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all of tasks in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList to be shown"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the tasks in the list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String showList(TaskList tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sb.append(\"Here is the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sb.append((i + 1) + \". \" + tasks.getTask(i) + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all the tasks in the list that happens after the specified date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the specified date by the user"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the tasks in the list after the specified date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String showTaskAfter(LocalDate date, TaskList tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        AtomicInteger index \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.getTasks()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .filter((task) -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    } else if (task instanceof DateTask) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        DateTask dateTask \u003d (DateTask) task;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        return date.isBefore(dateTask.getDate().toLocalDate());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                })"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .forEach((task) -\u003e sb.append(index.getAndIncrement() + \". \" + task + \"\\n\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"There is no task after this date!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Here is the tasks after \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \":\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + sb.toString().trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all the tasks in the list that happens before or equals to the specified date."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the specified date by the user"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the tasks in the list before"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or equals the specified date"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String showTaskBefore(LocalDate date, TaskList tasks) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        AtomicInteger index \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.getTasks()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .filter((task) -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    } else if (task instanceof DateTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        DateTask dateTask \u003d (DateTask) task;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        return date.isAfter(dateTask.getDate().toLocalDate())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                                || date.isEqual(dateTask.getDate().toLocalDate());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                })"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .forEach((task) -\u003e sb.append(index.getAndIncrement() + \". \" + task + \"\\n\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"There is no task before this date!\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Here is the tasks before \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \":\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + sb.toString().trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all the tasks in the list that contains the specified keyword."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param keyword keyword to find task"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the task that contains the specified keyword"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String findTask(String keyword, TaskList tasks) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        AtomicInteger index \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.getTasks()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .filter((task) -\u003e task.getTaskName().contains(keyword))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .forEach((task) -\u003e sb.append(index.getAndIncrement() + \". \" + task + \"\\n\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"No task found with that keyword!\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\" + sb.toString().trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the DukeException\u0027s message and prints it to the user."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param e exception thrown when running duke"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Prints the specified message to the user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param sendMessage message to be sent to the user"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void sendMessage(String sendMessage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        System.out.println(createLine(sendMessage));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Creates a line of equals sign before and after the specified message."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The length of the line may change depends on the length of the message."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param message the specified message"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message with line before and after it"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String createLine(String message) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Scanner sc \u003d new Scanner(message);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String equalSign \u003d \"\u003d\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        int width \u003d 75;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String textLine \u003d INDENTATION + sc.nextLine();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sb.append(textLine + \"\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            width \u003d Math.max(width, textLine.length() + 2);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String line \u003d equalSign.repeat(width);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return line + \"\\n\" + sb.toString() + line;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 228
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxDuke.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mouseTransparent\u003d\"true\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cHBox fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mouseTransparent\u003d\"true\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: cyan; -fx-background-radius: 5,5,5,5;\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog1\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u003cInnerShadow color\u003d\"#044fbf\" height\u003d\"119.23\" radius\u003d\"59.019999999999996\" width\u003d\"118.85\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxUser.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" mouseTransparent\u003d\"true\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "      \u003cHBox fx:id\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" mouseTransparent\u003d\"true\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #72A1E5; -fx-background-radius: 5,5,5,5;\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003cLabel fx:id\u003d\"dialog1\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003cInnerShadow color\u003d\"#50005b\" height\u003d\"119.6\" radius\u003d\"59.1125\" width\u003d\"118.85\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 31
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: black;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.utility.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: a3ffd9;\" styleClass\u003d\"root\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" spacing\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        \u003cURL value\u003d\"@main.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseTaskForSavingTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime dateTest \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(taskName, dateTest);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task eventTask \u003d new EventTask(taskName, dateTest);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedToDoTaskNotDone \u003d Parser.parseForSave(toDoTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedDeadlineTaskNotDone \u003d Parser.parseForSave(deadlineTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedEventTaskNotDone \u003d Parser.parseForSave(eventTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedToDoNotDone \u003d \"T | 0 | Sample task\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedDeadlineNotDone \u003d \"D | 0 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedEventNotDone \u003d \"E | 0 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedToDoNotDone, parsedToDoTaskNotDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedDeadlineNotDone, parsedDeadlineTaskNotDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedEventNotDone, parsedEventTaskNotDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask.setStatusToDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask.setStatusToDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedToDoTaskDone \u003d Parser.parseForSave(toDoTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedDeadlineTaskDone \u003d Parser.parseForSave(deadlineTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedEventTaskDone \u003d Parser.parseForSave(eventTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedToDoDone \u003d \"T | 1 | Sample task\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedDeadlineDone \u003d \"D | 1 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedEventDone \u003d \"E | 1 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedToDoDone, parsedToDoTaskDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedDeadlineDone, parsedDeadlineTaskDone);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedEventDone, parsedEventTaskDone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseToDoTaskForReadingFileTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readToDoNotDone \u003d \"T | 0 | Sample task\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readToDoDone \u003d \"T | 1 | Sample task\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDeadlineNotDone \u003d \"D | 0 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDeadlineDone \u003d \"D | 1 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readEventNotDone \u003d \"E | 0 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readEventDone \u003d \"E | 1 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskToDoNotDone \u003d Parser.parseForReadingFile(readToDoNotDone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskToDoDone \u003d Parser.parseForReadingFile(readToDoDone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskDeadlineNotDone \u003d Parser.parseForReadingFile(readDeadlineNotDone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskDeadlineDone \u003d Parser.parseForReadingFile(readDeadlineDone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskEventNotDone \u003d Parser.parseForReadingFile(readEventNotDone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskEventDone \u003d Parser.parseForReadingFile(readEventDone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[T][X] Sample task\", taskToDoNotDone.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[T][O] Sample task\", taskToDoDone.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[D][X] Sample task (by: Jan 01 2020 00:00)\", taskDeadlineNotDone.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[D][O] Sample task (by: Jan 01 2020 00:00)\", taskDeadlineDone.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[E][X] Sample task (at: Jan 01 2020 00:00)\", taskEventNotDone.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[E][O] Sample task (at: Jan 01 2020 00:00)\", taskEventDone.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputTest() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputDelete \u003d \"delete 1\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputDelete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputTaskAfter \u003d \"taskafter 2020-01-01\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputTaskAfter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputTaskBefore \u003d \"taskbefore 2020-01-01\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputTaskBefore);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputToDo \u003d \"todo Sample task\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputToDo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputDeadline \u003d \"deadline Sample task /by 2020-05-05 1000\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputDeadline);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputEvent \u003d \"event Sample task /at 2020-05-05 1000\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputEvent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 109
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Task toDoTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Task deadlineTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Task eventTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime dateTest \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.deadlineTask \u003d new DeadlineTask(taskName, dateTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask.setStatusToDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.eventTask \u003d new EventTask(taskName, dateTest);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void storageSaveTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path path \u003d Paths.get(\"junit-test/ACTUAL_STORAGE_SAVE.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Storage storage \u003d new Storage(path.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File actualStorageSave \u003d new File(path.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (actualStorageSave.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageSave.delete();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageSave.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(toDoTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File expectedStorageSave \u003d new File(\"junit-test/EXPECTED_STORAGE_SAVE.txt\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForActual \u003d new Scanner(actualStorageSave);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForExpected \u003d new Scanner(expectedStorageSave);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            boolean areSame \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (scForActual.hasNext() || scForExpected.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineActual \u003d scForActual.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineExpected \u003d scForExpected.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (!lineActual.equals(lineExpected)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    areSame \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Assertions.assertTrue(areSame);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void storageChangeToDoneTest() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path path \u003d Paths.get(\"junit-test/ACTUAL_STORAGE_CHANGE_TO_DONE.txt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Storage storage \u003d new Storage(path.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File actualStorageChangeToDone \u003d new File(path.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (actualStorageChangeToDone.exists()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageChangeToDone.delete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageChangeToDone.createNewFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(toDoTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.changeTaskStatusInFile(3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File expectedStorageChangeToDone \u003d new File(\"junit-test/EXPECTED_STORAGE_CHANGE_TO_DONE.txt\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForActual \u003d new Scanner(actualStorageChangeToDone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForExpected \u003d new Scanner(expectedStorageChangeToDone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            boolean areSame \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (scForActual.hasNext() || scForExpected.hasNext()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineActual \u003d scForActual.nextLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineExpected \u003d scForExpected.nextLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (!lineActual.equals(lineExpected)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    areSame \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Assertions.assertTrue(areSame);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void storageDeleteTest() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path path \u003d Paths.get(\"junit-test/ACTUAL_STORAGE_DELETE.txt\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Storage storage \u003d new Storage(path.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File actualStorageDelete \u003d new File(path.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (actualStorageDelete.exists()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageDelete.delete();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageDelete.createNewFile();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(toDoTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.deleteTaskInFile(2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File expectedStorageDelete \u003d new File(\"junit-test/EXPECTED_STORAGE_DELETE.txt\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForActual \u003d new Scanner(actualStorageDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForExpected \u003d new Scanner(expectedStorageDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            boolean areSame \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (scForActual.hasNext() || scForExpected.hasNext()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineActual \u003d scForActual.nextLine();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineExpected \u003d scForExpected.nextLine();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (!lineActual.equals(lineExpected)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    areSame \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Assertions.assertTrue(areSame);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 148
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void taskListIsEmptyTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(taskList.isEmpty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void taskListAddTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(taskList.size(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void taskListDeleteTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 2\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(taskList.size(), 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void taskListGetTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task1 \u003d new ToDoTask(\"Sample task 1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task2 \u003d new ToDoTask(\"Sample task 2\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(task1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(task2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(task1 \u003d\u003d taskList.getTask(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(task2 \u003d\u003d taskList.getTask(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 49
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private ToDoTask toDoTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private DeadlineTask deadlineTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private EventTask eventTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime dateTest \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.deadlineTask \u003d new DeadlineTask(taskName, dateTest);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask.setStatusToDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.eventTask \u003d new EventTask(taskName, dateTest);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void taskMethodsTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"Sample task\", toDoTask.getTaskName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"Sample task\", deadlineTask.getTaskName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"Sample task\", eventTask.getTaskName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(toDoTask.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(deadlineTask.isDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(eventTask.isDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String toDoTaskExpected \u003d \"[T][O] Sample task\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String deadlineTaskExpected \u003d \"[D][O] Sample task (by: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String eventTaskExpected \u003d \"[E][X] Sample task (at: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(toDoTaskExpected, toDoTask.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(deadlineTaskExpected, deadlineTask.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(eventTaskExpected, eventTask.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void deadlineTaskTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String dateExpected \u003d \"2020-01-01 0000\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(deadlineTask.getDate().equals(testDate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(dateExpected, deadlineTask.getDateString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void eventTaskTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String dateExpected \u003d \"2020-01-01 0000\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(eventTask.getDate().equals(testDate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(dateExpected, eventTask.getDateString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 64
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Task toDoTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Task deadlineTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Task eventTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime dateTest \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.deadlineTask \u003d new DeadlineTask(taskName, dateTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask.setStatusToDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.eventTask \u003d new EventTask(taskName, dateTest);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void doneSuccessTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String toDoTaskExpected \u003d \"Successfully marked this task as done:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[T][O] Sample task\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(toDoTaskExpected, ui.doneSuccess(toDoTask));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void deleteSuccessTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String deadlineTaskExpected \u003d \"Okay. I will delete this task:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[D][O] Sample task (by: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 1 task in the list.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(deadlineTaskExpected, ui.deleteSuccess(deadlineTask, 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void addSuccessTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String eventTaskExpected \u003d \"Okay. I will add this task:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[E][X] Sample task (at: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 3 tasks in the list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(eventTaskExpected, ui.addSuccess(eventTask, 3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void showListTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(toDoTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(eventTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String showListBeforeExpected \u003d \"Here is the tasks in your list:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"1. [T][O] Sample task\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"2. [D][O] Sample task (by: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"3. [E][X] Sample task (at: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(showListBeforeExpected, ui.showList(taskList));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void showTaskAfterTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDate dateTest \u003d LocalDate.parse(\"2019-01-01\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(toDoTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(eventTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedOutput \u003d \"Here is the tasks after Jan 01 2019:\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"1. [D][O] Sample task (by: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"2. [E][X] Sample task (at: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedOutput, ui.showTaskAfter(dateTest, taskList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void showTaskBeforeTest() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDate dateTest \u003d LocalDate.parse(\"2021-01-01\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(toDoTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(eventTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedOutput \u003d \"Here is the tasks before Jan 01 2021:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"1. [D][O] Sample task (by: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"2. [E][X] Sample task (at: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedOutput, ui.showTaskBefore(dateTest, taskList));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 104
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\duke\\utility\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\duke\\command\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\duke\\exception\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\duke\\task\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\duke\\Duke.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 5,
      "-": 20
    }
  }
]
