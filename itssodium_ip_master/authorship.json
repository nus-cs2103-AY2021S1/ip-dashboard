[
  {
    "path": "src/main/java/Duke/Commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This class handles the case of adding different tasks which are todo, deadline and event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor that assigns string value of string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string passes it to super class constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public AddCommand(String string) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * adds the task to list of task in taskList and into the file in storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage where the file here is updated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param task this task is added into storage and taskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param taskList where the tasks here is updated with task added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IOException when the file in storage is not present"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void update(Storage storage, Task task, TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        FileWriter fw \u003d new FileWriter(storage.getFilePath(), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        taskList.getAllTasks().add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        fw.write(task.inputListFormat() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Task.tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  Got it. I\u0027ve added this task:\\n  \" + task.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  Now you have \" + taskList.getAllTasks().size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * converts string to date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string string to convert to date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return local date which is converted from string, if cannot then DateTimeException thrown"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static LocalDate localDate(String string){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(string, formatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (DateTimeException d) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * converts string to dateTime"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string string to convert to dateTime"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return local dateTime which is converted from string, if cannot then DateTimeException thrown"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static LocalDateTime localDateTime(String string){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd, HH:mm\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDateTime parsedDate \u003d LocalDateTime.parse(string, formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DateTimeException g) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw g;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * converts string to time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string string to convert to time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return local time which is converted from string, if cannot then DateTimeException thrown"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static LocalTime localTime(String string){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalTime parsedDate \u003d LocalTime.parse(string, formatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DateTimeException f) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw f;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 86
    }
  },
  {
    "path": "src/main/java/Duke/Commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * this is an abstract class used for polymorphism"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * string which contains information on task and details to perform task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * exit is used to tell whether program terminates, where id true, it terminates"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String string;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    boolean exit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * used to assign string to a value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns this.string to string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Command(String string){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.string \u003d string;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gets value of exit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return exit"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * executes the necessary task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks used to access tasks in its list and change if necessary"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the input there if necessary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException if there are exceptions present"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 44
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DeadlineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * has the method if deadline is keyword deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeadlineCommand(String string) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static Deadline provide(String name, String string) throws DeadlineException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Deadline e;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate parsedDate \u003d localDate(string);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            e \u003d new Deadline(name, parsedDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (DateTimeException d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                LocalDateTime parsedDate \u003d localDateTime(string);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                e \u003d new Deadline(name, parsedDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy, HH:mm\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (DateTimeException g) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    LocalTime parsedDate \u003d localTime(string);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    e \u003d new Deadline(name, parsedDate.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                } catch (DateTimeException f) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new DeadlineException(false, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * to add deadline into a task list in TaskList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList if necessary"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file in the if necessary"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException whenever there is an error, where the time adn or date is absent or in wrong format, no"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DeadlineException{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (string.length() \u003d\u003d 8 || string.length() \u003d\u003d 9) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DeadlineException(true, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean time \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 8; i \u003c string.length(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (string.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                time \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + string.charAt(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!time) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DeadlineException(false, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Deadline d \u003d provide(s.substring(1, s.length() - 1), string.substring(index + 4));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            update(storage, d, tasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException i){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 82
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DeleteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles the case when the keyword is delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeleteCommand(String string) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void rewrite(Storage storage, TaskList tasks, int ID) throws FileAbsentException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"   Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"   \" + tasks.getAllTasks().get(ID - 1).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  Now you have \" + (tasks.getAllTasks().size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.getAllTasks().remove(ID - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + tasks.getAllTasks().get(i).inputListFormat() + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storage.getFilePath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(s);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * used to do deleted task and handle error"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList since item is deleted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file since item is deleted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException thrown if the ID is more than number of ID is absent"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (string.length() \u003d\u003d 4 || string.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "           throw new DeleteException(true, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            int ID \u003d Integer.parseInt(string.substring(7));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (ID \u003e tasks.getAllTasks().size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new DeleteException(false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                rewrite(storage, tasks, ID);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 64
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DoneException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles case when done is keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DoneCommand(String string) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void rewrite(Storage storage, TaskList tasks, int ID) throws FileAbsentException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.getAllTasks().get(ID - 1).setDone(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"   Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"   \" + tasks.getAllTasks().get(ID - 1).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + tasks.getAllTasks().get(i).inputListFormat() + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storage.getFilePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(s);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * is used to complete done task and handle error"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList as a task is completed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file as task is completed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException thrown if the ID is more than number of ID is absent"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (string.length() \u003d\u003d 4 || string.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DoneException(true, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            int ID \u003d Integer.parseInt(string.substring(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (ID \u003e tasks.getAllTasks().size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new DoneException(false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                rewrite(storage, tasks, ID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 61
    }
  },
  {
    "path": "src/main/java/Duke/Commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.EventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles cases when event is keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class EventCommand extends AddCommand{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public EventCommand(String string) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static event provide(String name, String string, String end) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        event e;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate parsedDate \u003d localDate(string);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate endDate \u003d localDate(end);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(parsedDate.isAfter(endDate)){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new EventException(false, false, true, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            e \u003d new event(name, parsedDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    endDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (EventException event){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(false, false, true, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (DateTimeException d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                LocalDateTime parsedDate \u003d localDateTime(string);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                LocalDateTime endDate \u003d localDateTime(end);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(parsedDate.isAfter(endDate)){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new EventException(false, false, true, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                e \u003d new event(name, parsedDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy, HH:mm\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        endDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy, HH:mm\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (EventException event){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new EventException(false, false, true, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            catch (DateTimeException g) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    LocalTime parsedDate \u003d localTime(string);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    LocalTime endDate \u003d localTime(end);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if(parsedDate.isAfter(endDate)){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        throw new EventException(false, false, true, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    e \u003d new event(name, parsedDate.format(DateTimeFormatter.ofPattern(\"HH:mm\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            endDate.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }catch (EventException y){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new EventException(false, false, true, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }catch (DateTimeException z) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new EventException(false, false, false, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * is used to add event task or handle exceptions"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList if necessary when no error"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file in the if necessary when no erro"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException if there no description after event no time or time is wrong format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (string.length() \u003d\u003d 5 || string.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(true, false, false, false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int end \u003d -1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean duration \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean time \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String start \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 5; i \u003c string.length(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (string.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                time \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + string.charAt(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d index + 1; i \u003c string.length(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (string.charAt(i) \u003d\u003d \u0027-\u0027 \u0026\u0026 i !\u003d string.length() - 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                end \u003d i;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                duration \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            start \u003d start + string.charAt(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!time) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(false, false, false, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!duration) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(false, true, false, false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        event d \u003d provide(s.substring(1, s.length() - 1), string.substring(index + 4, end), string.substring(end + 1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            update(storage, d, tasks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 120
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles case when exit is the keyword"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ExitCommand(String string) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * prints bye message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks no change made"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage no change made"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException not thrown"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns true to exit program"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true to exit program"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 38
    }
  },
  {
    "path": "src/main/java/Duke/Commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FindException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * used to handle case where find is keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FindCommand(String string) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setTasks(String[] strings, TaskList tasks){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cTask\u003e allTasks \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Task task \u003d allTasks.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String string \u003d task.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String[] comp \u003d string.split(\" \", -2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean contains \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            for(int j \u003d 0; j \u003c strings.length; j++){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String s \u003d strings[j];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                for(int k \u003d 0; k \u003c comp.length; k++){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if(comp[k].equals(s)){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        contains \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(contains) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                this.tasks.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * used to find the tasks which contains keyword in string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to look for the task\u0027s string value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage no need"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException used to throw error when no words mentioned after find or the keyword is not present in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(string.length() \u003d\u003d 4 || string.length() \u003d\u003d 5){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FindException(false, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String find \u003d string.substring(5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String[] strings \u003d find.split(\" \", -2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            setTasks(strings, tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(this.tasks.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new FindException(true, find);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"  Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                for(int i \u003d 0; i \u003c this.tasks.size(); i++){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    Task task \u003d this.tasks.get(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(\"  \" + (i + 1) + \".\" + task.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 77
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * used to handle case when list is the keyword"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ListCommand(String string) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * lists all the tasks that are currently present in the tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to access the list and print them"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            System.out.println(\"  \" + tasks.getAllTasks().get(i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 34
    }
  },
  {
    "path": "src/main/java/Duke/Commands/RandomCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.WrongInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles case where a random word is being input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class RandomCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RandomCommand(String string) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives wrong input exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws WrongInputException is thrown"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws WrongInputException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        throw new WrongInputException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 31
    }
  },
  {
    "path": "src/main/java/Duke/Commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.TodoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * has the method if todo is keyword deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TodoCommand extends AddCommand{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public TodoCommand(String string) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * to add deadline into a task list in TaskList,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList if necessary"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file in the if necessary"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException whenever there is an error, no"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (string.length() \u003d\u003d 4 || string.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new TodoException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                todo t \u003d new todo(string.substring(5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                update(storage, t, tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }catch (IOException i){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 44
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This Duke class is the main class that prints out the relevant outputs by including all the subclasses of Task and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * taking in the input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns the above member variables with the appropriate values, and throws certain exceptions if file in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * the filePath mentioned is empty or absent"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param filePath represents where the filepath of where the file may exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Duke(String filePath, String input){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            ui \u003d new Ui(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives main logic of the App,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * where exceptions are caught and printed and if bye is there code stops. also starts with hello"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param args of type String[]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * reads input using scan() and adds it to todos."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *  Then, prints out relevant information using the output() func."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Duke duke \u003d new Duke(\"src/main/java/tasks.txt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //PrintStream fileOut \u003d new PrintStream(\"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //System.setOut(fileOut);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //FileWriter fw \u003d new FileWriter(\"src/main/java/tasks.txt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //fw.write(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //fw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //Duke duke \u003d new Duke(\"src/main/java/tasks.txt\", \"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 84
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DeadlineException is used to print out exceptions when there is an incomplete input where wither the description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeadlineException extends DukeException{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description tests shows whether the description is present in the input of the user or not."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If description is not present it is true, else it is false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean format;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *constructor for deadline exception that assigns description and format values"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param description input, depneding on whether the description is present or not in the input.txt file. If present it is false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   else it is true."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeadlineException(boolean description, boolean format){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.format \u003d format;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description is empty if description is true. Else, if description is"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * false, it means that the date is absent and it informs accordingly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.description){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.format){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The formats of date and/ or include \" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"yyyy MM dd/ yyyy MM dd, HH:mm/ HH:mm\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The specific date/time of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 41
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DeleteException is used to print out exceptions when there is an incomplete input where the ID is absent or the ID"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * of that Task hasn\u0027t been defined yet or it has previously been deleted."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeleteException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * IDabsent tests shows whether the ID is present in the input of the user or not."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If ID is not present it is true, else it is false"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * deleted checks whether the task was previously deleted, if deleted it is true else false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean IDabsent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean deleted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor that assigns tne 2 variables its respective values"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param IDabsent input, depending on whether the ID is present or not in the input.txt file. If present it is false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   else it is true."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeleteException(boolean IDabsent, boolean deleted){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.IDabsent \u003d IDabsent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.deleted \u003d deleted;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method, for printing in getMessage()."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string depending on the scenario. If the IDabsent is true, then description that the description of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * delete cannot be empty. If the ID is previously deleted, it prints that it was deleted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Else, it means that the ID, of the Task given is not defined yet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(deleted){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! This task is previously deleted.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(IDabsent){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of delete cannot be empty.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The ID is not yet defined.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 42
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DoneException is used to print out exceptions when there is an incomplete input where the ID is absent or the ID"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * of that Task hasnt been defined yet."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DoneException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * IDabsent tests shows whether the ID is present in the input of the user or not."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If ID is not present it is true, else it is false"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean IDabsent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean deleted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor that assigns tne 2 variables its respective values"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param IDabsent input, depending on whether the ID is present or not in the input.txt file. If present it is false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   else it is true."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DoneException(boolean IDabsent, boolean deleted){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.IDabsent \u003d IDabsent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.deleted \u003d deleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string depending on the scenario. If the IDabsent is true, then description that the description of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * done cannot be empty. Else, it means that the ID, of the Task given is not defined yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(deleted){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! This task has already been deleted.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(IDabsent){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of a done cannot be empty.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The ID is not yet defined.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 39
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * this is a DukeException class which is the parents class of all the other exceptions in this package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * this is never intiilized and therefore is an abstract class and used for polymorphism."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * overrides getMessage of an error"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return string of the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 16
    }
  },
  {
    "path": "src/main/java/Duke/Errors/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This EventException is used to print out exceptions when there is an incomplete input where whether the description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description tests shows whether the description is present in the input of the user or not."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If description is not present it is true, else it is false"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean oneDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean diff;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean invalid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this assigns the variables above to its respective values."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param description input, depending on whether the description is present or not in the input.txt file. If"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *                    present it is false else it is true."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public EventException(boolean description, boolean oneDate, boolean diff, boolean invalid){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.oneDate \u003d oneDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.diff \u003d diff;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.invalid \u003d invalid;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description is empty if description is true. Else, if description is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * false, it means that the date is absent and it informs accordingly."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.description){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.oneDate){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! There should be 2 occurrences of date and/or time values.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.diff){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! Start should be less than end.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.invalid){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! Start and should be of the same format. The formats include \" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"yyyy MM dd/ yyyy MM dd, HH:mm/ HH:mm\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The specific date of an event cannot be empty.\" ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 49
    }
  },
  {
    "path": "src/main/java/Duke/Errors/FIleEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This exception is thrown when the file is empty"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FIleEmptyException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this overrides the toString() method"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return a String representation of FileEmptyExcleption"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"Task file is empty!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 17
    }
  },
  {
    "path": "src/main/java/Duke/Errors/FileAbsentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This exception is thrown whenever there is a file absent at a specific path mentioned in the filePath"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FileAbsentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This assigns filePath variable to a value"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param filePath the value assigned to filePath"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FileAbsentException(String filePath){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This overrides the toString() method"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return a String for the exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  The file in this directory \" + this.filePath + \" is absent!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 24
    }
  },
  {
    "path": "src/main/java/Duke/Errors/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The class FindException deals with what happens when an error occurs for task with find keyword"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FindException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String string;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor assigns values of description and string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param description value is assigned to this.description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string value is assigned to this.string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FindException(boolean description, String string){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.string \u003d string;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * overrides the toString() method"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return if description is present error is due to no matches being present and an error message informing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * them would be printed. If it is not present than error is due to keywords being absent therefore an error"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * message regarding that would be released."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(description){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"there are no matches to your keyword: \" + string;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"description of find cannot be empty!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 32
    }
  },
  {
    "path": "src/main/java/Duke/Errors/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This TodoException is used to print out exceptions when there is an incomplete input where whether the description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TodoException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description of the todo is absent as it cant be."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The description of a todo cannot be empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 15
    }
  },
  {
    "path": "src/main/java/Duke/Errors/WrongInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This prints the exception when a wrong word is being input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class WrongInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This takes not args and overrides the toString() method"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return a string that describes the error that took place which is that an invalid string has been inserted"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 14
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Commands.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This is a Parser class that determines which command operation to choose, which in turn determines"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * the action to be taken."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This returns a Command, depending on the string being input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string where the first words determines command to be returned"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return Command is returned based on the first word of param string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static Command parse(String string)  {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(string !\u003d null) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (string.length() \u003e\u003d 3 \u0026\u0026 string.equals(\"bye\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new ExitCommand(string);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.equals(\"list\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new ListCommand(string);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else if (string.length() \u003e\u003d 6 \u0026\u0026 string.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new DeleteCommand(string);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new DoneCommand(string);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"todo\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new TodoCommand(string);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else if (string.length() \u003e\u003d 5 \u0026\u0026 string.substring(0, 5).equals(\"event\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new EventCommand(string);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else if (string.length() \u003e\u003d 8 \u0026\u0026 string.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new DeadlineCommand(string);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new FindCommand(string);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return new RandomCommand(string);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new ExitCommand(string);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 40
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FIleEmptyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor assigns filePath to filePath"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param filePath assigns this value to variable"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Storage(String filePath){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * converts the string form of tasks on the file to Task objects"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the List of tasks containing Task instead of String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException when a file with FilePath doesnt exist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(sc.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                do{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    char bool \u003d s.charAt(4);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    boolean done \u003d (bool \u003d\u003d \u00271\u0027);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if(s.charAt(0) \u003d\u003d \u0027T\u0027){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        tasks.add(new todo(s.substring(8), done));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }else if(s.charAt(0) \u003d\u003d \u0027E\u0027){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        String string \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        int index \u003d -1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        for(int i \u003d 8; i \u003c s.length(); i++){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            if(s.charAt(i) \u003d\u003d \u0027|\u0027){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                                index \u003d i;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            string \u003d string + s.charAt(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        String another \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        for(int i \u003d index + 2; i \u003c s.length(); i++){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            if(s.charAt(i) \u003d\u003d \u0027-\u0027){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                                index \u003d i;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            another \u003d another + s.charAt(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        tasks.add(new event(string, done, another, s.substring(index + 1)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        String string \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        int index \u003d -1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        for(int i \u003d 8; i \u003c s.length(); i++){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            if(s.charAt(i) \u003d\u003d \u0027|\u0027){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                                index \u003d i;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            string \u003d string + s.charAt(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        tasks.add(new Deadline(string, done, s.substring(index + 2)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    } while (sc.hasNextLine());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(tasks.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new FIleEmptyException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException error){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(this.filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives the filePath"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the value of filePath"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 94
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * contains the task list e.g., it has operations to add/delete tasks in the list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private List\u003cTask\u003e allTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns allTasks a value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks assings the mem var a value of allTasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.allTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * another constructor, where the allTasks variable is just empty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns the List\u003cTask\u003e value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the List\u003cTask\u003e value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public List\u003cTask\u003e getAllTasks(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 35
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * deals with interactions with the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        sc \u003d  new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Ui(String file) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            sc \u003d new Scanner(new File(file));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (FileNotFoundException f){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(file);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this prints out if there is an error when tasks are loaded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param d this is the error that is thrown whose string message gets printed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showLoadingError(DukeException d){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * prints welcome message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  Hello! I\u0027m Duke\\n\" + \"  What can I do for you?\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this prints the ____ for easier readability"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this prints the next line of code to execute if it exists"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string of command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(sc.hasNextLine()){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * prints out the error"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param s s is the error that is printed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showError(String s){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 70
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The deadline is a subclass of Task and it is used to describe tasks that has to be completed by a specific day."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String day \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this assigns the name and day values"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param day assigns this.day to day value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Deadline(String name, String day) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this assigns the nam, done and day values"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name argument in super class constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done argument in super class constructor"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param day assigns to this.day"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Deadline(String name, boolean done, String day) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * takes no arguments and overrides the toString method"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for deadline class as mentioned with [D] indicating that it is a deadline class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * and also mentions the deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + this.day + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives a specific string representation for that in the tasks.txt file and overrides that in Task to make"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * it unique to that for Deadline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"D\" + super.inputListFormat() + \" | \" + this.day;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 48
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This Task is made abstract because it is never intialized in the actual code, however, it is used so that polymorphism"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * is able to work properly."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Tasks is made static because it contains the different tasks that are added, and therefore it is not limited to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * a single instance of Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor assigns name variable a value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name this assigns the name of the Task to the name being given in the constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor assigns name and done a value."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name assigns name to this.name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done assigns name to this.done"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Task(String name, boolean done){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives name of task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return name of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * setter that sets Done to the done value stated"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done value given to set it to done var"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives a specific string representation for that in the tasks.txt file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.done){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \" | 1 | \" + this.name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \" | 0 | \" + this.name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Overrides the toString methods"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String which contains info on task name as well as whether it is completed(tick sign) or not(cross sign)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.done) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"[\" + \"\\u2713\" + \"] \" + this.name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[\" + \"\\u2717\" + \"] \" + this.name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 78
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The event is a subclass of Task and it is used to describe tasks that has to be completed by a specific day and time"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param dateTime assigns this.dayTime to dayTime value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public event(String name, String dateTime, String end) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this assigns the nam, done and day values"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name argument in super class constructor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done argument in super class constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public event(String name, boolean done, String dateTime, String end) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *  Overrides the toString methods"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for event class as mentioned with [E] indicating that it is a event class"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *      * and also mentions the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + this.dateTime +  \"-\" + this.end + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives a specific string representation for that in the tasks.txt file and overrides that in Task to make"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * it unique to that for event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"E\" + super.inputListFormat() + \" | \" + this.dateTime + \"-\" + this.end;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 49
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The todo is a subclass of Task and it is used to describe tasks that have no specific deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns name to name value"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public todo(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns name and done to values"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name assigns name to this.name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done assigns done to this.done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public todo(String name, boolean done){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * takes no arguments and overrides the toString method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for todo class as mentioned with [T] indicating that it is a todo class"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives a specific string representation for that in the tasks.txt file and overrides that in Task to make"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * it unique to that for todo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"T\" + super.inputListFormat();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 42
    }
  },
  {
    "path": "src/main/java/expected.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Task file is empty!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  What can I do for you?"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [T][✗] buy book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   [T][✓] buy book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! The ID is not yet defined."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "[T][✓] buy book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "[D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 57
    }
  },
  {
    "path": "src/main/java/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event concert /at 12:00-10:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "todo buy book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event book club /at 12:00-10:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "deadline submission /by 2020 11 14"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "itssodium": 9
    }
  },
  {
    "path": "src/main/java/output.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Task file is empty!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  What can I do for you?"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [T][✗] buy book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   [T][✓] buy book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! The ID is not yet defined."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [T][✓] buy book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 57
    }
  },
  {
    "path": "src/main/java/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "E | 0 | concert | 14 Nov 2020-15 Nov 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "D | 1 | submission | 23:59"
      }
    ],
    "authorContributionMap": {
      "itssodium": 3
    }
  },
  {
    "path": "src/test/java/Duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static boolean equal(String s1, String s2) throws FileNotFoundException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        File exp \u003d new File(s1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        File act \u003d new File(s2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Scanner e \u003d new Scanner(exp);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Scanner a \u003d new Scanner(act);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean equal \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        while(e.hasNext() \u0026\u0026 a.hasNext()){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(!e.next().equals(a.next())){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                equal \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(equal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (e.hasNext() \u0026\u0026 !a.hasNext()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                equal \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (!e.hasNext() \u0026\u0026 a.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                equal \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return equal;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void Test1()  {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/expected.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.write(\"Task file is empty!\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String[] args \u003d new String[2];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Duke.main(args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean equal \u003d equal(\"src/main/java/expected.txt\", \"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            assertTrue(equal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException f){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void Test2()  {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"event book club /at 12:00-14:00\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"todo read book\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"deadline submission /by 2019 12 12\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"done 1\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"delete 4\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"list\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"bye\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/expected.txt\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.write(\"Task file is empty!\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [E][✗] book club(at: 12:00-14:00)\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 1 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [T][✗] read book\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 2 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [D][✗] submission(by: 12 Dec 2019)\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 3 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   [E][✓] book club(at: 12:00-14:00)\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! The ID is not yet defined.\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[E][✓] book club(at: 12:00-14:00)\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[T][✗] read book\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[D][✗] submission(by: 12 Dec 2019)\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "             Duke.main(new String[10]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean equal \u003d equal(\"src/main/java/expected.txt\", \"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            assertTrue(equal);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException f){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void Test3(){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/expected.txt\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(\"event concert /at 12:00-10:00\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"todo buy book\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"done 1\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"event book club /at 12:00-10:00\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"delete 2\\n\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"deadline submission /by 2020 11 14\\n\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"list\\n\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"blah\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"bye\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.write(\"Task file is empty!\\n\" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! Start should be less than end.\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [T][✗] buy book\\n\" +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 1 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   [T][✓] buy book\\n\" +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! Start should be less than end.\\n\" +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! The ID is not yet defined.\\n\" +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [D][✗] submission(by: 14 Nov 2020)\\n\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 2 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[T][✓] buy book\\n\" +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[D][✗] submission(by: 14 Nov 2020)\\n\" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Duke.main(new String[10]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean equal \u003d equal(\"src/main/java/expected.txt\", \"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            assertTrue(equal);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException f){"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 216
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event book club /at 12:00-14:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "deadline submission /by 2019 12 12"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "itssodium": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "if"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  )"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "itssodium": 7
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/event.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/todo.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/DeleteCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/ListCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/Command.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/AddCommand.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/ExitCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/DoneCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Duke.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/EventException.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/FileAbsentException.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/FIleEmptyException.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DeadlineException.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DeleteException.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DoneException.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/TodoException.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/WrongInputException.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DukeException.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/TaskList.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/Storage.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/Parser.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/Ui.java"
      }
    ],
    "authorContributionMap": {
      "itssodium": 24
    }
  }
]
